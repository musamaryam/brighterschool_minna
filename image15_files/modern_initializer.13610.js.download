(function(){var __webpack_modules__={31775:function(module){eval("/* eslint no-magic-numbers: [\"off\"] */\n// Use module.exports so that node can use this config\nmodule.exports = {\n  homeUrl: 'https://www.purechat.com',\n  apiUrl: 'https://api.purechat.com',\n  cdnUrl: 'https://prod.purechatcdn.com',\n  apiCdnServerUrl: 'https://api-cdn.purechat.com',\n  trackingOperatorApiUrl: 'https://tracking.purechat.com',\n  googleEmbedApiKey: 'AIzaSyBEorMC35CFuuH2caNZhAeFGRtqwbWE4Mc',\n  cdnServerUrl: 'https://prod.purechatcdn.com',\n  customerIoSiteId: 'd4a6e4df3666072e5b55',\n  dashboardRootUrl: 'https://app.purechat.com',\n  apiRootUrl: 'https://api.purechat.com',\n  widgetApiRootUrl: 'https://widgetapi.purechat.com',\n  filesRootUrl: 'https://files.purechat.com',\n  pingQueueUrl: 'https://checkin.purechat.com/api/checkin',\n  authCookieName: 'purechatAuthv5',\n  pidCookieName: 'prodvtftwPID',\n  pingInterval: 5000,\n  sessionTimeout: 1000 * 60 * 20,\n  // 20 minutes\n  recaptchaClientKey: '6LeJv-MUAAAAADCcAJn1EW3l5bMoqAxPfCO898oc'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE3NzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9zcmMvU2NyaXB0cy9jb25maWcvY29uZmlnLnByb2R1Y3Rpb24uanM/NmZhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tbWFnaWMtbnVtYmVyczogW1wib2ZmXCJdICovXG4vLyBVc2UgbW9kdWxlLmV4cG9ydHMgc28gdGhhdCBub2RlIGNhbiB1c2UgdGhpcyBjb25maWdcbm1vZHVsZS5leHBvcnRzID0ge1xuICBob21lVXJsOiAnaHR0cHM6Ly93d3cucHVyZWNoYXQuY29tJyxcbiAgYXBpVXJsOiAnaHR0cHM6Ly9hcGkucHVyZWNoYXQuY29tJyxcbiAgY2RuVXJsOiAnaHR0cHM6Ly9wcm9kLnB1cmVjaGF0Y2RuLmNvbScsXG4gIGFwaUNkblNlcnZlclVybDogJ2h0dHBzOi8vYXBpLWNkbi5wdXJlY2hhdC5jb20nLFxuICB0cmFja2luZ09wZXJhdG9yQXBpVXJsOiAnaHR0cHM6Ly90cmFja2luZy5wdXJlY2hhdC5jb20nLFxuICBnb29nbGVFbWJlZEFwaUtleTogJ0FJemFTeUJFb3JNQzM1Q0Z1dUgyY2FOWmhBZUZHUnRxd2JXRTRNYycsXG4gIGNkblNlcnZlclVybDogJ2h0dHBzOi8vcHJvZC5wdXJlY2hhdGNkbi5jb20nLFxuICBjdXN0b21lcklvU2l0ZUlkOiAnZDRhNmU0ZGYzNjY2MDcyZTViNTUnLFxuICBkYXNoYm9hcmRSb290VXJsOiAnaHR0cHM6Ly9hcHAucHVyZWNoYXQuY29tJyxcbiAgYXBpUm9vdFVybDogJ2h0dHBzOi8vYXBpLnB1cmVjaGF0LmNvbScsXG4gIHdpZGdldEFwaVJvb3RVcmw6ICdodHRwczovL3dpZGdldGFwaS5wdXJlY2hhdC5jb20nLFxuICBmaWxlc1Jvb3RVcmw6ICdodHRwczovL2ZpbGVzLnB1cmVjaGF0LmNvbScsXG4gIHBpbmdRdWV1ZVVybDogJ2h0dHBzOi8vY2hlY2tpbi5wdXJlY2hhdC5jb20vYXBpL2NoZWNraW4nLFxuICBhdXRoQ29va2llTmFtZTogJ3B1cmVjaGF0QXV0aHY1JyxcbiAgcGlkQ29va2llTmFtZTogJ3Byb2R2dGZ0d1BJRCcsXG4gIHBpbmdJbnRlcnZhbDogNTAwMCxcbiAgc2Vzc2lvblRpbWVvdXQ6IDEwMDAgKiA2MCAqIDIwLFxuICAvLyAyMCBtaW51dGVzXG4gIHJlY2FwdGNoYUNsaWVudEtleTogJzZMZUp2LU1VQUFBQUFEQ2NBSm4xRVczbDViTW9xQXhQZkNPODk4b2MnXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31775\n")},94849:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval("\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isPlaceholder.js\nfunction _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curry1.js\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nfunction _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/isNil.js\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\n\nvar isNil =\n/*#__PURE__*/\n_curry1(function isNil(x) {\n  return x == null;\n});\n\n/* harmony default export */ var es_isNil = (isNil);\n// EXTERNAL MODULE: ./src/Scripts/config/config.production.js\nvar config_production = __webpack_require__(31775);\nvar config_production_default = /*#__PURE__*/__webpack_require__.n(config_production);\n;// CONCATENATED MODULE: ./src/Scripts/widgets/shared/url.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction queryStringToObject(str) {\n  return (str || window.location.search).replace(/(^\\?)/, '').split('&').map(function (n) {\n    return n.split('=');\n  }).filter(function (pair) {\n    return !!pair[0];\n  }).reduce(function (obj, pair) {\n    var value = pair[1];\n    var num = parseFloat(value);\n    if (value === null || value === undefined) value = '';\n    if (value.toLowerCase() === 'true') value = true;else if (value.toLowerCase() === 'false') value = false; // Disable below is because of IE and it not liking `Number.isNaN`, fuuuuuucccckkkkk\n    // eslint-disable-next-line no-restricted-globals\n    else if (/^[0-9]$/gi.test(value) && !isNaN(num)) {\n        value = num % 1 === 0 ? parseInt(value, 10) : num;\n      } else if (value) {\n        value = decodeURIComponent(value);\n      }\n    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, pair[0], value));\n  }, {});\n}\nfunction objectToQueryString(obj) {\n  return Object.keys(obj).map(function (key) {\n    return [key, obj[key] === undefined || obj[key] === null ? '' : obj[key]].join('=');\n  }).join('&');\n}\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/lib/event_emitter.js\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction event_emitter_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar EventEmitter = /*#__PURE__*/function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    event_emitter_defineProperty(this, \"events\", {});\n  }\n\n  _createClass(EventEmitter, [{\n    key: \"on\",\n    value: function on(event, listener) {\n      var _this = this;\n\n      if (_typeof(this.events[event]) !== 'object') {\n        this.events[event] = [];\n      }\n\n      this.events[event].push(listener);\n      return function () {\n        return _this.off(event, listener);\n      };\n    }\n  }, {\n    key: \"off\",\n    value: function off(event, listener) {\n      if (_typeof(this.events[event]) !== 'object') return;\n      var idx = this.events[event].indexOf(listener);\n      if (idx > -1) this.events[event].splice(idx, 1);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event) {\n      var _this2 = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (_typeof(this.events[event]) !== 'object') return;\n      this.events[event].forEach(function (listener) {\n        return listener.apply(_this2, args);\n      });\n    }\n  }, {\n    key: \"once\",\n    value: function once(event, listener) {\n      var _this3 = this;\n\n      var remove = this.on(event, function () {\n        remove();\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        listener.apply(_this3, args);\n      });\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\n\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_arity.js\nfunction _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0:\n      return function () {\n        return fn.apply(this, arguments);\n      };\n\n    case 1:\n      return function (a0) {\n        return fn.apply(this, arguments);\n      };\n\n    case 2:\n      return function (a0, a1) {\n        return fn.apply(this, arguments);\n      };\n\n    case 3:\n      return function (a0, a1, a2) {\n        return fn.apply(this, arguments);\n      };\n\n    case 4:\n      return function (a0, a1, a2, a3) {\n        return fn.apply(this, arguments);\n      };\n\n    case 5:\n      return function (a0, a1, a2, a3, a4) {\n        return fn.apply(this, arguments);\n      };\n\n    case 6:\n      return function (a0, a1, a2, a3, a4, a5) {\n        return fn.apply(this, arguments);\n      };\n\n    case 7:\n      return function (a0, a1, a2, a3, a4, a5, a6) {\n        return fn.apply(this, arguments);\n      };\n\n    case 8:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n        return fn.apply(this, arguments);\n      };\n\n    case 9:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n        return fn.apply(this, arguments);\n      };\n\n    case 10:\n      return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n        return fn.apply(this, arguments);\n      };\n\n    default:\n      throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_pipe.js\nfunction _pipe(f, g) {\n  return function () {\n    return g.call(this, f.apply(this, arguments));\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curry2.js\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nfunction _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n\n      case 1:\n        return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n          return fn(a, _b);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b);\n        }) : fn(a, b);\n    }\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curry3.js\n\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nfunction _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n\n      case 1:\n        return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        });\n\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _curry1(function (_c) {\n          return fn(a, b, _c);\n        });\n\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n          return fn(_a, _b, c);\n        }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n          return fn(_a, b, _c);\n        }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n          return fn(a, _b, _c);\n        }) : _isPlaceholder(a) ? _curry1(function (_a) {\n          return fn(_a, b, c);\n        }) : _isPlaceholder(b) ? _curry1(function (_b) {\n          return fn(a, _b, c);\n        }) : _isPlaceholder(c) ? _curry1(function (_c) {\n          return fn(a, b, _c);\n        }) : fn(a, b, c);\n    }\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isArray.js\n/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\n/* harmony default export */ var _isArray = (Array.isArray || function _isArray(val) {\n  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n});\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isString.js\nfunction _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isArrayLike.js\n\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\n\nvar _isArrayLike =\n/*#__PURE__*/\n_curry1(function isArrayLike(x) {\n  if (_isArray(x)) {\n    return true;\n  }\n\n  if (!x) {\n    return false;\n  }\n\n  if (typeof x !== 'object') {\n    return false;\n  }\n\n  if (_isString(x)) {\n    return false;\n  }\n\n  if (x.nodeType === 1) {\n    return !!x.length;\n  }\n\n  if (x.length === 0) {\n    return true;\n  }\n\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n\n  return false;\n});\n\n/* harmony default export */ var internal_isArrayLike = (_isArrayLike);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_xwrap.js\nvar XWrap =\n/*#__PURE__*/\nfunction () {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n\n  XWrap.prototype['@@transducer/init'] = function () {\n    throw new Error('init not implemented on XWrap');\n  };\n\n  XWrap.prototype['@@transducer/result'] = function (acc) {\n    return acc;\n  };\n\n  XWrap.prototype['@@transducer/step'] = function (acc, x) {\n    return this.f(acc, x);\n  };\n\n  return XWrap;\n}();\n\nfunction _xwrap(fn) {\n  return new XWrap(fn);\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/bind.js\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      const log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\n\nvar bind =\n/*#__PURE__*/\n_curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function () {\n    return fn.apply(thisObj, arguments);\n  });\n});\n\n/* harmony default export */ var es_bind = (bind);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_reduce.js\n\n\n\n\nfunction _arrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n\n    idx += 1;\n  }\n\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _iterableReduce(xf, acc, iter) {\n  var step = iter.next();\n\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n\n    step = iter.next();\n  }\n\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _methodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](es_bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\nfunction _reduce(fn, acc, list) {\n  if (typeof fn === 'function') {\n    fn = _xwrap(fn);\n  }\n\n  if (internal_isArrayLike(list)) {\n    return _arrayReduce(fn, acc, list);\n  }\n\n  if (typeof list['fantasy-land/reduce'] === 'function') {\n    return _methodReduce(fn, acc, list, 'fantasy-land/reduce');\n  }\n\n  if (list[symIterator] != null) {\n    return _iterableReduce(fn, acc, list[symIterator]());\n  }\n\n  if (typeof list.next === 'function') {\n    return _iterableReduce(fn, acc, list);\n  }\n\n  if (typeof list.reduce === 'function') {\n    return _methodReduce(fn, acc, list, 'reduce');\n  }\n\n  throw new TypeError('reduce: list must be array or iterable');\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/reduce.js\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\n\nvar reduce =\n/*#__PURE__*/\n_curry3(_reduce);\n\n/* harmony default export */ var es_reduce = (reduce);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_checkForMethod.js\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\nfunction _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/slice.js\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\n\nvar slice =\n/*#__PURE__*/\n_curry3(\n/*#__PURE__*/\n_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\n/* harmony default export */ var es_slice = (slice);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/tail.js\n\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\n\nvar tail =\n/*#__PURE__*/\n_curry1(\n/*#__PURE__*/\n_checkForMethod('tail',\n/*#__PURE__*/\nes_slice(1, Infinity)));\n\n/* harmony default export */ var es_tail = (tail);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/pipe.js\n\n\n\n\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n */\n\nfunction pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n\n  return _arity(arguments[0].length, es_reduce(_pipe, arguments[0], es_tail(arguments)));\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isFunction.js\nfunction _isFunction(x) {\n  var type = Object.prototype.toString.call(x);\n  return type === '[object Function]' || type === '[object AsyncFunction]' || type === '[object GeneratorFunction]' || type === '[object AsyncGeneratorFunction]';\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_curryN.js\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\n\nfunction _curryN(length, received, fn) {\n  return function () {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n\n      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n\n      combined[combinedIdx] = result;\n\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n\n      combinedIdx += 1;\n    }\n\n    return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/curryN.js\n\n\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\n\nvar curryN =\n/*#__PURE__*/\n_curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n\n  return _arity(length, _curryN(length, [], fn));\n});\n\n/* harmony default export */ var es_curryN = (curryN);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_arrayFromIterator.js\nfunction _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n\n  return list;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_includesWith.js\nfunction _includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_functionName.js\nfunction _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_has.js\nfunction _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_objectIs.js\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nfunction _objectIs(a, b) {\n  // SameValue algorithm\n  if (a === b) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n}\n\n/* harmony default export */ var internal_objectIs = (typeof Object.is === 'function' ? Object.is : _objectIs);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isArguments.js\n\nvar _isArguments_toString = Object.prototype.toString;\n\nvar _isArguments =\n/*#__PURE__*/\nfunction () {\n  return _isArguments_toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n    return _isArguments_toString.call(x) === '[object Arguments]';\n  } : function _isArguments(x) {\n    return _has('callee', x);\n  };\n}();\n\n/* harmony default export */ var internal_isArguments = (_isArguments);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/keys.js\n\n\n // cover IE < 9 keys issues\n\nvar hasEnumBug = !\n/*#__PURE__*/\n{\n  toString: null\n}.propertyIsEnumerable('toString');\nvar nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString']; // Safari bug\n\nvar hasArgsEnumBug =\n/*#__PURE__*/\nfunction () {\n  'use strict';\n\n  return arguments.propertyIsEnumerable('length');\n}();\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\n\n\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  return Object(obj) !== obj ? [] : Object.keys(obj);\n}) :\n/*#__PURE__*/\n_curry1(function keys(obj) {\n  if (Object(obj) !== obj) {\n    return [];\n  }\n\n  var prop, nIdx;\n  var ks = [];\n\n  var checkArgsLength = hasArgsEnumBug && internal_isArguments(obj);\n\n  for (prop in obj) {\n    if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n      ks[ks.length] = prop;\n    }\n  }\n\n  if (hasEnumBug) {\n    nIdx = nonEnumerableProps.length - 1;\n\n    while (nIdx >= 0) {\n      prop = nonEnumerableProps[nIdx];\n\n      if (_has(prop, obj) && !contains(ks, prop)) {\n        ks[ks.length] = prop;\n      }\n\n      nIdx -= 1;\n    }\n  }\n\n  return ks;\n});\n/* harmony default export */ var es_keys = (keys);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/type.js\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(undefined); //=> \"Undefined\"\n */\n\nvar type =\n/*#__PURE__*/\n_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\n\n/* harmony default export */ var es_type = (type);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_equals.js\n\n\n\n\n\n\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparision of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  } // if *a* array contains any element that is not included in *b*\n\n\n  return !_includesWith(function (b, aItem) {\n    return !_includesWith(eq, aItem, b);\n  }, b, a);\n}\n\nfunction _equals(a, b, stackA, stackB) {\n  if (internal_objectIs(a, b)) {\n    return true;\n  }\n\n  var typeA = es_type(a);\n\n  if (typeA !== es_type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n\n      break;\n\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && internal_objectIs(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n\n      break;\n\n    case 'Date':\n      if (!internal_objectIs(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n\n      break;\n\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n\n    case 'RegExp':\n      if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n        return false;\n      }\n\n      break;\n  }\n\n  var idx = stackA.length - 1;\n\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = es_keys(a);\n\n  if (keysA.length !== es_keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n  idx = keysA.length - 1;\n\n  while (idx >= 0) {\n    var key = keysA[idx];\n\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n\n    idx -= 1;\n  }\n\n  return true;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/equals.js\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\n\nvar equals =\n/*#__PURE__*/\n_curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n\n/* harmony default export */ var es_equals = (equals);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_indexOf.js\n\nfunction _indexOf(list, a, idx) {\n  var inf, item; // Array.prototype.indexOf doesn't exist below IE9\n\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n\n          while (idx < list.length) {\n            item = list[idx];\n\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n\n            idx += 1;\n          }\n\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n\n            idx += 1;\n          }\n\n          return -1;\n        } // non-zero numbers can utilise Set\n\n\n        return list.indexOf(a, idx);\n      // all these types can utilise Set\n\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n\n    }\n  } // anything else not covered above, defer to R.equals\n\n\n  while (idx < list.length) {\n    if (es_equals(list[idx], a)) {\n      return idx;\n    }\n\n    idx += 1;\n  }\n\n  return -1;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_includes.js\n\nfunction _includes(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_map.js\nfunction _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n\n  return result;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_quote.js\nfunction _quote(s) {\n  var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b') // \\b matches word boundary; [\\b] matches backspace\n  .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_toISOString.js\n/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) {\n  return (n < 10 ? '0' : '') + n;\n};\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n  return d.toISOString();\n} : function _toISOString(d) {\n  return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n};\n\n/* harmony default export */ var internal_toISOString = (_toISOString);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_complement.js\nfunction _complement(f) {\n  return function () {\n    return !f.apply(this, arguments);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isTransformer.js\nfunction _isTransformer(obj) {\n  return obj != null && typeof obj['@@transducer/step'] === 'function';\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_dispatchable.js\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer [xf] to return a new transformer (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\nfunction _dispatchable(methodNames, xf, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var args = Array.prototype.slice.call(arguments, 0);\n    var obj = args.pop();\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, args);\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_filter.js\nfunction _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n\n    idx += 1;\n  }\n\n  return result;\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isObject.js\nfunction _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_xfBase.js\n/* harmony default export */ var _xfBase = ({\n  init: function () {\n    return this.xf['@@transducer/init']();\n  },\n  result: function (result) {\n    return this.xf['@@transducer/result'](result);\n  }\n});\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_xfilter.js\n\n\n\nvar XFilter =\n/*#__PURE__*/\nfunction () {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n\n  XFilter.prototype['@@transducer/step'] = function (result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return XFilter;\n}();\n\nvar _xfilter =\n/*#__PURE__*/\n_curry2(function _xfilter(f, xf) {\n  return new XFilter(f, xf);\n});\n\n/* harmony default export */ var internal_xfilter = (_xfilter);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/filter.js\n\n\n\n\n\n\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\n\nvar filter =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['filter'], internal_xfilter, function (pred, filterable) {\n  return _isObject(filterable) ? _reduce(function (acc, key) {\n    if (pred(filterable[key])) {\n      acc[key] = filterable[key];\n    }\n\n    return acc;\n  }, {}, es_keys(filterable)) : // else\n  _filter(pred, filterable);\n}));\n\n/* harmony default export */ var es_filter = (filter);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/reject.js\n\n\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\n\nvar reject =\n/*#__PURE__*/\n_curry2(function reject(pred, filterable) {\n  return es_filter(_complement(pred), filterable);\n});\n\n/* harmony default export */ var es_reject = (reject);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_toString.js\n\n\n\n\n\n\nfunction _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);\n  }; //  mapPairs :: (Object, [String]) -> [String]\n\n\n  var mapPairs = function (obj, keys) {\n    return _map(function (k) {\n      return _quote(k) + ': ' + recur(obj[k]);\n    }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, es_reject(function (k) {\n        return /^\\d+$/.test(k);\n      }, es_keys(x)))).join(', ') + ']';\n\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(internal_toISOString(x))) + ')';\n\n    case '[object Null]':\n      return 'null';\n\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n\n    case '[object Undefined]':\n      return 'undefined';\n\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n\n      return '{' + mapPairs(x, es_keys(x)).join(', ') + '}';\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/ramda/es/toString.js\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\n\nvar toString_toString =\n/*#__PURE__*/\n_curry1(function toString(val) {\n  return _toString(val, []);\n});\n\n/* harmony default export */ var es_toString = (toString_toString);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/invoker.js\n\n\n\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of any of the target object's methods to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      const sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n *\n *      const dog = {\n *        speak: async () => 'Woof!'\n *      };\n *      const speak = R.invoker(0, 'speak');\n *      speak(dog).then(console.log) //~> 'Woof!'\n *\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\n\nvar invoker =\n/*#__PURE__*/\n_curry2(function invoker(arity, method) {\n  return es_curryN(arity + 1, function () {\n    var target = arguments[arity];\n\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n\n    throw new TypeError(es_toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\n/* harmony default export */ var es_invoker = (invoker);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/join.js\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      const spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\n\nvar join =\n/*#__PURE__*/\nes_invoker(1, 'join');\n/* harmony default export */ var es_join = (join);\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/app/constants/index.js\nvar _UploadErrorMessages;\n\nfunction constants_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-magic-numbers */\nvar ViewPaths = {\n  Initializing: 'initializing',\n  Unavailable: 'unavailable',\n  StartChatForm: 'start-chat-form',\n  Conversation: 'conversation',\n  EmailForm: 'email-form',\n  EmailSuccess: 'email-success',\n  UnavailableMessage: 'unavailable-message'\n};\nvar KeyCodes = {\n  Enter: 13,\n  Escape: 27,\n  LeftArrow: 37,\n  UpArrow: 38,\n  RightArrow: 39,\n  DownArrow: 40,\n  Tab: 9,\n  Space: 32\n};\nvar LocalStorageKeys = {\n  ContactId: 'i',\n  AcquisitionSource: 'purechat_acquisition_source',\n  Expanded: 'purechat_expanded',\n  LeadCaptureExpanded: 'purechat_lead_capture_expanded',\n  PlaySound: '_purechatVisitorWidgetPlaySound',\n  UserId: 'purechat_userId',\n  AuthToken: 'purechat_authToken',\n  RoomId: 'purechat_roomId',\n  RoomType: 'purechat_roomType',\n  ChatId: 'purechat_chatId',\n  VisitorName: 'purechat_visitorName',\n  Disabled: 'purechat_disabled',\n  ChatActiveInOtherWindow: 'purechat_chatActiveInOtherWindow',\n  ChatClosed: 'purechat_chatClosed',\n  ExpandSource: 'purechat_expandSource',\n  ChatServerUrl: 'purechat_chatServerUrl',\n  HasHadChat: 'purechat_hasHadChat',\n  HasHadEmail: 'purechat_hasHadEmail',\n  Emojis: 'purechat_emojis',\n  LastActivity: 'purechat_lastActivity',\n  TriggerPageStart: '{widgetId}__purechatPageStart',\n  TriggerLastCheckin: '{widgetId}__purechatLastCheckin',\n  TriggerSessionStart: '{widgetId}__purechatSessionStart',\n  TriggerDismissTime: '{widgetId}__purechatDismissTime',\n  TriggerDismissCount: '{widgetId}__purechatDismissCount',\n  SessionStartTime: '{widgetId}__purechat_sessionStartTime',\n  TrackingVisitorCount: 'vc',\n  TrackingVisitorNumber: 'vn'\n};\nvar Cookies = {\n  Hubspot: 'hubspotutk'\n};\nvar PreviewActions = {\n  Inactive: 'preview:inactive',\n  Collapsed: 'preview:collapsed',\n  EmailForm: 'preview:email-form',\n  AskForInfo: 'preview:ask-for-info',\n  Chatting: 'preview:chatting',\n  ChatEnd: 'preview:chat-end',\n  Unavailable: 'preview:unavailable'\n};\n/**\n * Enums\n */\n\nvar WidgetPositionsEnum = {\n  NotAvailable: 0,\n  BottomLeft: 1,\n  BottomRight: 2,\n  TopLeft: 3,\n  TopRight: 4\n};\nvar AvailabilityReasonsEnum = {\n  Available: 1,\n  NoOperators: 2,\n  ServerDowntime: 3,\n  AccountActivity: 4,\n  ChatQuotaExceeded: 5,\n  WidgetDisabled: 6,\n  IPIsBanned: 7\n};\nvar UnavailableBehaviorsEnum = {\n  HideWidget: 0,\n  ShowMessage: 1,\n  ShowEmail: 2\n};\nvar MessageTypesEnum = {\n  Message: 0,\n  Join: 1,\n  Leave: 2,\n  Close: 3,\n  File: 4,\n  Separator: 1000,\n  Note: 1001,\n  UnfurlLink: 2000,\n  UnfurlFile: 2001,\n  UnfurlImage: 2002,\n  UnfurlGiphy: 2003,\n  UnfurlTwitter: 2004,\n  UnfurlYoutube: 2005\n};\nvar UploadStatusesEnum = {\n  Start: 0,\n  Uploading: 1,\n  Unauthorized: 2,\n  Error: 3,\n  Complete: 4\n};\nvar ExpandWidgetTimeoutTypesEnum = {\n  SiteWide: 1,\n  SinglePage: 2\n};\nvar MobileDisplayTypesEnum = {\n  Hidden: 0,\n  SameAsDesktop: 1,\n  MobileOptimized: 2\n};\nvar ClosedReasonCodesEnum = {\n  ClosedByUser: 0,\n  ConnectionTimeout: 1,\n  Inactivity: 2,\n  ClosedByOperator: 3,\n  NoOperatorJoined: 4\n};\nvar CollapsedStylesEnum = {\n  Tab: 1,\n  Button: 2,\n  Image: 3,\n  ImageTab: 4\n};\nvar OverrideVisitorTypesEnum = {\n  All: 0,\n  Returning: 1,\n  New: 2\n};\n/**\n * Misc\n */\n\nvar NewChatServerEvents = {\n  ContactChanged: 'contact:changed',\n  Disconnect: 'disconnect',\n  File: 'file',\n  IdentifySuccess: 'identify:success',\n  IdentifyError: 'identify:error',\n  Joined: 'room:joined',\n  Left: 'room:left',\n  Message: 'message:send',\n  MessageDeleted: 'message:deleted',\n  RoomDestroyed: 'room:closed',\n  RoomDetailsChanged: 'room.attributes:changed',\n  Typing: 'typing'\n};\nvar AvailabilityDelays = {\n  AvailablePollingDelay: 20 * 1000,\n  UnavailablePollingDelay: 10 * 60 * 1000,\n  InactivePollingDelay: 2 * 1000,\n  LastCheckThreshold: 120 * 1000\n};\nvar UNAUTHORIZED = 401;\nvar PROXY_AUTHENTICATION_REQUIRED = 407;\nvar REQUEST_TOO_LONG = 413;\nvar UNSUPPORTED_MEDIA_TYPE = 415;\nvar UploadErrorMessages = (_UploadErrorMessages = {\n  default: 'File Send Failed'\n}, constants_defineProperty(_UploadErrorMessages, UNAUTHORIZED, 'You are not authorized to upload.'), constants_defineProperty(_UploadErrorMessages, PROXY_AUTHENTICATION_REQUIRED, 'You are not authorized to upload.'), constants_defineProperty(_UploadErrorMessages, REQUEST_TOO_LONG, 'This file is too large. 10MB Limit.'), constants_defineProperty(_UploadErrorMessages, UNSUPPORTED_MEDIA_TYPE, 'This file type is not supported.'), _UploadErrorMessages);\nvar FileMessageRegex = /(.*)\\((http.*)\\)\\s(.*)\\s•\\s(.*)/;\nvar EmojiRegex = /([\\s.]|&nbsp;|^)(:[a-z_]{2,})(?=[\\s.]|&nbsp;|$)/gim;\nvar ColonRegex = /(^:|:$)/gim;\nvar CuratedEmojis = '👍,👎,🙂,😄,😂,🎉,❤️,👏,✅,💥'; // 2MB\n\nvar MaxUnfurlSize = 2 * Math.pow(10, 6); // eslint-disable-line no-magic-numbers\n\nvar ScrollBufferPx = 50;\nvar MaxMessengerHeight = 700;\nvar MessengerChromeHeightOffset = 90;\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/initializer/js_api/setter_mappings.js\nfunction setter_mappings_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction setter_mappings_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { setter_mappings_ownKeys(Object(source), true).forEach(function (key) { setter_mappings_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { setter_mappings_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction setter_mappings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nvar POPPED_OUT_CHECK_INTERVAL = 400; // The actions dispatched here are hand crafted as we cannot import any actions from the store\n// in this file. That's because this file is imported and used way before the store is setup\n// so if any actions are imported here, they will break.\n\nvar updateContactProperty = function updateContactProperty(store, prop, value) {\n  var _store$getState = store.getState(),\n      contact = _store$getState.contact;\n\n  store.dispatch({\n    type: 'contact/UPDATE',\n    payload: setter_mappings_objectSpread(setter_mappings_objectSpread({}, contact), {}, setter_mappings_defineProperty({}, prop, value))\n  });\n};\n\nvar updateSetting = function updateSetting(store, payload) {\n  store.dispatch({\n    type: 'settings/SETTING_UPDATE',\n    payload: payload\n  });\n};\n\nvar updateResource = function updateResource(store, payload) {\n  store.dispatch({\n    type: 'settings/STRING_RESOURCE_UPDATE',\n    payload: payload\n  });\n};\n\nvar checkPoppedOutInterval = null;\n\nvar popoutChat = function popoutChat(store) {\n  if (window.purechatPoppedOutWindow) {\n    window.purechatPoppedOutWindow.focus();\n  } else {\n    if (checkPoppedOutInterval) clearInterval(checkPoppedOutInterval);\n    checkPoppedOutInterval = null;\n    var state = store.getState();\n    var params = objectToQueryString({\n      widgetId: state.settings.id,\n      userId: state.conversation.userId,\n      displayName: state.contact.firstName,\n      authToken: state.conversation.authToken,\n      roomId: state.conversation.roomId,\n      roomType: state.conversation.roomType,\n      chatId: state.conversation.chatId,\n      origin: state.settings.origin,\n      contactId: state.contact.id\n    });\n    var url = \"\".concat((config_production_default()).dashboardRootUrl, \"/visitorwidget/chatwindow?\").concat(params);\n    window.purechatPoppedOutWindow = state.app.isMobile ? window.open(url, '_blank') : window.open(url, 'purechat-window', 'menubar=no, location=no, resizable=yes, scrollbars=no, status=no, width=480, height=640');\n    checkPoppedOutInterval = setInterval(function () {\n      // !== is required for compatibility with Opera :(\n      if (window.purechatPoppedOutWindow.closed !== false) {\n        clearInterval(checkPoppedOutInterval);\n        checkPoppedOutInterval = null;\n        window.purechatPoppedOutWindow = null;\n      }\n    }, POPPED_OUT_CHECK_INTERVAL);\n    store.dispatch({\n      type: 'ui/CHAT_POPPED_OUT',\n      payload: null\n    });\n  }\n};\n\nvar mapUnavailableBehavior = function mapUnavailableBehavior(value) {\n  return {\n    hide: UnavailableBehaviorsEnum.HideWidget,\n    email: UnavailableBehaviorsEnum.ShowEmail,\n    message: UnavailableBehaviorsEnum.ShowMessage\n  }[value] || UnavailableBehaviorsEnum.HideWidget;\n};\n\nvar mapPosition = function mapPosition(value) {\n  return {\n    bottomLeft: WidgetPositionsEnum.BottomLeft,\n    bottomRight: WidgetPositionsEnum.BottomRight,\n    topLeft: WidgetPositionsEnum.TopLeft,\n    topRight: WidgetPositionsEnum.TopRight\n  }[value] || WidgetPositionsEnum.BottomRight;\n};\n\n/* harmony default export */ var setter_mappings = ({\n  'visitor.name': function visitorName(store, value) {\n    updateContactProperty(store, 'name', value);\n    var split = value.split(' ');\n    updateContactProperty(store, 'firstName', split[0]);\n    updateContactProperty(store, 'lastName', pipe(es_tail, es_join(' '))(split) || '');\n  },\n  'visitor.firstName': function visitorFirstName(store, value) {\n    return updateContactProperty(store, 'firstName', value);\n  },\n  'visitor.lastName': function visitorLastName(store, value) {\n    return updateContactProperty(store, 'lastName', value);\n  },\n  'visitor.email': function visitorEmail(store, value) {\n    return updateContactProperty(store, 'email', value);\n  },\n  'visitor.company': function visitorCompany(store, value) {\n    return updateContactProperty(store, 'company', value);\n  },\n  'visitor.phoneNumber': function visitorPhoneNumber(store, value) {\n    return updateContactProperty(store, 'phone', value);\n  },\n  'visitor.question': function visitorQuestion(store, value) {\n    return updateContactProperty(store, 'question', value);\n  },\n  'chatbox.unavailableBehavior': function chatboxUnavailableBehavior(store, value) {\n    return updateSetting(store, {\n      property: 'unavailableBehavior',\n      value: mapUnavailableBehavior(value)\n    });\n  },\n  'chatbox.position': function chatboxPosition(store, value) {\n    return updateSetting(store, {\n      property: 'position',\n      value: mapPosition(value)\n    });\n  },\n  'chatbox.askForName': function chatboxAskForName(store, value) {\n    updateSetting(store, {\n      property: 'askForFirstName',\n      value: value\n    });\n    updateSetting(store, {\n      property: 'askForLastName',\n      value: value\n    });\n  },\n  'chatbox.askForFirstName': function chatboxAskForFirstName(store, value) {\n    return updateSetting(store, {\n      property: 'askForFirstName',\n      value: value\n    });\n  },\n  'chatbox.askForLastName': function chatboxAskForLastName(store, value) {\n    return updateSetting(store, {\n      property: 'askForLastName',\n      value: value\n    });\n  },\n  'chatbox.askForEmail': function chatboxAskForEmail(store, value) {\n    return updateSetting(store, {\n      property: 'askForEmail',\n      value: value\n    });\n  },\n  'chatbox.askForCompany': function chatboxAskForCompany(store, value) {\n    return updateSetting(store, {\n      property: 'askForCompany',\n      value: value\n    });\n  },\n  'chatbox.askForPhoneNumber': function chatboxAskForPhoneNumber(store, value) {\n    return updateSetting(store, {\n      property: 'askForPhoneNumber',\n      value: value\n    });\n  },\n  'chatbox.enableTranscriptDownload': function chatboxEnableTranscriptDownload(store, value) {\n    return updateSetting(store, {\n      property: 'downloadTranscript',\n      value: value\n    });\n  },\n  'chatbox.askForRating': function chatboxAskForRating(store, value) {\n    return updateSetting(store, {\n      property: 'askForRating',\n      value: value\n    });\n  },\n  'chatbox.expanded': function chatboxExpanded(store, value) {\n    var _store$getState2 = store.getState(),\n        settings = _store$getState2.settings;\n\n    if (settings.forcePopout) {\n      popoutChat(store);\n    } else {\n      store.dispatch({\n        type: value ? 'app/MESSENGER_EXPAND' : 'app/MESSENGER_COLLAPSE',\n        payload: value\n      });\n    }\n  },\n  'chatbox.visible': function chatboxVisible(store, value) {\n    return store.dispatch({\n      type: 'app/VISIBILITY_UPDATE',\n      payload: value\n    });\n  },\n  'chatbox.firstMessage': function chatboxFirstMessage(store, value) {\n    return updateResource(store, {\n      property: 'chat_startedMessage',\n      value: value\n    });\n  }\n});\n;// CONCATENATED MODULE: ./node_modules/ramda/es/curry.js\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\n\nvar curry =\n/*#__PURE__*/\n_curry1(function curry(fn) {\n  return es_curryN(fn.length, fn);\n});\n\n/* harmony default export */ var es_curry = (curry);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/split.js\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `sep`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\n\nvar split =\n/*#__PURE__*/\nes_invoker(1, 'split');\n/* harmony default export */ var es_split = (split);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/flip.js\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\n\nvar flip =\n/*#__PURE__*/\n_curry1(function flip(fn) {\n  return es_curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\n/* harmony default export */ var es_flip = (flip);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/internal/_isInteger.js\n/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\n/* harmony default export */ var _isInteger = (Number.isInteger || function _isInteger(n) {\n  return n << 0 === n;\n});\n;// CONCATENATED MODULE: ./node_modules/ramda/es/nth.js\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\n\nvar nth =\n/*#__PURE__*/\n_curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n\n/* harmony default export */ var es_nth = (nth);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/paths.js\n\n\n\n/**\n * Retrieves the values at given paths of an object.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Object\n * @typedefn Idx = [String | Int]\n * @sig [Idx] -> {a} -> [a | Undefined]\n * @param {Array} pathsArray The array of paths to be fetched.\n * @param {Object} obj The object to retrieve the nested properties from.\n * @return {Array} A list consisting of values at paths specified by \"pathsArray\".\n * @see R.path\n * @example\n *\n *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]\n */\n\nvar paths =\n/*#__PURE__*/\n_curry2(function paths(pathsArray, obj) {\n  return pathsArray.map(function (paths) {\n    var val = obj;\n    var idx = 0;\n    var p;\n\n    while (idx < paths.length) {\n      if (val == null) {\n        return;\n      }\n\n      p = paths[idx];\n      val = _isInteger(p) ? es_nth(p, val) : val[p];\n      idx += 1;\n    }\n\n    return val;\n  });\n});\n\n/* harmony default export */ var es_paths = (paths);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/path.js\n\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig [Idx] -> {a} -> a | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop, R.nth\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n */\n\nvar path =\n/*#__PURE__*/\n_curry2(function path(pathAr, obj) {\n  return es_paths([pathAr], obj)[0];\n});\n\n/* harmony default export */ var es_path = (path);\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/initializer/js_api/getter_mappings.js\nfunction getter_mappings_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nvar getter_mappings_mapUnavailableBehavior = function mapUnavailableBehavior(value) {\n  var _UnavailableBehaviors;\n\n  return (_UnavailableBehaviors = {}, getter_mappings_defineProperty(_UnavailableBehaviors, UnavailableBehaviorsEnum.HideWidget, 'hide'), getter_mappings_defineProperty(_UnavailableBehaviors, UnavailableBehaviorsEnum.ShowEmail, 'email'), getter_mappings_defineProperty(_UnavailableBehaviors, UnavailableBehaviorsEnum.ShowMessage, 'message'), _UnavailableBehaviors)[value] || 'hide';\n};\n\nvar getter_mappings_mapPosition = function mapPosition(value) {\n  var _WidgetPositionsEnum$;\n\n  return (_WidgetPositionsEnum$ = {}, getter_mappings_defineProperty(_WidgetPositionsEnum$, WidgetPositionsEnum.BottomLeft, 'bottomLeft'), getter_mappings_defineProperty(_WidgetPositionsEnum$, WidgetPositionsEnum.BottomRight, 'bottomRight'), getter_mappings_defineProperty(_WidgetPositionsEnum$, WidgetPositionsEnum.TopLeft, 'topLeft'), getter_mappings_defineProperty(_WidgetPositionsEnum$, WidgetPositionsEnum.TopRight, 'topRight'), _WidgetPositionsEnum$)[value] || 'bottomRight';\n};\n\nvar getFromStore = es_curry(function (store, prop) {\n  return pipe(es_split('.'), es_flip(es_path)(store.getState()))(prop);\n});\n/* harmony default export */ var getter_mappings = ({\n  'chatbox.available': function chatboxAvailable(store) {\n    return getFromStore(store, 'availability.isOperatorAvailable');\n  },\n  'chatbox.unavailableBehavior': function chatboxUnavailableBehavior(store) {\n    return pipe(getFromStore(store), getter_mappings_mapUnavailableBehavior)('settings.unavailableBehavior');\n  },\n  'chatbox.position': function chatboxPosition(store) {\n    return pipe(getFromStore(store), getter_mappings_mapPosition)('settings.position');\n  },\n  'chatbox.askForName': function chatboxAskForName(store) {\n    return getFromStore(store, 'settings.askForFirstName') || getFromStore(store, 'settings.askForLastName');\n  },\n  'chatbox.askForFirstName': function chatboxAskForFirstName(store) {\n    return getFromStore(store, 'settings.askForFirstName');\n  },\n  'chatbox.askForLastName': function chatboxAskForLastName(store) {\n    return getFromStore(store, 'settings.askForLastName');\n  },\n  'chatbox.askForEmail': function chatboxAskForEmail(store) {\n    return getFromStore(store, 'settings.askForEmail');\n  },\n  'chatbox.askForCompany': function chatboxAskForCompany(store) {\n    return getFromStore(store, 'settings.askForCompany');\n  },\n  'chatbox.askForPhoneNumber': function chatboxAskForPhoneNumber(store) {\n    return getFromStore(store, 'settings.askForPhoneNumber');\n  },\n  'chatbox.expanded': function chatboxExpanded(store) {\n    return getFromStore(store, 'app.isMessengerOpen');\n  },\n  'visitor.name': function visitorName(store) {\n    var name = getFromStore(store, 'contact.name');\n    var firstName = getFromStore(store, 'contact.firstName');\n    var lastName = getFromStore(store, 'contact.lastName');\n    return name || \"\".concat(firstName || '', \" \").concat(lastName || '').trim();\n  },\n  'visitor.firstName': function visitorFirstName(store) {\n    return getFromStore(store, 'contact.firstName');\n  },\n  'visitor.lastName': function visitorLastName(store) {\n    return getFromStore(store, 'contact.lastName');\n  },\n  'visitor.email': function visitorEmail(store) {\n    return getFromStore(store, 'contact.email');\n  },\n  'visitor.company': function visitorCompany(store) {\n    return getFromStore(store, 'contact.company');\n  },\n  'visitor.phoneNumber': function visitorPhoneNumber(store) {\n    return getFromStore(store, 'contact.phone');\n  },\n  'visitor.question': function visitorQuestion(store) {\n    return getFromStore(store, 'contact.question');\n  }\n});\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/initializer/js_api/js_api.js\nfunction js_api_typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { js_api_typeof = function _typeof(obj) { return typeof obj; }; } else { js_api_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return js_api_typeof(obj); }\n\nfunction js_api_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction js_api_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { js_api_ownKeys(Object(source), true).forEach(function (key) { js_api_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { js_api_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction js_api_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction js_api_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction js_api_createClass(Constructor, protoProps, staticProps) { if (protoProps) js_api_defineProperties(Constructor.prototype, protoProps); if (staticProps) js_api_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (js_api_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction js_api_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n // Internal events are handled within the launcher using the `internal:` prefix.\n// This it avoid having to add each event/trigger twice. This is because we\n// limit the events that the user can attach to, so to get around those checks\n// internally, this prefix is used.\n\nvar isInternal = function isInternal(name) {\n  return name.split(':')[0] === 'internal';\n};\n\nvar JavaScriptApi = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(JavaScriptApi, _EventEmitter);\n\n  var _super = _createSuper(JavaScriptApi);\n\n  function JavaScriptApi() {\n    var _this;\n\n    js_api_classCallCheck(this, JavaScriptApi);\n\n    _this = _super.call(this); // Attach to the `message` event so we can trigger API events off of things\n    // coming from the chat window iframe.\n\n    js_api_defineProperty(_assertThisInitialized(_this), \"store\", null);\n\n    js_api_defineProperty(_assertThisInitialized(_this), \"supportedEvents\", ['chatbox:ready', 'chatbox:expand', 'chatbox:collapse', 'chatbox.available:change', 'chatbox:poppedOut', 'chatbox:restart', 'chat:operatorJoin', 'chat:operatorLeave', 'chat:rate', 'chat:end', 'chat:start', 'chat:change', 'visitor.name:change', 'visitor.firstName:change', 'visitor.lastName:change', 'visitor.email:change', 'visitor.phoneNumber:change', 'visitor.company:change', 'email:send']);\n\n    js_api_defineProperty(_assertThisInitialized(_this), \"supportedTriggers\", []);\n\n    js_api_defineProperty(_assertThisInitialized(_this), \"supportedSet\", ['visitor.name', 'visitor.firstName', 'visitor.lastName', 'visitor.email', 'visitor.phoneNumber', 'visitor.company', 'visitor.question', 'chatbox.unavailableBehavior', 'chatbox.position', 'chatbox.askForName', 'chatbox.askForFirstName', 'chatbox.askForLastName', 'chatbox.askForEmail', 'chatbox.askForCompany', 'chatbox.askForPhoneNumber', 'chatbox.enableTranscriptDownload', 'chatbox.askForRating', 'chatbox.expanded', 'chatbox.visible', 'chatbox.firstMessage']);\n\n    js_api_defineProperty(_assertThisInitialized(_this), \"supportedGet\", ['visitor.name', 'visitor.firstName', 'visitor.lastName', 'visitor.email', 'visitor.company', 'visitor.phoneNumber', 'visitor.question', 'chatbox.available', 'chatbox.unavailableBehavior', 'chatbox.position', 'chatbox.askForName', 'chatbox.askForFirstName', 'chatbox.askForLastName', 'chatbox.askForEmail', 'chatbox.askForCompany', 'chatbox.askForPhoneNumber', 'chatbox.expanded']);\n\n    window.addEventListener('message', function (e) {\n      if (!e || !e.data) return;\n\n      try {\n        var _JSON$parse = JSON.parse(e.data),\n            action = _JSON$parse.action,\n            _JSON$parse$payload = _JSON$parse.payload,\n            payload = _JSON$parse$payload === void 0 ? {} : _JSON$parse$payload;\n\n        if (!action) return;\n\n        _this.trigger(\"internal:\".concat(action), payload);\n      } catch (ex) {\n        /* Do Nothing */\n      }\n    });\n    return _this;\n  }\n\n  js_api_createClass(JavaScriptApi, [{\n    key: \"baseEventArgs\",\n    get: function get() {\n      return {};\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var allow = isInternal(event) || this.supportedTriggers.indexOf(event) > -1;\n      if (!allow) throw new Error(\"<\".concat(event, \"> is not a valid purechat trigger\"));\n      var externalEvent = event.replace(/internal:/g, '');\n\n      try {\n        return _get(_getPrototypeOf(JavaScriptApi.prototype), \"trigger\", this).call(this, externalEvent, js_api_objectSpread(js_api_objectSpread({}, this.baseEventArgs), data));\n      } catch (ex) {\n        return null;\n      }\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var allow = isInternal(event) || this.supportedEvents.indexOf(event) > -1;\n      if (!allow) throw new Error(\"<\".concat(event, \"> is not a valid purechat event\"));\n      var externalEvent = event.replace(/internal:/g, '');\n\n      try {\n        return _get(_getPrototypeOf(JavaScriptApi.prototype), \"on\", this).call(this, externalEvent, callback);\n      } catch (ex) {\n        return null;\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      var allow = this.supportedSet.indexOf(name) > -1;\n      if (!allow || !setter_mappings[name]) throw new Error(\"<\".concat(name, \"> is not a valid purechat set\"));\n      if (!this.store) throw new Error('Pure Chat JavaScript API has not been initialized properly');\n\n      try {\n        return setter_mappings[name](this.store, value);\n      } catch (ex) {\n        return null;\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var allow = this.supportedGet.indexOf(name) > -1;\n      if (!allow || !getter_mappings[name]) throw new Error(\"<\".concat(name, \"> is not a valid purechat get\"));\n      if (!this.store) throw new Error('Pure Chat JavaScript API has not been initialized properly');\n\n      try {\n        return getter_mappings[name](this.store);\n      } catch (ex) {\n        return null;\n      }\n    }\n  }, {\n    key: \"setStore\",\n    value: function setStore(store) {\n      this.store = store;\n    }\n  }]);\n\n  return JavaScriptApi;\n}(EventEmitter);\n\n\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/initializer/js_api/index.js\nfunction initializer_js_api_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction initializer_js_api_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction initializer_js_api_createClass(Constructor, protoProps, staticProps) { if (protoProps) initializer_js_api_defineProperties(Constructor.prototype, protoProps); if (staticProps) initializer_js_api_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction initializer_js_api_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n // This class acts as an interface to the actual JavaScriptApi class so that\n// the user doesn't see the full array of functions that are needed to make\n// the JavaScript API work.\n\nvar PublicApi = /*#__PURE__*/function () {\n  function PublicApi() {\n    initializer_js_api_classCallCheck(this, PublicApi);\n\n    initializer_js_api_defineProperty(this, \"api\", null);\n\n    // Make sure `this` is always correct in methods\n    this.on = this.on.bind(this);\n    this.off = this.off.bind(this);\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n    this.api = new JavaScriptApi();\n  }\n\n  initializer_js_api_createClass(PublicApi, [{\n    key: \"on\",\n    value: function on() {\n      var _this$api;\n\n      return (_this$api = this.api).on.apply(_this$api, arguments);\n    }\n  }, {\n    key: \"off\",\n    value: function off() {\n      var _this$api2;\n\n      return (_this$api2 = this.api).off.apply(_this$api2, arguments);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger() {\n      var _this$api3;\n\n      return (_this$api3 = this.api).trigger.apply(_this$api3, arguments);\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      var _this$api4;\n\n      return (_this$api4 = this.api).set.apply(_this$api4, arguments);\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this$api5;\n\n      return (_this$api5 = this.api).get.apply(_this$api5, arguments);\n    }\n  }]);\n\n  return PublicApi;\n}();\n\n\n;// CONCATENATED MODULE: ./node_modules/ramda/es/empty.js\n\n\n\n\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));      //=> Nothing()\n *      R.empty([1, 2, 3]);     //=> []\n *      R.empty('unicorns');    //=> ''\n *      R.empty({x: 1, y: 2});  //=> {}\n */\n\nvar empty =\n/*#__PURE__*/\n_curry1(function empty(x) {\n  return x != null && typeof x['fantasy-land/empty'] === 'function' ? x['fantasy-land/empty']() : x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function' ? x.constructor['fantasy-land/empty']() : x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : internal_isArguments(x) ? function () {\n    return arguments;\n  }() : void 0 // else\n  ;\n});\n\n/* harmony default export */ var es_empty = (empty);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/isEmpty.js\n\n\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);   //=> false\n *      R.isEmpty([]);          //=> true\n *      R.isEmpty('');          //=> true\n *      R.isEmpty(null);        //=> false\n *      R.isEmpty({});          //=> true\n *      R.isEmpty({length: 0}); //=> false\n */\n\nvar isEmpty =\n/*#__PURE__*/\n_curry1(function isEmpty(x) {\n  return x != null && es_equals(x, es_empty(x));\n});\n\n/* harmony default export */ var es_isEmpty = (isEmpty);\n;// CONCATENATED MODULE: ./node_modules/ramda/es/trim.js\n\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = typeof String.prototype.trim === 'function';\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\n\nvar trim = !hasProtoTrim ||\n/*#__PURE__*/\nws.trim() || !\n/*#__PURE__*/\nzeroWidth.trim() ?\n/*#__PURE__*/\n_curry1(function trim(str) {\n  var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n  var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n  return str.replace(beginRx, '').replace(endRx, '');\n}) :\n/*#__PURE__*/\n_curry1(function trim(str) {\n  return str.trim();\n});\n/* harmony default export */ var es_trim = (trim);\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/lib/html.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\nvar FIVE_REMS = 80;\nvar BASE_STYLE_ID = 'purechat-stylesheet';\n\nvar getStyleId = function getStyleId() {\n  var suffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return suffix.length > 0 ? \"\".concat(BASE_STYLE_ID, \"_\").concat(suffix) : BASE_STYLE_ID;\n};\n\nvar addStylesheet = function addStylesheet(win, styles) {\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var style = win.document.createElement('style');\n  style.id = getStyleId(name);\n  style.type = 'text/css';\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = styles;\n  } else {\n    style.appendChild(win.document.createTextNode(styles));\n  }\n\n  win.document.head.appendChild(style);\n};\nvar objectToClasses = function objectToClasses(obj) {\n  return Object.keys(obj).reduce(function (prev, key) {\n    return obj[key] ? [].concat(_toConsumableArray(prev), [key]) : prev;\n  }, []).join(' ');\n};\nvar joinClasses = pipe(es_reject(es_isEmpty), es_join(' '), es_trim);\nvar preloadImg = function preloadImg(imgUrl) {\n  return new Promise(function (resolve, reject) {\n    if (!imgUrl) return resolve();\n    var img = new Image();\n\n    img.onload = function () {\n      return resolve();\n    };\n\n    img.onerror = function () {\n      return reject();\n    };\n\n    img.src = imgUrl;\n    return img;\n  });\n};\nvar hasClass = function hasClass(el, className) {\n  return el.classList ? el.classList.contains(className) : !!el.className.match(new RegExp(\"(\\\\s|^)\".concat(className, \"(\\\\s|$)\")));\n};\nvar addClass = function addClass(el, className) {\n  if (el.classList) {\n    el.classList.add(className);\n  } else if (!hasClass(el, className)) {\n    el.className += \" \".concat(className); // eslint-disable-line no-param-reassign\n  }\n};\nvar removeClass = function removeClass(el, className) {\n  if (el.classList) {\n    el.classList.remove(className);\n  } else if (!hasClass(el, className)) {\n    var reg = new RegExp(\"(\\\\s|^)\".concat(className, \"(\\\\s|$)\"));\n    el.className = el.className.replace(reg, ' '); // eslint-disable-line no-param-reassign\n  }\n}; // These add/remove methods are necessary due to the way the iframes are constructed\n// for the widget, the global events don't get attached correctly to the iframe  itself.\n// So this is somewhat of a work around in order attach global events that happen\n// everywhere. Make sure if you use the `add`, use the `remove` as well.\n\nvar addGlobalEventHandler = function addGlobalEventHandler(eventName, handler, options) {\n  var win = window.parent || window;\n  var messengerIframe = win.document.querySelector('.purechat-messenger-frame');\n  win.addEventListener(eventName, handler, options);\n  if (messengerIframe && messengerIframe.contentWindow) messengerIframe.contentWindow.addEventListener(eventName, handler, options);\n};\nvar removeGlobalEventHandler = function removeGlobalEventHandler(eventName, handler, options) {\n  var win = window.parent || window;\n  var messengerIframe = win.document.querySelector('.purechat-messenger-frame');\n  win.removeEventListener(eventName, handler, options);\n  if (messengerIframe && messengerIframe.contentWindow) messengerIframe.contentWindow.removeEventListener(eventName, handler, options);\n};\nvar getWindowSize = function getWindowSize() {\n  var w = 0;\n  var h = 0;\n  var win = window.parent || window; // IE\n\n  if (!win.innerWidth) {\n    if (win.document.documentElement.clientWidth !== 0) {\n      // strict mode\n      w = win.document.documentElement.clientWidth;\n      h = win.document.documentElement.clientHeight;\n    } else {\n      // quirks mode\n      w = win.document.body.clientWidth;\n      h = win.document.body.clientHeight;\n    }\n  } else {\n    // w3c\n    w = win.innerWidth;\n    h = win.innerHeight;\n  }\n\n  return {\n    width: w,\n    height: h\n  };\n};\nvar getAvailableHostedHeight = function getAvailableHostedHeight() {\n  var doc = (window.parent || window).document;\n  var title = doc.querySelector('.purechat-title') || {};\n  var intro = doc.querySelector('.purechat-intro') || {};\n  var headerHeight = (title.offsetHeight || 0) + (intro.offsetHeight || 0);\n\n  var _getWindowSize = getWindowSize(),\n      windowHeight = _getWindowSize.height; // The 5rems is to account for margin that's not included in the height calculations\n\n\n  return windowHeight - headerHeight - FIVE_REMS;\n};\n// EXTERNAL MODULE: ./src/Content/modern_widget/base/style.styl\nvar style = __webpack_require__(56433);\n;// CONCATENATED MODULE: ./src/Scripts/widgets/modern/initializer/main.js\nfunction main_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction main_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction main_createClass(Constructor, protoProps, staticProps) { if (protoProps) main_defineProperties(Constructor.prototype, protoProps); if (staticProps) main_defineProperties(Constructor, staticProps); return Constructor; }\n\n/* global VERSION_NUM */\n\n\n\n\n\n\n\nvar WidgetInitializer = /*#__PURE__*/function () {\n  function WidgetInitializer() {\n    main_classCallCheck(this, WidgetInitializer);\n  }\n\n  main_createClass(WidgetInitializer, [{\n    key: \"start\",\n    value: function start() {\n      var initialSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n      addStylesheet(window, style/* default.toString */.Z.toString());\n      this.initializeJavaScriptApi();\n      this.createFrame(initialSettings);\n      return callback(this);\n    }\n  }, {\n    key: \"launcherScriptUrl\",\n    get: function get() {\n      return \"\".concat((config_production_default()).cdnUrl, \"/assets/modern_launcher.\").concat(13610, \".js\");\n    }\n  }, {\n    key: \"initializeJavaScriptApi\",\n    value: function initializeJavaScriptApi() {\n      var _ref = window.purechatApi || {\n        l: [],\n        t: []\n      },\n          _ref$l = _ref.l,\n          initialEvents = _ref$l === void 0 ? [] : _ref$l,\n          _ref$t = _ref.t,\n          initialTriggers = _ref$t === void 0 ? [] : _ref$t;\n\n      window.purechatApi = new PublicApi(); // eslint-disable-next-line prefer-spread\n\n      initialEvents.forEach(function (event) {\n        return window.purechatApi.on.apply(window.purechatApi, event);\n      }); // eslint-disable-next-line prefer-spread\n\n      initialTriggers.forEach(function (trigger) {\n        return window.purechatApi.trigger.apply(window.purechatApi, trigger);\n      });\n    }\n  }, {\n    key: \"createFrame\",\n    value: function createFrame(settings) {\n      var metaReferrer = document.querySelector('meta[name=\"referrer\"]');\n      var frameReferrer = metaReferrer ? \"<meta name=\\\"referrer\\\" content=\\\"\".concat(metaReferrer.content, \"\\\">\") : '';\n      var iframe = document.createElement('iframe');\n      iframe.id = 'purechat-frame';\n      iframe.style.display = 'none';\n\n      if (settings.renderInto && settings.renderInto !== 'body') {\n        var parent = document.querySelector(settings.renderInto);\n\n        if (parent) {\n          parent.appendChild(iframe);\n        } else {\n          document.body.appendChild(iframe);\n        }\n      } else {\n        document.body.appendChild(iframe);\n      }\n\n      iframe.contentWindow.document.open('text/html', 'replace');\n      iframe.contentWindow.document.write(\"\\n            <!doctype html>\\n            <html>\\n                <head>\".concat(frameReferrer, \"</head>\\n                <body></body>\\n            </html>\\n        \"));\n      iframe.contentWindow.document.close();\n      var settingsScript = this.createSettingsScriptTag(settings);\n      var frameScript = this.createFrameScriptTag();\n      iframe.contentWindow.document.head.appendChild(settingsScript);\n      iframe.contentWindow.document.head.appendChild(frameScript);\n      if (window.purechatApi) iframe.contentWindow.purechatApi = window.purechatApi;\n      iframe.contentWindow.purechatLocalStorage = window.localStorage;\n      iframe.contentWindow.purechatSessionStorage = window.sessionStorage;\n      var poppedOutSettings = this.createPoppedOutSettings();\n\n      if (poppedOutSettings) {\n        if (poppedOutSettings.userId) window.localStorage.setItem('purechat_userId', poppedOutSettings.userId);\n        if (poppedOutSettings.chatId) window.localStorage.setItem('purechat_chatId', poppedOutSettings.chatId);\n        if (poppedOutSettings.authToken) window.localStorage.setItem('purechat_authToken', poppedOutSettings.authToken);\n        if (poppedOutSettings.roomId) window.localStorage.setItem('purechat_roomId', poppedOutSettings.roomId);\n        if (poppedOutSettings.roomType) window.localStorage.setItem('purechat_roomType', poppedOutSettings.roomType);\n\n        if (poppedOutSettings.contactId) {\n          window.localStorage.setItem('i', poppedOutSettings.contactId);\n          var isInChat = !es_isNil(poppedOutSettings.chatId) && poppedOutSettings.chatId.toString().length > 0;\n          window.localStorage.setItem('purechat_lead_capture_expanded', !isInChat);\n        }\n      }\n\n      return iframe;\n    }\n  }, {\n    key: \"createSettingsScriptTag\",\n    value: function createSettingsScriptTag(settings) {\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.charset = 'utf-8';\n      script.setAttribute('data-cfasync', false);\n      script.text = \"window.purechatSettings = \".concat(JSON.stringify(settings), \";\");\n      return script;\n    }\n  }, {\n    key: \"createFrameScriptTag\",\n    value: function createFrameScriptTag() {\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.charset = 'utf-8';\n      script.setAttribute('data-cfasync', false);\n      script.src = \"\".concat((config_production_default()).cdnUrl, \"/assets/modern_app.\").concat(13610, \".js\");\n      return script;\n    }\n  }, {\n    key: \"createPoppedOutSettings\",\n    value: function createPoppedOutSettings() {\n      var params = queryStringToObject();\n      return window.location.hostname.indexOf('purechat.com') > -1 ? {\n        userId: params.userId,\n        authToken: params.authToken,\n        chatId: params.chatId,\n        roomId: params.roomId,\n        roomType: params.roomType,\n        contactId: params.contactId\n      } : null;\n    }\n  }]);\n\n  return WidgetInitializer;\n}(); // Puts the instance on the window so that the loader can be notified when\n// everything full loads.\n\n\nvar initializer = new WidgetInitializer(); // eslint-disable-next-line no-underscore-dangle\n\nwindow._pcWidgetInitializer = initializer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQ4NDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2lzUGxhY2Vob2xkZXIuanM/OWViZCIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2N1cnJ5MS5qcz80YWEyIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pc05pbC5qcz81MjlhIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL3NyYy9TY3JpcHRzL3dpZGdldHMvc2hhcmVkL3VybC5qcz83NjBlIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL3NyYy9TY3JpcHRzL3dpZGdldHMvbW9kZXJuL2xpYi9ldmVudF9lbWl0dGVyLmpzPzcxNWIiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19hcml0eS5qcz8yNTUwIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fcGlwZS5qcz80N2M2Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fY3VycnkyLmpzPzJmYzgiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19jdXJyeTMuanM/ZDczZiIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2lzQXJyYXkuanM/ZmNmYiIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2lzU3RyaW5nLmpzPzI0OGUiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19pc0FycmF5TGlrZS5qcz9hOGU0Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9feHdyYXAuanM/ZGVhMSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvYmluZC5qcz81ZGI3Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fcmVkdWNlLmpzPzM4NDMiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL3JlZHVjZS5qcz82MzIzIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QuanM/N2NjNiIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvc2xpY2UuanM/NjkzNSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvdGFpbC5qcz80OWYzIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9waXBlLmpzPzg2OGYiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19pc0Z1bmN0aW9uLmpzP2YwZGMiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19jdXJyeU4uanM/NTUxYSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvY3VycnlOLmpzPzYxMWUiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19hcnJheUZyb21JdGVyYXRvci5qcz9mNjRiIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faW5jbHVkZXNXaXRoLmpzPzVjYTMiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19mdW5jdGlvbk5hbWUuanM/YWE4ZiIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2hhcy5qcz9jMzI1Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fb2JqZWN0SXMuanM/YmRiMCIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2lzQXJndW1lbnRzLmpzPzczN2MiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2tleXMuanM/NjZlMSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvdHlwZS5qcz85ZTY1Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fZXF1YWxzLmpzPzc5NTgiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2VxdWFscy5qcz83NjIwIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faW5kZXhPZi5qcz9iOWEzIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faW5jbHVkZXMuanM/YjRkMSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX21hcC5qcz80NWU5Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9fcXVvdGUuanM/MGY2NCIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX3RvSVNPU3RyaW5nLmpzPzg0MmIiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19jb21wbGVtZW50LmpzPzMzNTMiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19pc1RyYW5zZm9ybWVyLmpzPzlkNTgiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19kaXNwYXRjaGFibGUuanM/ODEyNyIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX2ZpbHRlci5qcz9kM2NiIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9faXNPYmplY3QuanM/NmE1ZSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvaW50ZXJuYWwvX3hmQmFzZS5qcz82NGM4Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnRlcm5hbC9feGZpbHRlci5qcz8xYzczIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9maWx0ZXIuanM/MjhjOSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvcmVqZWN0LmpzP2U5YzgiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL190b1N0cmluZy5qcz8wY2M0Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy90b1N0cmluZy5qcz85MzFmIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pbnZva2VyLmpzP2U0NWMiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2pvaW4uanM/ZmZmMSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9zcmMvU2NyaXB0cy93aWRnZXRzL21vZGVybi9hcHAvY29uc3RhbnRzL2luZGV4LmpzP2JmZDkiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vc3JjL1NjcmlwdHMvd2lkZ2V0cy9tb2Rlcm4vaW5pdGlhbGl6ZXIvanNfYXBpL3NldHRlcl9tYXBwaW5ncy5qcz8wYTBiIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9jdXJyeS5qcz9lMTE0Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9zcGxpdC5qcz80ZDVkIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9mbGlwLmpzP2JmM2IiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL2ludGVybmFsL19pc0ludGVnZXIuanM/NTUxZSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmFtZGEvZXMvbnRoLmpzPzYxMGIiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL3BhdGhzLmpzPzlmMzgiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL3BhdGguanM/MjM2MSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9zcmMvU2NyaXB0cy93aWRnZXRzL21vZGVybi9pbml0aWFsaXplci9qc19hcGkvZ2V0dGVyX21hcHBpbmdzLmpzPzcyYzkiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vc3JjL1NjcmlwdHMvd2lkZ2V0cy9tb2Rlcm4vaW5pdGlhbGl6ZXIvanNfYXBpL2pzX2FwaS5qcz9jNWNkIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL3NyYy9TY3JpcHRzL3dpZGdldHMvbW9kZXJuL2luaXRpYWxpemVyL2pzX2FwaS9pbmRleC5qcz8wNzc1Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9lbXB0eS5qcz9iYjczIiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yYW1kYS9lcy9pc0VtcHR5LmpzPzRhYTYiLCJ3ZWJwYWNrOi8vcHVyZWNoYXQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JhbWRhL2VzL3RyaW0uanM/MmYwOSIsIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9zcmMvU2NyaXB0cy93aWRnZXRzL21vZGVybi9saWIvaHRtbC5qcz9mZDY1Iiwid2VicGFjazovL3B1cmVjaGF0LWRhc2hib2FyZC8uL3NyYy9TY3JpcHRzL3dpZGdldHMvbW9kZXJuL2luaXRpYWxpemVyL21haW4uanM/OGMxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXNQbGFjZWhvbGRlcihhKSB7XG4gIHJldHVybiBhICE9IG51bGwgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnICYmIGFbJ0BAZnVuY3Rpb25hbC9wbGFjZWhvbGRlciddID09PSB0cnVlO1xufSIsImltcG9ydCBfaXNQbGFjZWhvbGRlciBmcm9tIFwiLi9faXNQbGFjZWhvbGRlci5qc1wiO1xuLyoqXG4gKiBPcHRpbWl6ZWQgaW50ZXJuYWwgb25lLWFyaXR5IGN1cnJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3VycnkxKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmMShhKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgX2lzUGxhY2Vob2xkZXIoYSkpIHtcbiAgICAgIHJldHVybiBmMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufSIsImltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBpbnB1dCB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuOS4wXG4gKiBAY2F0ZWdvcnkgVHlwZVxuICogQHNpZyAqIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0geCBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgeGAgaXMgYHVuZGVmaW5lZGAgb3IgYG51bGxgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLmlzTmlsKG51bGwpOyAvLz0+IHRydWVcbiAqICAgICAgUi5pc05pbCh1bmRlZmluZWQpOyAvLz0+IHRydWVcbiAqICAgICAgUi5pc05pbCgwKTsgLy89PiBmYWxzZVxuICogICAgICBSLmlzTmlsKFtdKTsgLy89PiBmYWxzZVxuICovXG5cbnZhciBpc05pbCA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIGlzTmlsKHgpIHtcbiAgcmV0dXJuIHggPT0gbnVsbDtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBpc05pbDsiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5U3RyaW5nVG9PYmplY3Qoc3RyKSB7XG4gIHJldHVybiAoc3RyIHx8IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLnJlcGxhY2UoLyheXFw/KS8sICcnKS5zcGxpdCgnJicpLm1hcChmdW5jdGlvbiAobikge1xuICAgIHJldHVybiBuLnNwbGl0KCc9Jyk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAocGFpcikge1xuICAgIHJldHVybiAhIXBhaXJbMF07XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAob2JqLCBwYWlyKSB7XG4gICAgdmFyIHZhbHVlID0gcGFpclsxXTtcbiAgICB2YXIgbnVtID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gJyc7XG4gICAgaWYgKHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJykgdmFsdWUgPSB0cnVlO2Vsc2UgaWYgKHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScpIHZhbHVlID0gZmFsc2U7IC8vIERpc2FibGUgYmVsb3cgaXMgYmVjYXVzZSBvZiBJRSBhbmQgaXQgbm90IGxpa2luZyBgTnVtYmVyLmlzTmFOYCwgZnV1dXV1dWNjY2Nra2tra1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBlbHNlIGlmICgvXlswLTldJC9naS50ZXN0KHZhbHVlKSAmJiAhaXNOYU4obnVtKSkge1xuICAgICAgICB2YWx1ZSA9IG51bSAlIDEgPT09IDAgPyBwYXJzZUludCh2YWx1ZSwgMTApIDogbnVtO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgICB9XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgcGFpclswXSwgdmFsdWUpKTtcbiAgfSwge30pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdFRvUXVlcnlTdHJpbmcob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIFtrZXksIG9ialtrZXldID09PSB1bmRlZmluZWQgfHwgb2JqW2tleV0gPT09IG51bGwgPyAnJyA6IG9ialtrZXldXS5qb2luKCc9Jyk7XG4gIH0pLmpvaW4oJyYnKTtcbn0iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIEV2ZW50RW1pdHRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRFbWl0dGVyKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV2ZW50c1wiLCB7fSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRXZlbnRFbWl0dGVyLCBbe1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmIChfdHlwZW9mKHRoaXMuZXZlbnRzW2V2ZW50XSkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub2ZmKGV2ZW50LCBsaXN0ZW5lcik7XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZmZcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgaWYgKF90eXBlb2YodGhpcy5ldmVudHNbZXZlbnRdKSAhPT0gJ29iamVjdCcpIHJldHVybjtcbiAgICAgIHZhciBpZHggPSB0aGlzLmV2ZW50c1tldmVudF0uaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBpZiAoaWR4ID4gLTEpIHRoaXMuZXZlbnRzW2V2ZW50XS5zcGxpY2UoaWR4LCAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidHJpZ2dlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmlnZ2VyKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90eXBlb2YodGhpcy5ldmVudHNbZXZlbnRdKSAhPT0gJ29iamVjdCcpIHJldHVybjtcbiAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkoX3RoaXMyLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbmNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uY2UoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHJlbW92ZSA9IHRoaXMub24oZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlKCk7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuZXIuYXBwbHkoX3RoaXMzLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFdmVudEVtaXR0ZXI7XG59KCk7XG5cbmV4cG9ydCB7IEV2ZW50RW1pdHRlciBhcyBkZWZhdWx0IH07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FyaXR5KG4sIGZuKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYTApIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyKSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuXG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcsIGE4KSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNywgYTgsIGE5KSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IHRvIF9hcml0eSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIgbm8gZ3JlYXRlciB0aGFuIHRlbicpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3BpcGUoZiwgZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnLmNhbGwodGhpcywgZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn0iLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2lzUGxhY2Vob2xkZXIgZnJvbSBcIi4vX2lzUGxhY2Vob2xkZXIuanNcIjtcbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIHR3by1hcml0eSBjdXJyeSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIGN1cnJpZWQgZnVuY3Rpb24uXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2N1cnJ5Mihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gZjIoYSwgYikge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gZjI7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIF9pc1BsYWNlaG9sZGVyKGEpID8gZjIgOiBfY3VycnkxKGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgIHJldHVybiBmbihhLCBfYik7XG4gICAgICAgIH0pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBmMiA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICByZXR1cm4gZm4oX2EsIGIpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgX2IpO1xuICAgICAgICB9KSA6IGZuKGEsIGIpO1xuICAgIH1cbiAgfTtcbn0iLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2lzUGxhY2Vob2xkZXIgZnJvbSBcIi4vX2lzUGxhY2Vob2xkZXIuanNcIjtcbi8qKlxuICogT3B0aW1pemVkIGludGVybmFsIHRocmVlLWFyaXR5IGN1cnJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3VycnkzKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmMyhhLCBiLCBjKSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBmMztcblxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgPyBmMyA6IF9jdXJyeTIoZnVuY3Rpb24gKF9iLCBfYykge1xuICAgICAgICAgIHJldHVybiBmbihhLCBfYiwgX2MpO1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgPyBmMyA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MihmdW5jdGlvbiAoX2EsIF9jKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKF9hLCBiLCBfYyk7XG4gICAgICAgIH0pIDogX2lzUGxhY2Vob2xkZXIoYikgPyBfY3VycnkyKGZ1bmN0aW9uIChfYiwgX2MpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgX2IsIF9jKTtcbiAgICAgICAgfSkgOiBfY3VycnkxKGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgIHJldHVybiBmbihhLCBiLCBfYyk7XG4gICAgICAgIH0pO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYikgJiYgX2lzUGxhY2Vob2xkZXIoYykgPyBmMyA6IF9pc1BsYWNlaG9sZGVyKGEpICYmIF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MihmdW5jdGlvbiAoX2EsIF9iKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKF9hLCBfYiwgYyk7XG4gICAgICAgIH0pIDogX2lzUGxhY2Vob2xkZXIoYSkgJiYgX2lzUGxhY2Vob2xkZXIoYykgPyBfY3VycnkyKGZ1bmN0aW9uIChfYSwgX2MpIHtcbiAgICAgICAgICByZXR1cm4gZm4oX2EsIGIsIF9jKTtcbiAgICAgICAgfSkgOiBfaXNQbGFjZWhvbGRlcihiKSAmJiBfaXNQbGFjZWhvbGRlcihjKSA/IF9jdXJyeTIoZnVuY3Rpb24gKF9iLCBfYykge1xuICAgICAgICAgIHJldHVybiBmbihhLCBfYiwgX2MpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGEpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICByZXR1cm4gZm4oX2EsIGIsIGMpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGIpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgX2IsIGMpO1xuICAgICAgICB9KSA6IF9pc1BsYWNlaG9sZGVyKGMpID8gX2N1cnJ5MShmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICByZXR1cm4gZm4oYSwgYiwgX2MpO1xuICAgICAgICB9KSA6IGZuKGEsIGIsIGMpO1xuICAgIH1cbiAgfTtcbn0iLCIvKipcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IGFuIG9iamVjdCBpcyBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWwgVGhlIG9iamVjdCB0byB0ZXN0LlxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGB2YWxgIGlzIGFuIGFycmF5LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBfaXNBcnJheShbXSk7IC8vPT4gdHJ1ZVxuICogICAgICBfaXNBcnJheShudWxsKTsgLy89PiBmYWxzZVxuICogICAgICBfaXNBcnJheSh7fSk7IC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBfaXNBcnJheSh2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPSBudWxsICYmIHZhbC5sZW5ndGggPj0gMCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzU3RyaW5nKHgpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG59IiwiaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vX2N1cnJ5MS5qc1wiO1xuaW1wb3J0IF9pc0FycmF5IGZyb20gXCIuL19pc0FycmF5LmpzXCI7XG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gXCIuL19pc1N0cmluZy5qc1wiO1xuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCBhbiBvYmplY3QgaXMgc2ltaWxhciB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IFR5cGVcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnICogLT4gQm9vbGVhblxuICogQHBhcmFtIHsqfSB4IFRoZSBvYmplY3QgdG8gdGVzdC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiBgeGAgaGFzIGEgbnVtZXJpYyBsZW5ndGggcHJvcGVydHkgYW5kIGV4dHJlbWUgaW5kaWNlcyBkZWZpbmVkOyBgZmFsc2VgIG90aGVyd2lzZS5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBfaXNBcnJheUxpa2UoW10pOyAvLz0+IHRydWVcbiAqICAgICAgX2lzQXJyYXlMaWtlKHRydWUpOyAvLz0+IGZhbHNlXG4gKiAgICAgIF9pc0FycmF5TGlrZSh7fSk7IC8vPT4gZmFsc2VcbiAqICAgICAgX2lzQXJyYXlMaWtlKHtsZW5ndGg6IDEwfSk7IC8vPT4gZmFsc2VcbiAqICAgICAgX2lzQXJyYXlMaWtlKHswOiAnemVybycsIDk6ICduaW5lJywgbGVuZ3RoOiAxMH0pOyAvLz0+IHRydWVcbiAqL1xuXG52YXIgX2lzQXJyYXlMaWtlID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gaXNBcnJheUxpa2UoeCkge1xuICBpZiAoX2lzQXJyYXkoeCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICgheCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoX2lzU3RyaW5nKHgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHgubm9kZVR5cGUgPT09IDEpIHtcbiAgICByZXR1cm4gISF4Lmxlbmd0aDtcbiAgfVxuXG4gIGlmICh4Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHgubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB4Lmhhc093blByb3BlcnR5KDApICYmIHguaGFzT3duUHJvcGVydHkoeC5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBfaXNBcnJheUxpa2U7IiwidmFyIFhXcmFwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gWFdyYXAoZm4pIHtcbiAgICB0aGlzLmYgPSBmbjtcbiAgfVxuXG4gIFhXcmFwLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL2luaXQnXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2luaXQgbm90IGltcGxlbWVudGVkIG9uIFhXcmFwJyk7XG4gIH07XG5cbiAgWFdyYXAucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvcmVzdWx0J10gPSBmdW5jdGlvbiAoYWNjKSB7XG4gICAgcmV0dXJuIGFjYztcbiAgfTtcblxuICBYV3JhcC5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgcmV0dXJuIHRoaXMuZihhY2MsIHgpO1xuICB9O1xuXG4gIHJldHVybiBYV3JhcDtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3h3cmFwKGZuKSB7XG4gIHJldHVybiBuZXcgWFdyYXAoZm4pO1xufSIsImltcG9ydCBfYXJpdHkgZnJvbSBcIi4vaW50ZXJuYWwvX2FyaXR5LmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIGJvdW5kIHRvIGEgY29udGV4dC5cbiAqIE5vdGU6IGBSLmJpbmRgIGRvZXMgbm90IHByb3ZpZGUgdGhlIGFkZGl0aW9uYWwgYXJndW1lbnQtYmluZGluZyBjYXBhYmlsaXRpZXMgb2ZcbiAqIFtGdW5jdGlvbi5wcm90b3R5cGUuYmluZF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRnVuY3Rpb24vYmluZCkuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuNi4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBzaWcgKCogLT4gKikgLT4geyp9IC0+ICgqIC0+ICopXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gYmluZCB0byBjb250ZXh0XG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc09iaiBUaGUgY29udGV4dCB0byBiaW5kIGBmbmAgdG9cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBleGVjdXRlIGluIHRoZSBjb250ZXh0IG9mIGB0aGlzT2JqYC5cbiAqIEBzZWUgUi5wYXJ0aWFsXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgbG9nID0gUi5iaW5kKGNvbnNvbGUubG9nLCBjb25zb2xlKTtcbiAqICAgICAgUi5waXBlKFIuYXNzb2MoJ2EnLCAyKSwgUi50YXAobG9nKSwgUi5hc3NvYygnYScsIDMpKSh7YTogMX0pOyAvLz0+IHthOiAzfVxuICogICAgICAvLyBsb2dzIHthOiAyfVxuICogQHN5bWIgUi5iaW5kKGYsIG8pKGEsIGIpID0gZi5jYWxsKG8sIGEsIGIpXG4gKi9cblxudmFyIGJpbmQgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBiaW5kKGZuLCB0aGlzT2JqKSB7XG4gIHJldHVybiBfYXJpdHkoZm4ubGVuZ3RoLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNPYmosIGFyZ3VtZW50cyk7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGJpbmQ7IiwiaW1wb3J0IF9pc0FycmF5TGlrZSBmcm9tIFwiLi9faXNBcnJheUxpa2UuanNcIjtcbmltcG9ydCBfeHdyYXAgZnJvbSBcIi4vX3h3cmFwLmpzXCI7XG5pbXBvcnQgYmluZCBmcm9tIFwiLi4vYmluZC5qc1wiO1xuXG5mdW5jdGlvbiBfYXJyYXlSZWR1Y2UoeGYsIGFjYywgbGlzdCkge1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICBhY2MgPSB4ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShhY2MsIGxpc3RbaWR4XSk7XG5cbiAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgYWNjID0gYWNjWydAQHRyYW5zZHVjZXIvdmFsdWUnXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHhmWydAQHRyYW5zZHVjZXIvcmVzdWx0J10oYWNjKTtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlUmVkdWNlKHhmLCBhY2MsIGl0ZXIpIHtcbiAgdmFyIHN0ZXAgPSBpdGVyLm5leHQoKTtcblxuICB3aGlsZSAoIXN0ZXAuZG9uZSkge1xuICAgIGFjYyA9IHhmWydAQHRyYW5zZHVjZXIvc3RlcCddKGFjYywgc3RlcC52YWx1ZSk7XG5cbiAgICBpZiAoYWNjICYmIGFjY1snQEB0cmFuc2R1Y2VyL3JlZHVjZWQnXSkge1xuICAgICAgYWNjID0gYWNjWydAQHRyYW5zZHVjZXIvdmFsdWUnXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN0ZXAgPSBpdGVyLm5leHQoKTtcbiAgfVxuXG4gIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKGFjYyk7XG59XG5cbmZ1bmN0aW9uIF9tZXRob2RSZWR1Y2UoeGYsIGFjYywgb2JqLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiB4ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKG9ialttZXRob2ROYW1lXShiaW5kKHhmWydAQHRyYW5zZHVjZXIvc3RlcCddLCB4ZiksIGFjYykpO1xufVxuXG52YXIgc3ltSXRlcmF0b3IgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9yZWR1Y2UoZm4sIGFjYywgbGlzdCkge1xuICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZm4gPSBfeHdyYXAoZm4pO1xuICB9XG5cbiAgaWYgKF9pc0FycmF5TGlrZShsaXN0KSkge1xuICAgIHJldHVybiBfYXJyYXlSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGxpc3RbJ2ZhbnRhc3ktbGFuZC9yZWR1Y2UnXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfbWV0aG9kUmVkdWNlKGZuLCBhY2MsIGxpc3QsICdmYW50YXN5LWxhbmQvcmVkdWNlJyk7XG4gIH1cblxuICBpZiAobGlzdFtzeW1JdGVyYXRvcl0gIT0gbnVsbCkge1xuICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdFtzeW1JdGVyYXRvcl0oKSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGxpc3QubmV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfaXRlcmFibGVSZWR1Y2UoZm4sIGFjYywgbGlzdCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGxpc3QucmVkdWNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIF9tZXRob2RSZWR1Y2UoZm4sIGFjYywgbGlzdCwgJ3JlZHVjZScpO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVkdWNlOiBsaXN0IG11c3QgYmUgYXJyYXkgb3IgaXRlcmFibGUnKTtcbn0iLCJpbXBvcnQgX2N1cnJ5MyBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkzLmpzXCI7XG5pbXBvcnQgX3JlZHVjZSBmcm9tIFwiLi9pbnRlcm5hbC9fcmVkdWNlLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBzaW5nbGUgaXRlbSBieSBpdGVyYXRpbmcgdGhyb3VnaCB0aGUgbGlzdCwgc3VjY2Vzc2l2ZWx5IGNhbGxpbmdcbiAqIHRoZSBpdGVyYXRvciBmdW5jdGlvbiBhbmQgcGFzc2luZyBpdCBhbiBhY2N1bXVsYXRvciB2YWx1ZSBhbmQgdGhlIGN1cnJlbnRcbiAqIHZhbHVlIGZyb20gdGhlIGFycmF5LCBhbmQgdGhlbiBwYXNzaW5nIHRoZSByZXN1bHQgdG8gdGhlIG5leHQgY2FsbC5cbiAqXG4gKiBUaGUgaXRlcmF0b3IgZnVuY3Rpb24gcmVjZWl2ZXMgdHdvIHZhbHVlczogKihhY2MsIHZhbHVlKSouIEl0IG1heSB1c2VcbiAqIFtgUi5yZWR1Y2VkYF0oI3JlZHVjZWQpIHRvIHNob3J0Y3V0IHRoZSBpdGVyYXRpb24uXG4gKlxuICogVGhlIGFyZ3VtZW50cycgb3JkZXIgb2YgW2ByZWR1Y2VSaWdodGBdKCNyZWR1Y2VSaWdodCkncyBpdGVyYXRvciBmdW5jdGlvblxuICogaXMgKih2YWx1ZSwgYWNjKSouXG4gKlxuICogTm90ZTogYFIucmVkdWNlYCBkb2VzIG5vdCBza2lwIGRlbGV0ZWQgb3IgdW5hc3NpZ25lZCBpbmRpY2VzIChzcGFyc2VcbiAqIGFycmF5cyksIHVubGlrZSB0aGUgbmF0aXZlIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2QuIEZvciBtb3JlIGRldGFpbHNcbiAqIG9uIHRoaXMgYmVoYXZpb3IsIHNlZTpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZSNEZXNjcmlwdGlvblxuICpcbiAqIERpc3BhdGNoZXMgdG8gdGhlIGByZWR1Y2VgIG1ldGhvZCBvZiB0aGUgdGhpcmQgYXJndW1lbnQsIGlmIHByZXNlbnQuIFdoZW5cbiAqIGRvaW5nIHNvLCBpdCBpcyB1cCB0byB0aGUgdXNlciB0byBoYW5kbGUgdGhlIFtgUi5yZWR1Y2VkYF0oI3JlZHVjZWQpXG4gKiBzaG9ydGN1dGluZywgYXMgdGhpcyBpcyBub3QgaW1wbGVtZW50ZWQgYnkgYHJlZHVjZWAuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyAoKGEsIGIpIC0+IGEpIC0+IGEgLT4gW2JdIC0+IGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBpdGVyYXRvciBmdW5jdGlvbi4gUmVjZWl2ZXMgdHdvIHZhbHVlcywgdGhlIGFjY3VtdWxhdG9yIGFuZCB0aGVcbiAqICAgICAgICBjdXJyZW50IGVsZW1lbnQgZnJvbSB0aGUgYXJyYXkuXG4gKiBAcGFyYW0geyp9IGFjYyBUaGUgYWNjdW11bGF0b3IgdmFsdWUuXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFRoZSBsaXN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEByZXR1cm4geyp9IFRoZSBmaW5hbCwgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAc2VlIFIucmVkdWNlZCwgUi5hZGRJbmRleCwgUi5yZWR1Y2VSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIucmVkdWNlKFIuc3VidHJhY3QsIDAsIFsxLCAyLCAzLCA0XSkgLy8gPT4gKCgoKDAgLSAxKSAtIDIpIC0gMykgLSA0KSA9IC0xMFxuICogICAgICAvLyAgICAgICAgICAtICAgICAgICAgICAgICAgLTEwXG4gKiAgICAgIC8vICAgICAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAvLyAgICAgICAgLSAgIDQgICAgICAgICAgIC02ICAgNFxuICogICAgICAvLyAgICAgICAvIFxcICAgICAgICAgICAgICAvIFxcXG4gKiAgICAgIC8vICAgICAgLSAgIDMgICA9PT4gICAgIC0zICAgM1xuICogICAgICAvLyAgICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAvLyAgICAtICAgMiAgICAgICAgICAgLTEgICAyXG4gKiAgICAgIC8vICAgLyBcXCAgICAgICAgICAgICAgLyBcXFxuICogICAgICAvLyAgMCAgIDEgICAgICAgICAgICAwICAgMVxuICpcbiAqIEBzeW1iIFIucmVkdWNlKGYsIGEsIFtiLCBjLCBkXSkgPSBmKGYoZihhLCBiKSwgYyksIGQpXG4gKi9cblxudmFyIHJlZHVjZSA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkzKF9yZWR1Y2UpO1xuXG5leHBvcnQgZGVmYXVsdCByZWR1Y2U7IiwiaW1wb3J0IF9pc0FycmF5IGZyb20gXCIuL19pc0FycmF5LmpzXCI7XG4vKipcbiAqIFRoaXMgY2hlY2tzIHdoZXRoZXIgYSBmdW5jdGlvbiBoYXMgYSBbbWV0aG9kbmFtZV0gZnVuY3Rpb24uIElmIGl0IGlzbid0IGFuXG4gKiBhcnJheSBpdCB3aWxsIGV4ZWN1dGUgdGhhdCBmdW5jdGlvbiBvdGhlcndpc2UgaXQgd2lsbCBkZWZhdWx0IHRvIHRoZSByYW1kYVxuICogaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIHJhbWRhIGltcGxlbXRhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZG5hbWUgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IFdoYXRldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIG1ldGhvZCBpcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2hlY2tGb3JNZXRob2QobWV0aG9kbmFtZSwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICAgIGlmIChsZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmbigpO1xuICAgIH1cblxuICAgIHZhciBvYmogPSBhcmd1bWVudHNbbGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF9pc0FycmF5KG9iaikgfHwgdHlwZW9mIG9ialttZXRob2RuYW1lXSAhPT0gJ2Z1bmN0aW9uJyA/IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBvYmpbbWV0aG9kbmFtZV0uYXBwbHkob2JqLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDAsIGxlbmd0aCAtIDEpKTtcbiAgfTtcbn0iLCJpbXBvcnQgX2NoZWNrRm9yTWV0aG9kIGZyb20gXCIuL2ludGVybmFsL19jaGVja0Zvck1ldGhvZC5qc1wiO1xuaW1wb3J0IF9jdXJyeTMgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5My5qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gbGlzdCBvciBzdHJpbmcgKG9yIG9iamVjdCB3aXRoIGEgYHNsaWNlYFxuICogbWV0aG9kKSBmcm9tIGBmcm9tSW5kZXhgIChpbmNsdXNpdmUpIHRvIGB0b0luZGV4YCAoZXhjbHVzaXZlKS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgc2xpY2VgIG1ldGhvZCBvZiB0aGUgdGhpcmQgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS40XG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBOdW1iZXIgLT4gTnVtYmVyIC0+IFthXSAtPiBbYV1cbiAqIEBzaWcgTnVtYmVyIC0+IE51bWJlciAtPiBTdHJpbmcgLT4gU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gZnJvbUluZGV4IFRoZSBzdGFydCBpbmRleCAoaW5jbHVzaXZlKS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB0b0luZGV4IFRoZSBlbmQgaW5kZXggKGV4Y2x1c2l2ZSkuXG4gKiBAcGFyYW0geyp9IGxpc3RcbiAqIEByZXR1cm4geyp9XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5zbGljZSgxLCAzLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgICAvLz0+IFsnYicsICdjJ11cbiAqICAgICAgUi5zbGljZSgxLCBJbmZpbml0eSwgWydhJywgJ2InLCAnYycsICdkJ10pOyAvLz0+IFsnYicsICdjJywgJ2QnXVxuICogICAgICBSLnNsaWNlKDAsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgIC8vPT4gWydhJywgJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoLTMsIC0xLCBbJ2EnLCAnYicsICdjJywgJ2QnXSk7ICAgICAgLy89PiBbJ2InLCAnYyddXG4gKiAgICAgIFIuc2xpY2UoMCwgMywgJ3JhbWRhJyk7ICAgICAgICAgICAgICAgICAgICAgLy89PiAncmFtJ1xuICovXG5cbnZhciBzbGljZSA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkzKFxuLyojX19QVVJFX18qL1xuX2NoZWNrRm9yTWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKGZyb21JbmRleCwgdG9JbmRleCwgbGlzdCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCwgZnJvbUluZGV4LCB0b0luZGV4KTtcbn0pKTtcblxuZXhwb3J0IGRlZmF1bHQgc2xpY2U7IiwiaW1wb3J0IF9jaGVja0Zvck1ldGhvZCBmcm9tIFwiLi9pbnRlcm5hbC9fY2hlY2tGb3JNZXRob2QuanNcIjtcbmltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbmltcG9ydCBzbGljZSBmcm9tIFwiLi9zbGljZS5qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIGFsbCBidXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIGdpdmVuIGxpc3Qgb3Igc3RyaW5nIChvciBvYmplY3RcbiAqIHdpdGggYSBgdGFpbGAgbWV0aG9kKS5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgc2xpY2VgIG1ldGhvZCBvZiB0aGUgZmlyc3QgYXJndW1lbnQsIGlmIHByZXNlbnQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBbYV0gLT4gW2FdXG4gKiBAc2lnIFN0cmluZyAtPiBTdHJpbmdcbiAqIEBwYXJhbSB7Kn0gbGlzdFxuICogQHJldHVybiB7Kn1cbiAqIEBzZWUgUi5oZWFkLCBSLmluaXQsIFIubGFzdFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIudGFpbChbMSwgMiwgM10pOyAgLy89PiBbMiwgM11cbiAqICAgICAgUi50YWlsKFsxLCAyXSk7ICAgICAvLz0+IFsyXVxuICogICAgICBSLnRhaWwoWzFdKTsgICAgICAgIC8vPT4gW11cbiAqICAgICAgUi50YWlsKFtdKTsgICAgICAgICAvLz0+IFtdXG4gKlxuICogICAgICBSLnRhaWwoJ2FiYycpOyAgLy89PiAnYmMnXG4gKiAgICAgIFIudGFpbCgnYWInKTsgICAvLz0+ICdiJ1xuICogICAgICBSLnRhaWwoJ2EnKTsgICAgLy89PiAnJ1xuICogICAgICBSLnRhaWwoJycpOyAgICAgLy89PiAnJ1xuICovXG5cbnZhciB0YWlsID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoXG4vKiNfX1BVUkVfXyovXG5fY2hlY2tGb3JNZXRob2QoJ3RhaWwnLFxuLyojX19QVVJFX18qL1xuc2xpY2UoMSwgSW5maW5pdHkpKSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRhaWw7IiwiaW1wb3J0IF9hcml0eSBmcm9tIFwiLi9pbnRlcm5hbC9fYXJpdHkuanNcIjtcbmltcG9ydCBfcGlwZSBmcm9tIFwiLi9pbnRlcm5hbC9fcGlwZS5qc1wiO1xuaW1wb3J0IHJlZHVjZSBmcm9tIFwiLi9yZWR1Y2UuanNcIjtcbmltcG9ydCB0YWlsIGZyb20gXCIuL3RhaWwuanNcIjtcbi8qKlxuICogUGVyZm9ybXMgbGVmdC10by1yaWdodCBmdW5jdGlvbiBjb21wb3NpdGlvbi4gVGhlIGZpcnN0IGFyZ3VtZW50IG1heSBoYXZlXG4gKiBhbnkgYXJpdHk7IHRoZSByZW1haW5pbmcgYXJndW1lbnRzIG11c3QgYmUgdW5hcnkuXG4gKlxuICogSW4gc29tZSBsaWJyYXJpZXMgdGhpcyBmdW5jdGlvbiBpcyBuYW1lZCBgc2VxdWVuY2VgLlxuICpcbiAqICoqTm90ZToqKiBUaGUgcmVzdWx0IG9mIHBpcGUgaXMgbm90IGF1dG9tYXRpY2FsbHkgY3VycmllZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHNpZyAoKChhLCBiLCAuLi4sIG4pIC0+IG8pLCAobyAtPiBwKSwgLi4uLCAoeCAtPiB5KSwgKHkgLT4geikpIC0+ICgoYSwgYiwgLi4uLCBuKSAtPiB6KVxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3Rpb25zXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBzZWUgUi5jb21wb3NlXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgZiA9IFIucGlwZShNYXRoLnBvdywgUi5uZWdhdGUsIFIuaW5jKTtcbiAqXG4gKiAgICAgIGYoMywgNCk7IC8vIC0oM140KSArIDFcbiAqIEBzeW1iIFIucGlwZShmLCBnLCBoKShhLCBiKSA9IGgoZyhmKGEsIGIpKSlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwaXBlKCkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigncGlwZSByZXF1aXJlcyBhdCBsZWFzdCBvbmUgYXJndW1lbnQnKTtcbiAgfVxuXG4gIHJldHVybiBfYXJpdHkoYXJndW1lbnRzWzBdLmxlbmd0aCwgcmVkdWNlKF9waXBlLCBhcmd1bWVudHNbMF0sIHRhaWwoYXJndW1lbnRzKSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pc0Z1bmN0aW9uKHgpIHtcbiAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeCk7XG4gIHJldHVybiB0eXBlID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyB8fCB0eXBlID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEFzeW5jR2VuZXJhdG9yRnVuY3Rpb25dJztcbn0iLCJpbXBvcnQgX2FyaXR5IGZyb20gXCIuL19hcml0eS5qc1wiO1xuaW1wb3J0IF9pc1BsYWNlaG9sZGVyIGZyb20gXCIuL19pc1BsYWNlaG9sZGVyLmpzXCI7XG4vKipcbiAqIEludGVybmFsIGN1cnJ5TiBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIFRoZSBhcml0eSBvZiB0aGUgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXl9IHJlY2VpdmVkIEFuIGFycmF5IG9mIGFyZ3VtZW50cyByZWNlaXZlZCB0aHVzIGZhci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBUaGUgY3VycmllZCBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3VycnlOKGxlbmd0aCwgcmVjZWl2ZWQsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbWJpbmVkID0gW107XG4gICAgdmFyIGFyZ3NJZHggPSAwO1xuICAgIHZhciBsZWZ0ID0gbGVuZ3RoO1xuICAgIHZhciBjb21iaW5lZElkeCA9IDA7XG5cbiAgICB3aGlsZSAoY29tYmluZWRJZHggPCByZWNlaXZlZC5sZW5ndGggfHwgYXJnc0lkeCA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmIChjb21iaW5lZElkeCA8IHJlY2VpdmVkLmxlbmd0aCAmJiAoIV9pc1BsYWNlaG9sZGVyKHJlY2VpdmVkW2NvbWJpbmVkSWR4XSkgfHwgYXJnc0lkeCA+PSBhcmd1bWVudHMubGVuZ3RoKSkge1xuICAgICAgICByZXN1bHQgPSByZWNlaXZlZFtjb21iaW5lZElkeF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbYXJnc0lkeF07XG4gICAgICAgIGFyZ3NJZHggKz0gMTtcbiAgICAgIH1cblxuICAgICAgY29tYmluZWRbY29tYmluZWRJZHhdID0gcmVzdWx0O1xuXG4gICAgICBpZiAoIV9pc1BsYWNlaG9sZGVyKHJlc3VsdCkpIHtcbiAgICAgICAgbGVmdCAtPSAxO1xuICAgICAgfVxuXG4gICAgICBjb21iaW5lZElkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBsZWZ0IDw9IDAgPyBmbi5hcHBseSh0aGlzLCBjb21iaW5lZCkgOiBfYXJpdHkobGVmdCwgX2N1cnJ5TihsZW5ndGgsIGNvbWJpbmVkLCBmbikpO1xuICB9O1xufSIsImltcG9ydCBfYXJpdHkgZnJvbSBcIi4vaW50ZXJuYWwvX2FyaXR5LmpzXCI7XG5pbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2N1cnJ5TiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnlOLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBjdXJyaWVkIGVxdWl2YWxlbnQgb2YgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uLCB3aXRoIHRoZSBzcGVjaWZpZWRcbiAqIGFyaXR5LiBUaGUgY3VycmllZCBmdW5jdGlvbiBoYXMgdHdvIHVudXN1YWwgY2FwYWJpbGl0aWVzLiBGaXJzdCwgaXRzXG4gKiBhcmd1bWVudHMgbmVlZG4ndCBiZSBwcm92aWRlZCBvbmUgYXQgYSB0aW1lLiBJZiBgZ2AgaXMgYFIuY3VycnlOKDMsIGYpYCwgdGhlXG4gKiBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEpKDIpKDMpYFxuICogICAtIGBnKDEpKDIsIDMpYFxuICogICAtIGBnKDEsIDIpKDMpYFxuICogICAtIGBnKDEsIDIsIDMpYFxuICpcbiAqIFNlY29uZGx5LCB0aGUgc3BlY2lhbCBwbGFjZWhvbGRlciB2YWx1ZSBbYFIuX19gXSgjX18pIG1heSBiZSB1c2VkIHRvIHNwZWNpZnlcbiAqIFwiZ2Fwc1wiLCBhbGxvd2luZyBwYXJ0aWFsIGFwcGxpY2F0aW9uIG9mIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMsXG4gKiByZWdhcmRsZXNzIG9mIHRoZWlyIHBvc2l0aW9ucy4gSWYgYGdgIGlzIGFzIGFib3ZlIGFuZCBgX2AgaXMgW2BSLl9fYF0oI19fKSxcbiAqIHRoZSBmb2xsb3dpbmcgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogICAtIGBnKDEsIDIsIDMpYFxuICogICAtIGBnKF8sIDIsIDMpKDEpYFxuICogICAtIGBnKF8sIF8sIDMpKDEpKDIpYFxuICogICAtIGBnKF8sIF8sIDMpKDEsIDIpYFxuICogICAtIGBnKF8sIDIpKDEpKDMpYFxuICogICAtIGBnKF8sIDIpKDEsIDMpYFxuICogICAtIGBnKF8sIDIpKF8sIDMpKDEpYFxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjUuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIE51bWJlciAtPiAoKiAtPiBhKSAtPiAoKiAtPiBhKVxuICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgYXJpdHkgZm9yIHRoZSByZXR1cm5lZCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldywgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBzZWUgUi5jdXJyeVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IHN1bUFyZ3MgPSAoLi4uYXJncykgPT4gUi5zdW0oYXJncyk7XG4gKlxuICogICAgICBjb25zdCBjdXJyaWVkQWRkRm91ck51bWJlcnMgPSBSLmN1cnJ5Tig0LCBzdW1BcmdzKTtcbiAqICAgICAgY29uc3QgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgY29uc3QgZyA9IGYoMyk7XG4gKiAgICAgIGcoNCk7IC8vPT4gMTBcbiAqL1xuXG52YXIgY3VycnlOID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gY3VycnlOKGxlbmd0aCwgZm4pIHtcbiAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBfY3VycnkxKGZuKTtcbiAgfVxuXG4gIHJldHVybiBfYXJpdHkobGVuZ3RoLCBfY3VycnlOKGxlbmd0aCwgW10sIGZuKSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY3VycnlOOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUZyb21JdGVyYXRvcihpdGVyKSB7XG4gIHZhciBsaXN0ID0gW107XG4gIHZhciBuZXh0O1xuXG4gIHdoaWxlICghKG5leHQgPSBpdGVyLm5leHQoKSkuZG9uZSkge1xuICAgIGxpc3QucHVzaChuZXh0LnZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBsaXN0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmNsdWRlc1dpdGgocHJlZCwgeCwgbGlzdCkge1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICBpZiAocHJlZCh4LCBsaXN0W2lkeF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZHggKz0gMTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZnVuY3Rpb25OYW1lKGYpIHtcbiAgLy8gU3RyaW5nKHggPT4geCkgZXZhbHVhdGVzIHRvIFwieCA9PiB4XCIsIHNvIHRoZSBwYXR0ZXJuIG1heSBub3QgbWF0Y2guXG4gIHZhciBtYXRjaCA9IFN0cmluZyhmKS5tYXRjaCgvXmZ1bmN0aW9uIChcXHcqKS8pO1xuICByZXR1cm4gbWF0Y2ggPT0gbnVsbCA/ICcnIDogbWF0Y2hbMV07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2hhcyhwcm9wLCBvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufSIsIi8vIEJhc2VkIG9uIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuZnVuY3Rpb24gX29iamVjdElzKGEsIGIpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoYSA9PT0gYikge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIGEgIT09IGEgJiYgYiAhPT0gYjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgT2JqZWN0LmlzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmlzIDogX29iamVjdElzOyIsImltcG9ydCBfaGFzIGZyb20gXCIuL19oYXMuanNcIjtcbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBfaXNBcmd1bWVudHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcmd1bWVudHMpID09PSAnW29iamVjdCBBcmd1bWVudHNdJyA/IGZ1bmN0aW9uIF9pc0FyZ3VtZW50cyh4KSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoeCkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuICB9IDogZnVuY3Rpb24gX2lzQXJndW1lbnRzKHgpIHtcbiAgICByZXR1cm4gX2hhcygnY2FsbGVlJywgeCk7XG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IF9pc0FyZ3VtZW50czsiLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2hhcyBmcm9tIFwiLi9pbnRlcm5hbC9faGFzLmpzXCI7XG5pbXBvcnQgX2lzQXJndW1lbnRzIGZyb20gXCIuL2ludGVybmFsL19pc0FyZ3VtZW50cy5qc1wiOyAvLyBjb3ZlciBJRSA8IDkga2V5cyBpc3N1ZXNcblxudmFyIGhhc0VudW1CdWcgPSAhXG4vKiNfX1BVUkVfXyovXG57XG4gIHRvU3RyaW5nOiBudWxsXG59LnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpO1xudmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsnY29uc3RydWN0b3InLCAndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2hhc093blByb3BlcnR5JywgJ3RvTG9jYWxlU3RyaW5nJ107IC8vIFNhZmFyaSBidWdcblxudmFyIGhhc0FyZ3NFbnVtQnVnID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHJldHVybiBhcmd1bWVudHMucHJvcGVydHlJc0VudW1lcmFibGUoJ2xlbmd0aCcpO1xufSgpO1xuXG52YXIgY29udGFpbnMgPSBmdW5jdGlvbiBjb250YWlucyhsaXN0LCBpdGVtKSB7XG4gIHZhciBpZHggPSAwO1xuXG4gIHdoaWxlIChpZHggPCBsaXN0Lmxlbmd0aCkge1xuICAgIGlmIChsaXN0W2lkeF0gPT09IGl0ZW0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcbi8qKlxuICogUmV0dXJucyBhIGxpc3QgY29udGFpbmluZyB0aGUgbmFtZXMgb2YgYWxsIHRoZSBlbnVtZXJhYmxlIG93biBwcm9wZXJ0aWVzIG9mXG4gKiB0aGUgc3VwcGxpZWQgb2JqZWN0LlxuICogTm90ZSB0aGF0IHRoZSBvcmRlciBvZiB0aGUgb3V0cHV0IGFycmF5IGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIGNvbnNpc3RlbnRcbiAqIGFjcm9zcyBkaWZmZXJlbnQgSlMgcGxhdGZvcm1zLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHNpZyB7azogdn0gLT4gW2tdXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gZXh0cmFjdCBwcm9wZXJ0aWVzIGZyb21cbiAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiB0aGUgb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gKiBAc2VlIFIua2V5c0luLCBSLnZhbHVlc1xuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIua2V5cyh7YTogMSwgYjogMiwgYzogM30pOyAvLz0+IFsnYScsICdiJywgJ2MnXVxuICovXG5cblxudmFyIGtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgIWhhc0FyZ3NFbnVtQnVnID9cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24ga2V5cyhvYmopIHtcbiAgcmV0dXJuIE9iamVjdChvYmopICE9PSBvYmogPyBbXSA6IE9iamVjdC5rZXlzKG9iaik7XG59KSA6XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIGtleXMob2JqKSB7XG4gIGlmIChPYmplY3Qob2JqKSAhPT0gb2JqKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHByb3AsIG5JZHg7XG4gIHZhciBrcyA9IFtdO1xuXG4gIHZhciBjaGVja0FyZ3NMZW5ndGggPSBoYXNBcmdzRW51bUJ1ZyAmJiBfaXNBcmd1bWVudHMob2JqKTtcblxuICBmb3IgKHByb3AgaW4gb2JqKSB7XG4gICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAoIWNoZWNrQXJnc0xlbmd0aCB8fCBwcm9wICE9PSAnbGVuZ3RoJykpIHtcbiAgICAgIGtzW2tzLmxlbmd0aF0gPSBwcm9wO1xuICAgIH1cbiAgfVxuXG4gIGlmIChoYXNFbnVtQnVnKSB7XG4gICAgbklkeCA9IG5vbkVudW1lcmFibGVQcm9wcy5sZW5ndGggLSAxO1xuXG4gICAgd2hpbGUgKG5JZHggPj0gMCkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tuSWR4XTtcblxuICAgICAgaWYgKF9oYXMocHJvcCwgb2JqKSAmJiAhY29udGFpbnMoa3MsIHByb3ApKSB7XG4gICAgICAgIGtzW2tzLmxlbmd0aF0gPSBwcm9wO1xuICAgICAgfVxuXG4gICAgICBuSWR4IC09IDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGtzO1xufSk7XG5leHBvcnQgZGVmYXVsdCBrZXlzOyIsImltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbi8qKlxuICogR2l2ZXMgYSBzaW5nbGUtd29yZCBzdHJpbmcgZGVzY3JpcHRpb24gb2YgdGhlIChuYXRpdmUpIHR5cGUgb2YgYSB2YWx1ZSxcbiAqIHJldHVybmluZyBzdWNoIGFuc3dlcnMgYXMgJ09iamVjdCcsICdOdW1iZXInLCAnQXJyYXknLCBvciAnTnVsbCcuIERvZXMgbm90XG4gKiBhdHRlbXB0IHRvIGRpc3Rpbmd1aXNoIHVzZXIgT2JqZWN0IHR5cGVzIGFueSBmdXJ0aGVyLCByZXBvcnRpbmcgdGhlbSBhbGwgYXNcbiAqICdPYmplY3QnLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjguMFxuICogQGNhdGVnb3J5IFR5cGVcbiAqIEBzaWcgKCogLT4geyp9KSAtPiBTdHJpbmdcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi50eXBlKHt9KTsgLy89PiBcIk9iamVjdFwiXG4gKiAgICAgIFIudHlwZSgxKTsgLy89PiBcIk51bWJlclwiXG4gKiAgICAgIFIudHlwZShmYWxzZSk7IC8vPT4gXCJCb29sZWFuXCJcbiAqICAgICAgUi50eXBlKCdzJyk7IC8vPT4gXCJTdHJpbmdcIlxuICogICAgICBSLnR5cGUobnVsbCk7IC8vPT4gXCJOdWxsXCJcbiAqICAgICAgUi50eXBlKFtdKTsgLy89PiBcIkFycmF5XCJcbiAqICAgICAgUi50eXBlKC9bQS16XS8pOyAvLz0+IFwiUmVnRXhwXCJcbiAqICAgICAgUi50eXBlKCgpID0+IHt9KTsgLy89PiBcIkZ1bmN0aW9uXCJcbiAqICAgICAgUi50eXBlKHVuZGVmaW5lZCk7IC8vPT4gXCJVbmRlZmluZWRcIlxuICovXG5cbnZhciB0eXBlID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gdHlwZSh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/ICdOdWxsJyA6IHZhbCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdHlwZTsiLCJpbXBvcnQgX2FycmF5RnJvbUl0ZXJhdG9yIGZyb20gXCIuL19hcnJheUZyb21JdGVyYXRvci5qc1wiO1xuaW1wb3J0IF9pbmNsdWRlc1dpdGggZnJvbSBcIi4vX2luY2x1ZGVzV2l0aC5qc1wiO1xuaW1wb3J0IF9mdW5jdGlvbk5hbWUgZnJvbSBcIi4vX2Z1bmN0aW9uTmFtZS5qc1wiO1xuaW1wb3J0IF9oYXMgZnJvbSBcIi4vX2hhcy5qc1wiO1xuaW1wb3J0IF9vYmplY3RJcyBmcm9tIFwiLi9fb2JqZWN0SXMuanNcIjtcbmltcG9ydCBrZXlzIGZyb20gXCIuLi9rZXlzLmpzXCI7XG5pbXBvcnQgdHlwZSBmcm9tIFwiLi4vdHlwZS5qc1wiO1xuLyoqXG4gKiBwcml2YXRlIF91bmlxQ29udGVudEVxdWFscyBmdW5jdGlvbi5cbiAqIFRoYXQgZnVuY3Rpb24gaXMgY2hlY2tpbmcgZXF1YWxpdHkgb2YgMiBpdGVyYXRvciBjb250ZW50cyB3aXRoIDIgYXNzdW1wdGlvbnNcbiAqIC0gaXRlcmF0b3JzIGxlbmd0aHMgYXJlIHRoZSBzYW1lXG4gKiAtIGl0ZXJhdG9ycyB2YWx1ZXMgYXJlIHVuaXF1ZVxuICpcbiAqIGZhbHNlLXBvc2l0aXZlIHJlc3VsdCB3aWxsIGJlIHJldHVybmVkIGZvciBjb21wYXJpc2lvbiBvZiwgZS5nLlxuICogLSBbMSwyLDNdIGFuZCBbMSwyLDMsNF1cbiAqIC0gWzEsMSwxXSBhbmQgWzEsMiwzXVxuICogKi9cblxuZnVuY3Rpb24gX3VuaXFDb250ZW50RXF1YWxzKGFJdGVyYXRvciwgYkl0ZXJhdG9yLCBzdGFja0EsIHN0YWNrQikge1xuICB2YXIgYSA9IF9hcnJheUZyb21JdGVyYXRvcihhSXRlcmF0b3IpO1xuXG4gIHZhciBiID0gX2FycmF5RnJvbUl0ZXJhdG9yKGJJdGVyYXRvcik7XG5cbiAgZnVuY3Rpb24gZXEoX2EsIF9iKSB7XG4gICAgcmV0dXJuIF9lcXVhbHMoX2EsIF9iLCBzdGFja0Euc2xpY2UoKSwgc3RhY2tCLnNsaWNlKCkpO1xuICB9IC8vIGlmICphKiBhcnJheSBjb250YWlucyBhbnkgZWxlbWVudCB0aGF0IGlzIG5vdCBpbmNsdWRlZCBpbiAqYipcblxuXG4gIHJldHVybiAhX2luY2x1ZGVzV2l0aChmdW5jdGlvbiAoYiwgYUl0ZW0pIHtcbiAgICByZXR1cm4gIV9pbmNsdWRlc1dpdGgoZXEsIGFJdGVtLCBiKTtcbiAgfSwgYiwgYSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9lcXVhbHMoYSwgYiwgc3RhY2tBLCBzdGFja0IpIHtcbiAgaWYgKF9vYmplY3RJcyhhLCBiKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIHR5cGVBID0gdHlwZShhKTtcblxuICBpZiAodHlwZUEgIT09IHR5cGUoYikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYVsnZmFudGFzeS1sYW5kL2VxdWFscyddID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBiWydmYW50YXN5LWxhbmQvZXF1YWxzJ10gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHlwZW9mIGFbJ2ZhbnRhc3ktbGFuZC9lcXVhbHMnXSA9PT0gJ2Z1bmN0aW9uJyAmJiBhWydmYW50YXN5LWxhbmQvZXF1YWxzJ10oYikgJiYgdHlwZW9mIGJbJ2ZhbnRhc3ktbGFuZC9lcXVhbHMnXSA9PT0gJ2Z1bmN0aW9uJyAmJiBiWydmYW50YXN5LWxhbmQvZXF1YWxzJ10oYSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEuZXF1YWxzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBiLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlb2YgYS5lcXVhbHMgPT09ICdmdW5jdGlvbicgJiYgYS5lcXVhbHMoYikgJiYgdHlwZW9mIGIuZXF1YWxzID09PSAnZnVuY3Rpb24nICYmIGIuZXF1YWxzKGEpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlQSkge1xuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICBpZiAodHlwZW9mIGEuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgJiYgX2Z1bmN0aW9uTmFtZShhLmNvbnN0cnVjdG9yKSA9PT0gJ1Byb21pc2UnKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgY2FzZSAnU3RyaW5nJzpcbiAgICAgIGlmICghKHR5cGVvZiBhID09PSB0eXBlb2YgYiAmJiBfb2JqZWN0SXMoYS52YWx1ZU9mKCksIGIudmFsdWVPZigpKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgaWYgKCFfb2JqZWN0SXMoYS52YWx1ZU9mKCksIGIudmFsdWVPZigpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgcmV0dXJuIGEubmFtZSA9PT0gYi5uYW1lICYmIGEubWVzc2FnZSA9PT0gYi5tZXNzYWdlO1xuXG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIGlmICghKGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmdsb2JhbCA9PT0gYi5nbG9iYWwgJiYgYS5pZ25vcmVDYXNlID09PSBiLmlnbm9yZUNhc2UgJiYgYS5tdWx0aWxpbmUgPT09IGIubXVsdGlsaW5lICYmIGEuc3RpY2t5ID09PSBiLnN0aWNreSAmJiBhLnVuaWNvZGUgPT09IGIudW5pY29kZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHZhciBpZHggPSBzdGFja0EubGVuZ3RoIC0gMTtcblxuICB3aGlsZSAoaWR4ID49IDApIHtcbiAgICBpZiAoc3RhY2tBW2lkeF0gPT09IGEpIHtcbiAgICAgIHJldHVybiBzdGFja0JbaWR4XSA9PT0gYjtcbiAgICB9XG5cbiAgICBpZHggLT0gMTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZUEpIHtcbiAgICBjYXNlICdNYXAnOlxuICAgICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF91bmlxQ29udGVudEVxdWFscyhhLmVudHJpZXMoKSwgYi5lbnRyaWVzKCksIHN0YWNrQS5jb25jYXQoW2FdKSwgc3RhY2tCLmNvbmNhdChbYl0pKTtcblxuICAgIGNhc2UgJ1NldCc6XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3VuaXFDb250ZW50RXF1YWxzKGEudmFsdWVzKCksIGIudmFsdWVzKCksIHN0YWNrQS5jb25jYXQoW2FdKSwgc3RhY2tCLmNvbmNhdChbYl0pKTtcblxuICAgIGNhc2UgJ0FyZ3VtZW50cyc6XG4gICAgY2FzZSAnQXJyYXknOlxuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgY2FzZSAnTnVtYmVyJzpcbiAgICBjYXNlICdTdHJpbmcnOlxuICAgIGNhc2UgJ0RhdGUnOlxuICAgIGNhc2UgJ0Vycm9yJzpcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0FycmF5QnVmZmVyJzpcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIFZhbHVlcyBvZiBvdGhlciB0eXBlcyBhcmUgb25seSBlcXVhbCBpZiBpZGVudGljYWwuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBrZXlzKGEpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXMoYikubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV4dGVuZGVkU3RhY2tBID0gc3RhY2tBLmNvbmNhdChbYV0pO1xuICB2YXIgZXh0ZW5kZWRTdGFja0IgPSBzdGFja0IuY29uY2F0KFtiXSk7XG4gIGlkeCA9IGtleXNBLmxlbmd0aCAtIDE7XG5cbiAgd2hpbGUgKGlkeCA+PSAwKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIShfaGFzKGtleSwgYikgJiYgX2VxdWFscyhiW2tleV0sIGFba2V5XSwgZXh0ZW5kZWRTdGFja0EsIGV4dGVuZGVkU3RhY2tCKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZHggLT0gMTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSIsImltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbmltcG9ydCBfZXF1YWxzIGZyb20gXCIuL2ludGVybmFsL19lcXVhbHMuanNcIjtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgaXRzIGFyZ3VtZW50cyBhcmUgZXF1aXZhbGVudCwgYGZhbHNlYCBvdGhlcndpc2UuIEhhbmRsZXNcbiAqIGN5Y2xpY2FsIGRhdGEgc3RydWN0dXJlcy5cbiAqXG4gKiBEaXNwYXRjaGVzIHN5bW1ldHJpY2FsbHkgdG8gdGhlIGBlcXVhbHNgIG1ldGhvZHMgb2YgYm90aCBhcmd1bWVudHMsIGlmXG4gKiBwcmVzZW50LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjE1LjBcbiAqIEBjYXRlZ29yeSBSZWxhdGlvblxuICogQHNpZyBhIC0+IGIgLT4gQm9vbGVhblxuICogQHBhcmFtIHsqfSBhXG4gKiBAcGFyYW0geyp9IGJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5lcXVhbHMoMSwgMSk7IC8vPT4gdHJ1ZVxuICogICAgICBSLmVxdWFscygxLCAnMScpOyAvLz0+IGZhbHNlXG4gKiAgICAgIFIuZXF1YWxzKFsxLCAyLCAzXSwgWzEsIDIsIDNdKTsgLy89PiB0cnVlXG4gKlxuICogICAgICBjb25zdCBhID0ge307IGEudiA9IGE7XG4gKiAgICAgIGNvbnN0IGIgPSB7fTsgYi52ID0gYjtcbiAqICAgICAgUi5lcXVhbHMoYSwgYik7IC8vPT4gdHJ1ZVxuICovXG5cbnZhciBlcXVhbHMgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xuICByZXR1cm4gX2VxdWFscyhhLCBiLCBbXSwgW10pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGVxdWFsczsiLCJpbXBvcnQgZXF1YWxzIGZyb20gXCIuLi9lcXVhbHMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmRleE9mKGxpc3QsIGEsIGlkeCkge1xuICB2YXIgaW5mLCBpdGVtOyAvLyBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiBkb2Vzbid0IGV4aXN0IGJlbG93IElFOVxuXG4gIGlmICh0eXBlb2YgbGlzdC5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgYSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgaWYgKGEgPT09IDApIHtcbiAgICAgICAgICAvLyBtYW51YWxseSBjcmF3bCB0aGUgbGlzdCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuICswIGFuZCAtMFxuICAgICAgICAgIGluZiA9IDEgLyBhO1xuXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gMCAmJiAxIC8gaXRlbSA9PT0gaW5mKSB7XG4gICAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlkeCArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfSBlbHNlIGlmIChhICE9PSBhKSB7XG4gICAgICAgICAgLy8gTmFOXG4gICAgICAgICAgd2hpbGUgKGlkeCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICBpdGVtID0gbGlzdFtpZHhdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdudW1iZXInICYmIGl0ZW0gIT09IGl0ZW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlkeDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWR4ICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9IC8vIG5vbi16ZXJvIG51bWJlcnMgY2FuIHV0aWxpc2UgU2V0XG5cblxuICAgICAgICByZXR1cm4gbGlzdC5pbmRleE9mKGEsIGlkeCk7XG4gICAgICAvLyBhbGwgdGhlc2UgdHlwZXMgY2FuIHV0aWxpc2UgU2V0XG5cbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKGEgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBudWxsIGNhbiB1dGlsaXNlIFNldFxuICAgICAgICAgIHJldHVybiBsaXN0LmluZGV4T2YoYSwgaWR4KTtcbiAgICAgICAgfVxuXG4gICAgfVxuICB9IC8vIGFueXRoaW5nIGVsc2Ugbm90IGNvdmVyZWQgYWJvdmUsIGRlZmVyIHRvIFIuZXF1YWxzXG5cblxuICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICBpZiAoZXF1YWxzKGxpc3RbaWR4XSwgYSkpIHtcbiAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuXG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4gLTE7XG59IiwiaW1wb3J0IF9pbmRleE9mIGZyb20gXCIuL19pbmRleE9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5jbHVkZXMoYSwgbGlzdCkge1xuICByZXR1cm4gX2luZGV4T2YobGlzdCwgYSwgMCkgPj0gMDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfbWFwKGZuLCBmdW5jdG9yKSB7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuID0gZnVuY3Rvci5sZW5ndGg7XG4gIHZhciByZXN1bHQgPSBBcnJheShsZW4pO1xuXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICByZXN1bHRbaWR4XSA9IGZuKGZ1bmN0b3JbaWR4XSk7XG4gICAgaWR4ICs9IDE7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9xdW90ZShzKSB7XG4gIHZhciBlc2NhcGVkID0gcy5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpLnJlcGxhY2UoL1tcXGJdL2csICdcXFxcYicpIC8vIFxcYiBtYXRjaGVzIHdvcmQgYm91bmRhcnk7IFtcXGJdIG1hdGNoZXMgYmFja3NwYWNlXG4gIC5yZXBsYWNlKC9cXGYvZywgJ1xcXFxmJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKS5yZXBsYWNlKC9cXHQvZywgJ1xcXFx0JykucmVwbGFjZSgvXFx2L2csICdcXFxcdicpLnJlcGxhY2UoL1xcMC9nLCAnXFxcXDAnKTtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVkLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArICdcIic7XG59IiwiLyoqXG4gKiBQb2x5ZmlsbCBmcm9tIDxodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9EYXRlL3RvSVNPU3RyaW5nPi5cbiAqL1xudmFyIHBhZCA9IGZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiAobiA8IDEwID8gJzAnIDogJycpICsgbjtcbn07XG5cbnZhciBfdG9JU09TdHJpbmcgPSB0eXBlb2YgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgPT09ICdmdW5jdGlvbicgPyBmdW5jdGlvbiBfdG9JU09TdHJpbmcoZCkge1xuICByZXR1cm4gZC50b0lTT1N0cmluZygpO1xufSA6IGZ1bmN0aW9uIF90b0lTT1N0cmluZyhkKSB7XG4gIHJldHVybiBkLmdldFVUQ0Z1bGxZZWFyKCkgKyAnLScgKyBwYWQoZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBwYWQoZC5nZXRVVENEYXRlKCkpICsgJ1QnICsgcGFkKGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBwYWQoZC5nZXRVVENNaW51dGVzKCkpICsgJzonICsgcGFkKGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChkLmdldFVUQ01pbGxpc2Vjb25kcygpIC8gMTAwMCkudG9GaXhlZCgzKS5zbGljZSgyLCA1KSArICdaJztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IF90b0lTT1N0cmluZzsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY29tcGxlbWVudChmKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICFmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2lzVHJhbnNmb3JtZXIob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiB0eXBlb2Ygb2JqWydAQHRyYW5zZHVjZXIvc3RlcCddID09PSAnZnVuY3Rpb24nO1xufSIsImltcG9ydCBfaXNBcnJheSBmcm9tIFwiLi9faXNBcnJheS5qc1wiO1xuaW1wb3J0IF9pc1RyYW5zZm9ybWVyIGZyb20gXCIuL19pc1RyYW5zZm9ybWVyLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgd2l0aCBkaWZmZXJlbnQgc3RyYXRlZ2llcyBiYXNlZCBvbiB0aGVcbiAqIG9iamVjdCBpbiBsaXN0IHBvc2l0aW9uIChsYXN0IGFyZ3VtZW50KS4gSWYgaXQgaXMgYW4gYXJyYXksIGV4ZWN1dGVzIFtmbl0uXG4gKiBPdGhlcndpc2UsIGlmIGl0IGhhcyBhIGZ1bmN0aW9uIHdpdGggb25lIG9mIHRoZSBnaXZlbiBtZXRob2QgbmFtZXMsIGl0IHdpbGxcbiAqIGV4ZWN1dGUgdGhhdCBmdW5jdGlvbiAoZnVuY3RvciBjYXNlKS4gT3RoZXJ3aXNlLCBpZiBpdCBpcyBhIHRyYW5zZm9ybWVyLFxuICogdXNlcyB0cmFuc2R1Y2VyIFt4Zl0gdG8gcmV0dXJuIGEgbmV3IHRyYW5zZm9ybWVyICh0cmFuc2R1Y2VyIGNhc2UpLlxuICogT3RoZXJ3aXNlLCBpdCB3aWxsIGRlZmF1bHQgdG8gZXhlY3V0aW5nIFtmbl0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IG1ldGhvZE5hbWVzIHByb3BlcnRpZXMgdG8gY2hlY2sgZm9yIGEgY3VzdG9tIGltcGxlbWVudGF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB4ZiB0cmFuc2R1Y2VyIHRvIGluaXRpYWxpemUgaWYgb2JqZWN0IGlzIHRyYW5zZm9ybWVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBkZWZhdWx0IHJhbWRhIGltcGxlbWVudGF0aW9uXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0aGF0IGRpc3BhdGNoZXMgb24gb2JqZWN0IGluIGxpc3QgcG9zaXRpb25cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZGlzcGF0Y2hhYmxlKG1ldGhvZE5hbWVzLCB4ZiwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgIHZhciBvYmogPSBhcmdzLnBvcCgpO1xuXG4gICAgaWYgKCFfaXNBcnJheShvYmopKSB7XG4gICAgICB2YXIgaWR4ID0gMDtcblxuICAgICAgd2hpbGUgKGlkeCA8IG1ldGhvZE5hbWVzLmxlbmd0aCkge1xuICAgICAgICBpZiAodHlwZW9mIG9ialttZXRob2ROYW1lc1tpZHhdXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBvYmpbbWV0aG9kTmFtZXNbaWR4XV0uYXBwbHkob2JqLCBhcmdzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlkeCArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoX2lzVHJhbnNmb3JtZXIob2JqKSkge1xuICAgICAgICB2YXIgdHJhbnNkdWNlciA9IHhmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICByZXR1cm4gdHJhbnNkdWNlcihvYmopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9maWx0ZXIoZm4sIGxpc3QpIHtcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlIChpZHggPCBsZW4pIHtcbiAgICBpZiAoZm4obGlzdFtpZHhdKSkge1xuICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gbGlzdFtpZHhdO1xuICAgIH1cblxuICAgIGlkeCArPSAxO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXNPYmplY3QoeCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpID09PSAnW29iamVjdCBPYmplY3RdJztcbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL2luaXQnXSgpO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddKHJlc3VsdCk7XG4gIH1cbn07IiwiaW1wb3J0IF9jdXJyeTIgZnJvbSBcIi4vX2N1cnJ5Mi5qc1wiO1xuaW1wb3J0IF94ZkJhc2UgZnJvbSBcIi4vX3hmQmFzZS5qc1wiO1xuXG52YXIgWEZpbHRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFhGaWx0ZXIoZiwgeGYpIHtcbiAgICB0aGlzLnhmID0geGY7XG4gICAgdGhpcy5mID0gZjtcbiAgfVxuXG4gIFhGaWx0ZXIucHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gX3hmQmFzZS5pbml0O1xuICBYRmlsdGVyLnByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gX3hmQmFzZS5yZXN1bHQ7XG5cbiAgWEZpbHRlci5wcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbiAocmVzdWx0LCBpbnB1dCkge1xuICAgIHJldHVybiB0aGlzLmYoaW5wdXQpID8gdGhpcy54ZlsnQEB0cmFuc2R1Y2VyL3N0ZXAnXShyZXN1bHQsIGlucHV0KSA6IHJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gWEZpbHRlcjtcbn0oKTtcblxudmFyIF94ZmlsdGVyID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gX3hmaWx0ZXIoZiwgeGYpIHtcbiAgcmV0dXJuIG5ldyBYRmlsdGVyKGYsIHhmKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBfeGZpbHRlcjsiLCJpbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2Rpc3BhdGNoYWJsZSBmcm9tIFwiLi9pbnRlcm5hbC9fZGlzcGF0Y2hhYmxlLmpzXCI7XG5pbXBvcnQgX2ZpbHRlciBmcm9tIFwiLi9pbnRlcm5hbC9fZmlsdGVyLmpzXCI7XG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gXCIuL2ludGVybmFsL19pc09iamVjdC5qc1wiO1xuaW1wb3J0IF9yZWR1Y2UgZnJvbSBcIi4vaW50ZXJuYWwvX3JlZHVjZS5qc1wiO1xuaW1wb3J0IF94ZmlsdGVyIGZyb20gXCIuL2ludGVybmFsL194ZmlsdGVyLmpzXCI7XG5pbXBvcnQga2V5cyBmcm9tIFwiLi9rZXlzLmpzXCI7XG4vKipcbiAqIFRha2VzIGEgcHJlZGljYXRlIGFuZCBhIGBGaWx0ZXJhYmxlYCwgYW5kIHJldHVybnMgYSBuZXcgZmlsdGVyYWJsZSBvZiB0aGVcbiAqIHNhbWUgdHlwZSBjb250YWluaW5nIHRoZSBtZW1iZXJzIG9mIHRoZSBnaXZlbiBmaWx0ZXJhYmxlIHdoaWNoIHNhdGlzZnkgdGhlXG4gKiBnaXZlbiBwcmVkaWNhdGUuIEZpbHRlcmFibGUgb2JqZWN0cyBpbmNsdWRlIHBsYWluIG9iamVjdHMgb3IgYW55IG9iamVjdFxuICogdGhhdCBoYXMgYSBmaWx0ZXIgbWV0aG9kIHN1Y2ggYXMgYEFycmF5YC5cbiAqXG4gKiBEaXNwYXRjaGVzIHRvIHRoZSBgZmlsdGVyYCBtZXRob2Qgb2YgdGhlIHNlY29uZCBhcmd1bWVudCwgaWYgcHJlc2VudC5cbiAqXG4gKiBBY3RzIGFzIGEgdHJhbnNkdWNlciBpZiBhIHRyYW5zZm9ybWVyIGlzIGdpdmVuIGluIGxpc3QgcG9zaXRpb24uXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgTGlzdFxuICogQHNpZyBGaWx0ZXJhYmxlIGYgPT4gKGEgLT4gQm9vbGVhbikgLT4gZiBhIC0+IGYgYVxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZFxuICogQHBhcmFtIHtBcnJheX0gZmlsdGVyYWJsZVxuICogQHJldHVybiB7QXJyYXl9IEZpbHRlcmFibGVcbiAqIEBzZWUgUi5yZWplY3QsIFIudHJhbnNkdWNlLCBSLmFkZEluZGV4XG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgY29uc3QgaXNFdmVuID0gbiA9PiBuICUgMiA9PT0gMDtcbiAqXG4gKiAgICAgIFIuZmlsdGVyKGlzRXZlbiwgWzEsIDIsIDMsIDRdKTsgLy89PiBbMiwgNF1cbiAqXG4gKiAgICAgIFIuZmlsdGVyKGlzRXZlbiwge2E6IDEsIGI6IDIsIGM6IDMsIGQ6IDR9KTsgLy89PiB7YjogMiwgZDogNH1cbiAqL1xuXG52YXIgZmlsdGVyID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoXG4vKiNfX1BVUkVfXyovXG5fZGlzcGF0Y2hhYmxlKFsnZmlsdGVyJ10sIF94ZmlsdGVyLCBmdW5jdGlvbiAocHJlZCwgZmlsdGVyYWJsZSkge1xuICByZXR1cm4gX2lzT2JqZWN0KGZpbHRlcmFibGUpID8gX3JlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICBpZiAocHJlZChmaWx0ZXJhYmxlW2tleV0pKSB7XG4gICAgICBhY2Nba2V5XSA9IGZpbHRlcmFibGVba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSwga2V5cyhmaWx0ZXJhYmxlKSkgOiAvLyBlbHNlXG4gIF9maWx0ZXIocHJlZCwgZmlsdGVyYWJsZSk7XG59KSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZpbHRlcjsiLCJpbXBvcnQgX2NvbXBsZW1lbnQgZnJvbSBcIi4vaW50ZXJuYWwvX2NvbXBsZW1lbnQuanNcIjtcbmltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbmltcG9ydCBmaWx0ZXIgZnJvbSBcIi4vZmlsdGVyLmpzXCI7XG4vKipcbiAqIFRoZSBjb21wbGVtZW50IG9mIFtgZmlsdGVyYF0oI2ZpbHRlcikuXG4gKlxuICogQWN0cyBhcyBhIHRyYW5zZHVjZXIgaWYgYSB0cmFuc2Zvcm1lciBpcyBnaXZlbiBpbiBsaXN0IHBvc2l0aW9uLiBGaWx0ZXJhYmxlXG4gKiBvYmplY3RzIGluY2x1ZGUgcGxhaW4gb2JqZWN0cyBvciBhbnkgb2JqZWN0IHRoYXQgaGFzIGEgZmlsdGVyIG1ldGhvZCBzdWNoXG4gKiBhcyBgQXJyYXlgLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjEuMFxuICogQGNhdGVnb3J5IExpc3RcbiAqIEBzaWcgRmlsdGVyYWJsZSBmID0+IChhIC0+IEJvb2xlYW4pIC0+IGYgYSAtPiBmIGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGZpbHRlcmFibGVcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHNlZSBSLmZpbHRlciwgUi50cmFuc2R1Y2UsIFIuYWRkSW5kZXhcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBjb25zdCBpc09kZCA9IChuKSA9PiBuICUgMiA9PT0gMTtcbiAqXG4gKiAgICAgIFIucmVqZWN0KGlzT2RkLCBbMSwgMiwgMywgNF0pOyAvLz0+IFsyLCA0XVxuICpcbiAqICAgICAgUi5yZWplY3QoaXNPZGQsIHthOiAxLCBiOiAyLCBjOiAzLCBkOiA0fSk7IC8vPT4ge2I6IDIsIGQ6IDR9XG4gKi9cblxudmFyIHJlamVjdCA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkyKGZ1bmN0aW9uIHJlamVjdChwcmVkLCBmaWx0ZXJhYmxlKSB7XG4gIHJldHVybiBmaWx0ZXIoX2NvbXBsZW1lbnQocHJlZCksIGZpbHRlcmFibGUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJlamVjdDsiLCJpbXBvcnQgX2luY2x1ZGVzIGZyb20gXCIuL19pbmNsdWRlcy5qc1wiO1xuaW1wb3J0IF9tYXAgZnJvbSBcIi4vX21hcC5qc1wiO1xuaW1wb3J0IF9xdW90ZSBmcm9tIFwiLi9fcXVvdGUuanNcIjtcbmltcG9ydCBfdG9JU09TdHJpbmcgZnJvbSBcIi4vX3RvSVNPU3RyaW5nLmpzXCI7XG5pbXBvcnQga2V5cyBmcm9tIFwiLi4va2V5cy5qc1wiO1xuaW1wb3J0IHJlamVjdCBmcm9tIFwiLi4vcmVqZWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9TdHJpbmcoeCwgc2Vlbikge1xuICB2YXIgcmVjdXIgPSBmdW5jdGlvbiByZWN1cih5KSB7XG4gICAgdmFyIHhzID0gc2Vlbi5jb25jYXQoW3hdKTtcbiAgICByZXR1cm4gX2luY2x1ZGVzKHksIHhzKSA/ICc8Q2lyY3VsYXI+JyA6IF90b1N0cmluZyh5LCB4cyk7XG4gIH07IC8vICBtYXBQYWlycyA6OiAoT2JqZWN0LCBbU3RyaW5nXSkgLT4gW1N0cmluZ11cblxuXG4gIHZhciBtYXBQYWlycyA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcbiAgICByZXR1cm4gX21hcChmdW5jdGlvbiAoaykge1xuICAgICAgcmV0dXJuIF9xdW90ZShrKSArICc6ICcgKyByZWN1cihvYmpba10pO1xuICAgIH0sIGtleXMuc2xpY2UoKS5zb3J0KCkpO1xuICB9O1xuXG4gIHN3aXRjaCAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpKSB7XG4gICAgY2FzZSAnW29iamVjdCBBcmd1bWVudHNdJzpcbiAgICAgIHJldHVybiAnKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCcgKyBfbWFwKHJlY3VyLCB4KS5qb2luKCcsICcpICsgJykpJztcblxuICAgIGNhc2UgJ1tvYmplY3QgQXJyYXldJzpcbiAgICAgIHJldHVybiAnWycgKyBfbWFwKHJlY3VyLCB4KS5jb25jYXQobWFwUGFpcnMoeCwgcmVqZWN0KGZ1bmN0aW9uIChrKSB7XG4gICAgICAgIHJldHVybiAvXlxcZCskLy50ZXN0KGspO1xuICAgICAgfSwga2V5cyh4KSkpKS5qb2luKCcsICcpICsgJ10nO1xuXG4gICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBCb29sZWFuKCcgKyByZWN1cih4LnZhbHVlT2YoKSkgKyAnKScgOiB4LnRvU3RyaW5nKCk7XG5cbiAgICBjYXNlICdbb2JqZWN0IERhdGVdJzpcbiAgICAgIHJldHVybiAnbmV3IERhdGUoJyArIChpc05hTih4LnZhbHVlT2YoKSkgPyByZWN1cihOYU4pIDogX3F1b3RlKF90b0lTT1N0cmluZyh4KSkpICsgJyknO1xuXG4gICAgY2FzZSAnW29iamVjdCBOdWxsXSc6XG4gICAgICByZXR1cm4gJ251bGwnO1xuXG4gICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ29iamVjdCcgPyAnbmV3IE51bWJlcignICsgcmVjdXIoeC52YWx1ZU9mKCkpICsgJyknIDogMSAvIHggPT09IC1JbmZpbml0eSA/ICctMCcgOiB4LnRvU3RyaW5nKDEwKTtcblxuICAgIGNhc2UgJ1tvYmplY3QgU3RyaW5nXSc6XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnID8gJ25ldyBTdHJpbmcoJyArIHJlY3VyKHgudmFsdWVPZigpKSArICcpJyA6IF9xdW90ZSh4KTtcblxuICAgIGNhc2UgJ1tvYmplY3QgVW5kZWZpbmVkXSc6XG4gICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiB4LnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByZXByID0geC50b1N0cmluZygpO1xuXG4gICAgICAgIGlmIChyZXByICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICAgIHJldHVybiByZXByO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAneycgKyBtYXBQYWlycyh4LCBrZXlzKHgpKS5qb2luKCcsICcpICsgJ30nO1xuICB9XG59IiwiaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5MS5qc1wiO1xuaW1wb3J0IF90b1N0cmluZyBmcm9tIFwiLi9pbnRlcm5hbC9fdG9TdHJpbmcuanNcIjtcbi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiB2YWx1ZS4gYGV2YWxgJ2luZyB0aGUgb3V0cHV0XG4gKiBzaG91bGQgcmVzdWx0IGluIGEgdmFsdWUgZXF1aXZhbGVudCB0byB0aGUgaW5wdXQgdmFsdWUuIE1hbnkgb2YgdGhlIGJ1aWx0LWluXG4gKiBgdG9TdHJpbmdgIG1ldGhvZHMgZG8gbm90IHNhdGlzZnkgdGhpcyByZXF1aXJlbWVudC5cbiAqXG4gKiBJZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gYFtvYmplY3QgT2JqZWN0XWAgd2l0aCBhIGB0b1N0cmluZ2AgbWV0aG9kIG90aGVyXG4gKiB0aGFuIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCwgdGhpcyBtZXRob2QgaXMgaW52b2tlZCB3aXRoIG5vIGFyZ3VtZW50c1xuICogdG8gcHJvZHVjZSB0aGUgcmV0dXJuIHZhbHVlLiBUaGlzIG1lYW5zIHVzZXItZGVmaW5lZCBjb25zdHJ1Y3RvciBmdW5jdGlvbnNcbiAqIGNhbiBwcm92aWRlIGEgc3VpdGFibGUgYHRvU3RyaW5nYCBtZXRob2QuIEZvciBleGFtcGxlOlxuICpcbiAqICAgICBmdW5jdGlvbiBQb2ludCh4LCB5KSB7XG4gKiAgICAgICB0aGlzLnggPSB4O1xuICogICAgICAgdGhpcy55ID0geTtcbiAqICAgICB9XG4gKlxuICogICAgIFBvaW50LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuICduZXcgUG9pbnQoJyArIHRoaXMueCArICcsICcgKyB0aGlzLnkgKyAnKSc7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgUi50b1N0cmluZyhuZXcgUG9pbnQoMSwgMikpOyAvLz0+ICduZXcgUG9pbnQoMSwgMiknXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMTQuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHNpZyAqIC0+IFN0cmluZ1xuICogQHBhcmFtIHsqfSB2YWxcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnRvU3RyaW5nKDQyKTsgLy89PiAnNDInXG4gKiAgICAgIFIudG9TdHJpbmcoJ2FiYycpOyAvLz0+ICdcImFiY1wiJ1xuICogICAgICBSLnRvU3RyaW5nKFsxLCAyLCAzXSk7IC8vPT4gJ1sxLCAyLCAzXSdcbiAqICAgICAgUi50b1N0cmluZyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30pOyAvLz0+ICd7XCJiYXJcIjogMiwgXCJiYXpcIjogMywgXCJmb29cIjogMX0nXG4gKiAgICAgIFIudG9TdHJpbmcobmV3IERhdGUoJzIwMDEtMDItMDNUMDQ6MDU6MDZaJykpOyAvLz0+ICduZXcgRGF0ZShcIjIwMDEtMDItMDNUMDQ6MDU6MDYuMDAwWlwiKSdcbiAqL1xuXG52YXIgdG9TdHJpbmcgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MShmdW5jdGlvbiB0b1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIF90b1N0cmluZyh2YWwsIFtdKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZzsiLCJpbXBvcnQgX2N1cnJ5MiBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkyLmpzXCI7XG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSBcIi4vaW50ZXJuYWwvX2lzRnVuY3Rpb24uanNcIjtcbmltcG9ydCBjdXJyeU4gZnJvbSBcIi4vY3VycnlOLmpzXCI7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSBcIi4vdG9TdHJpbmcuanNcIjtcbi8qKlxuICogVHVybnMgYSBuYW1lZCBtZXRob2Qgd2l0aCBhIHNwZWNpZmllZCBhcml0eSBpbnRvIGEgZnVuY3Rpb24gdGhhdCBjYW4gYmVcbiAqIGNhbGxlZCBkaXJlY3RseSBzdXBwbGllZCB3aXRoIGFyZ3VtZW50cyBhbmQgYSB0YXJnZXQgb2JqZWN0LlxuICpcbiAqIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBpcyBjdXJyaWVkIGFuZCBhY2NlcHRzIGBhcml0eSArIDFgIHBhcmFtZXRlcnMgd2hlcmVcbiAqIHRoZSBmaW5hbCBwYXJhbWV0ZXIgaXMgdGhlIHRhcmdldCBvYmplY3QuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgTnVtYmVyIC0+IFN0cmluZyAtPiAoYSAtPiBiIC0+IC4uLiAtPiBuIC0+IE9iamVjdCAtPiAqKVxuICogQHBhcmFtIHtOdW1iZXJ9IGFyaXR5IE51bWJlciBvZiBhcmd1bWVudHMgdGhlIHJldHVybmVkIGZ1bmN0aW9uIHNob3VsZCB0YWtlXG4gKiAgICAgICAgYmVmb3JlIHRoZSB0YXJnZXQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBOYW1lIG9mIGFueSBvZiB0aGUgdGFyZ2V0IG9iamVjdCdzIG1ldGhvZHMgdG8gY2FsbC5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICogQHNlZSBSLmNvbnN0cnVjdFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IHNsaWNlRnJvbSA9IFIuaW52b2tlcigxLCAnc2xpY2UnKTtcbiAqICAgICAgc2xpY2VGcm9tKDYsICdhYmNkZWZnaGlqa2xtJyk7IC8vPT4gJ2doaWprbG0nXG4gKiAgICAgIGNvbnN0IHNsaWNlRnJvbTYgPSBSLmludm9rZXIoMiwgJ3NsaWNlJykoNik7XG4gKiAgICAgIHNsaWNlRnJvbTYoOCwgJ2FiY2RlZmdoaWprbG0nKTsgLy89PiAnZ2gnXG4gKlxuICogICAgICBjb25zdCBkb2cgPSB7XG4gKiAgICAgICAgc3BlYWs6IGFzeW5jICgpID0+ICdXb29mISdcbiAqICAgICAgfTtcbiAqICAgICAgY29uc3Qgc3BlYWsgPSBSLmludm9rZXIoMCwgJ3NwZWFrJyk7XG4gKiAgICAgIHNwZWFrKGRvZykudGhlbihjb25zb2xlLmxvZykgLy9+PiAnV29vZiEnXG4gKlxuICogQHN5bWIgUi5pbnZva2VyKDAsICdtZXRob2QnKShvKSA9IG9bJ21ldGhvZCddKClcbiAqIEBzeW1iIFIuaW52b2tlcigxLCAnbWV0aG9kJykoYSwgbykgPSBvWydtZXRob2QnXShhKVxuICogQHN5bWIgUi5pbnZva2VyKDIsICdtZXRob2QnKShhLCBiLCBvKSA9IG9bJ21ldGhvZCddKGEsIGIpXG4gKi9cblxudmFyIGludm9rZXIgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBpbnZva2VyKGFyaXR5LCBtZXRob2QpIHtcbiAgcmV0dXJuIGN1cnJ5Tihhcml0eSArIDEsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzW2FyaXR5XTtcblxuICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiBfaXNGdW5jdGlvbih0YXJnZXRbbWV0aG9kXSkpIHtcbiAgICAgIHJldHVybiB0YXJnZXRbbWV0aG9kXS5hcHBseSh0YXJnZXQsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgYXJpdHkpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHRvU3RyaW5nKHRhcmdldCkgKyAnIGRvZXMgbm90IGhhdmUgYSBtZXRob2QgbmFtZWQgXCInICsgbWV0aG9kICsgJ1wiJyk7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGludm9rZXI7IiwiaW1wb3J0IGludm9rZXIgZnJvbSBcIi4vaW52b2tlci5qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIG1hZGUgYnkgaW5zZXJ0aW5nIHRoZSBgc2VwYXJhdG9yYCBiZXR3ZWVuIGVhY2ggZWxlbWVudCBhbmRcbiAqIGNvbmNhdGVuYXRpbmcgYWxsIHRoZSBlbGVtZW50cyBpbnRvIGEgc2luZ2xlIHN0cmluZy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIFN0cmluZyAtPiBbYV0gLT4gU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHNlcGFyYXRvciBUaGUgc3RyaW5nIHVzZWQgdG8gc2VwYXJhdGUgdGhlIGVsZW1lbnRzLlxuICogQHBhcmFtIHtBcnJheX0geHMgVGhlIGVsZW1lbnRzIHRvIGpvaW4gaW50byBhIHN0cmluZy5cbiAqIEByZXR1cm4ge1N0cmluZ30gc3RyIFRoZSBzdHJpbmcgbWFkZSBieSBjb25jYXRlbmF0aW5nIGB4c2Agd2l0aCBgc2VwYXJhdG9yYC5cbiAqIEBzZWUgUi5zcGxpdFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IHNwYWNlciA9IFIuam9pbignICcpO1xuICogICAgICBzcGFjZXIoWydhJywgMiwgMy40XSk7ICAgLy89PiAnYSAyIDMuNCdcbiAqICAgICAgUi5qb2luKCd8JywgWzEsIDIsIDNdKTsgICAgLy89PiAnMXwyfDMnXG4gKi9cblxudmFyIGpvaW4gPVxuLyojX19QVVJFX18qL1xuaW52b2tlcigxLCAnam9pbicpO1xuZXhwb3J0IGRlZmF1bHQgam9pbjsiLCJ2YXIgX1VwbG9hZEVycm9yTWVzc2FnZXM7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLW1hZ2ljLW51bWJlcnMgKi9cbmV4cG9ydCB2YXIgVmlld1BhdGhzID0ge1xuICBJbml0aWFsaXppbmc6ICdpbml0aWFsaXppbmcnLFxuICBVbmF2YWlsYWJsZTogJ3VuYXZhaWxhYmxlJyxcbiAgU3RhcnRDaGF0Rm9ybTogJ3N0YXJ0LWNoYXQtZm9ybScsXG4gIENvbnZlcnNhdGlvbjogJ2NvbnZlcnNhdGlvbicsXG4gIEVtYWlsRm9ybTogJ2VtYWlsLWZvcm0nLFxuICBFbWFpbFN1Y2Nlc3M6ICdlbWFpbC1zdWNjZXNzJyxcbiAgVW5hdmFpbGFibGVNZXNzYWdlOiAndW5hdmFpbGFibGUtbWVzc2FnZSdcbn07XG5leHBvcnQgdmFyIEtleUNvZGVzID0ge1xuICBFbnRlcjogMTMsXG4gIEVzY2FwZTogMjcsXG4gIExlZnRBcnJvdzogMzcsXG4gIFVwQXJyb3c6IDM4LFxuICBSaWdodEFycm93OiAzOSxcbiAgRG93bkFycm93OiA0MCxcbiAgVGFiOiA5LFxuICBTcGFjZTogMzJcbn07XG5leHBvcnQgdmFyIExvY2FsU3RvcmFnZUtleXMgPSB7XG4gIENvbnRhY3RJZDogJ2knLFxuICBBY3F1aXNpdGlvblNvdXJjZTogJ3B1cmVjaGF0X2FjcXVpc2l0aW9uX3NvdXJjZScsXG4gIEV4cGFuZGVkOiAncHVyZWNoYXRfZXhwYW5kZWQnLFxuICBMZWFkQ2FwdHVyZUV4cGFuZGVkOiAncHVyZWNoYXRfbGVhZF9jYXB0dXJlX2V4cGFuZGVkJyxcbiAgUGxheVNvdW5kOiAnX3B1cmVjaGF0VmlzaXRvcldpZGdldFBsYXlTb3VuZCcsXG4gIFVzZXJJZDogJ3B1cmVjaGF0X3VzZXJJZCcsXG4gIEF1dGhUb2tlbjogJ3B1cmVjaGF0X2F1dGhUb2tlbicsXG4gIFJvb21JZDogJ3B1cmVjaGF0X3Jvb21JZCcsXG4gIFJvb21UeXBlOiAncHVyZWNoYXRfcm9vbVR5cGUnLFxuICBDaGF0SWQ6ICdwdXJlY2hhdF9jaGF0SWQnLFxuICBWaXNpdG9yTmFtZTogJ3B1cmVjaGF0X3Zpc2l0b3JOYW1lJyxcbiAgRGlzYWJsZWQ6ICdwdXJlY2hhdF9kaXNhYmxlZCcsXG4gIENoYXRBY3RpdmVJbk90aGVyV2luZG93OiAncHVyZWNoYXRfY2hhdEFjdGl2ZUluT3RoZXJXaW5kb3cnLFxuICBDaGF0Q2xvc2VkOiAncHVyZWNoYXRfY2hhdENsb3NlZCcsXG4gIEV4cGFuZFNvdXJjZTogJ3B1cmVjaGF0X2V4cGFuZFNvdXJjZScsXG4gIENoYXRTZXJ2ZXJVcmw6ICdwdXJlY2hhdF9jaGF0U2VydmVyVXJsJyxcbiAgSGFzSGFkQ2hhdDogJ3B1cmVjaGF0X2hhc0hhZENoYXQnLFxuICBIYXNIYWRFbWFpbDogJ3B1cmVjaGF0X2hhc0hhZEVtYWlsJyxcbiAgRW1vamlzOiAncHVyZWNoYXRfZW1vamlzJyxcbiAgTGFzdEFjdGl2aXR5OiAncHVyZWNoYXRfbGFzdEFjdGl2aXR5JyxcbiAgVHJpZ2dlclBhZ2VTdGFydDogJ3t3aWRnZXRJZH1fX3B1cmVjaGF0UGFnZVN0YXJ0JyxcbiAgVHJpZ2dlckxhc3RDaGVja2luOiAne3dpZGdldElkfV9fcHVyZWNoYXRMYXN0Q2hlY2tpbicsXG4gIFRyaWdnZXJTZXNzaW9uU3RhcnQ6ICd7d2lkZ2V0SWR9X19wdXJlY2hhdFNlc3Npb25TdGFydCcsXG4gIFRyaWdnZXJEaXNtaXNzVGltZTogJ3t3aWRnZXRJZH1fX3B1cmVjaGF0RGlzbWlzc1RpbWUnLFxuICBUcmlnZ2VyRGlzbWlzc0NvdW50OiAne3dpZGdldElkfV9fcHVyZWNoYXREaXNtaXNzQ291bnQnLFxuICBTZXNzaW9uU3RhcnRUaW1lOiAne3dpZGdldElkfV9fcHVyZWNoYXRfc2Vzc2lvblN0YXJ0VGltZScsXG4gIFRyYWNraW5nVmlzaXRvckNvdW50OiAndmMnLFxuICBUcmFja2luZ1Zpc2l0b3JOdW1iZXI6ICd2bidcbn07XG5leHBvcnQgdmFyIENvb2tpZXMgPSB7XG4gIEh1YnNwb3Q6ICdodWJzcG90dXRrJ1xufTtcbmV4cG9ydCB2YXIgUHJldmlld0FjdGlvbnMgPSB7XG4gIEluYWN0aXZlOiAncHJldmlldzppbmFjdGl2ZScsXG4gIENvbGxhcHNlZDogJ3ByZXZpZXc6Y29sbGFwc2VkJyxcbiAgRW1haWxGb3JtOiAncHJldmlldzplbWFpbC1mb3JtJyxcbiAgQXNrRm9ySW5mbzogJ3ByZXZpZXc6YXNrLWZvci1pbmZvJyxcbiAgQ2hhdHRpbmc6ICdwcmV2aWV3OmNoYXR0aW5nJyxcbiAgQ2hhdEVuZDogJ3ByZXZpZXc6Y2hhdC1lbmQnLFxuICBVbmF2YWlsYWJsZTogJ3ByZXZpZXc6dW5hdmFpbGFibGUnXG59O1xuLyoqXG4gKiBFbnVtc1xuICovXG5cbmV4cG9ydCB2YXIgV2lkZ2V0UG9zaXRpb25zRW51bSA9IHtcbiAgTm90QXZhaWxhYmxlOiAwLFxuICBCb3R0b21MZWZ0OiAxLFxuICBCb3R0b21SaWdodDogMixcbiAgVG9wTGVmdDogMyxcbiAgVG9wUmlnaHQ6IDRcbn07XG5leHBvcnQgdmFyIEF2YWlsYWJpbGl0eVJlYXNvbnNFbnVtID0ge1xuICBBdmFpbGFibGU6IDEsXG4gIE5vT3BlcmF0b3JzOiAyLFxuICBTZXJ2ZXJEb3dudGltZTogMyxcbiAgQWNjb3VudEFjdGl2aXR5OiA0LFxuICBDaGF0UXVvdGFFeGNlZWRlZDogNSxcbiAgV2lkZ2V0RGlzYWJsZWQ6IDYsXG4gIElQSXNCYW5uZWQ6IDdcbn07XG5leHBvcnQgdmFyIFVuYXZhaWxhYmxlQmVoYXZpb3JzRW51bSA9IHtcbiAgSGlkZVdpZGdldDogMCxcbiAgU2hvd01lc3NhZ2U6IDEsXG4gIFNob3dFbWFpbDogMlxufTtcbmV4cG9ydCB2YXIgTWVzc2FnZVR5cGVzRW51bSA9IHtcbiAgTWVzc2FnZTogMCxcbiAgSm9pbjogMSxcbiAgTGVhdmU6IDIsXG4gIENsb3NlOiAzLFxuICBGaWxlOiA0LFxuICBTZXBhcmF0b3I6IDEwMDAsXG4gIE5vdGU6IDEwMDEsXG4gIFVuZnVybExpbms6IDIwMDAsXG4gIFVuZnVybEZpbGU6IDIwMDEsXG4gIFVuZnVybEltYWdlOiAyMDAyLFxuICBVbmZ1cmxHaXBoeTogMjAwMyxcbiAgVW5mdXJsVHdpdHRlcjogMjAwNCxcbiAgVW5mdXJsWW91dHViZTogMjAwNVxufTtcbmV4cG9ydCB2YXIgVXBsb2FkU3RhdHVzZXNFbnVtID0ge1xuICBTdGFydDogMCxcbiAgVXBsb2FkaW5nOiAxLFxuICBVbmF1dGhvcml6ZWQ6IDIsXG4gIEVycm9yOiAzLFxuICBDb21wbGV0ZTogNFxufTtcbmV4cG9ydCB2YXIgRXhwYW5kV2lkZ2V0VGltZW91dFR5cGVzRW51bSA9IHtcbiAgU2l0ZVdpZGU6IDEsXG4gIFNpbmdsZVBhZ2U6IDJcbn07XG5leHBvcnQgdmFyIE1vYmlsZURpc3BsYXlUeXBlc0VudW0gPSB7XG4gIEhpZGRlbjogMCxcbiAgU2FtZUFzRGVza3RvcDogMSxcbiAgTW9iaWxlT3B0aW1pemVkOiAyXG59O1xuZXhwb3J0IHZhciBDbG9zZWRSZWFzb25Db2Rlc0VudW0gPSB7XG4gIENsb3NlZEJ5VXNlcjogMCxcbiAgQ29ubmVjdGlvblRpbWVvdXQ6IDEsXG4gIEluYWN0aXZpdHk6IDIsXG4gIENsb3NlZEJ5T3BlcmF0b3I6IDMsXG4gIE5vT3BlcmF0b3JKb2luZWQ6IDRcbn07XG5leHBvcnQgdmFyIENvbGxhcHNlZFN0eWxlc0VudW0gPSB7XG4gIFRhYjogMSxcbiAgQnV0dG9uOiAyLFxuICBJbWFnZTogMyxcbiAgSW1hZ2VUYWI6IDRcbn07XG5leHBvcnQgdmFyIE92ZXJyaWRlVmlzaXRvclR5cGVzRW51bSA9IHtcbiAgQWxsOiAwLFxuICBSZXR1cm5pbmc6IDEsXG4gIE5ldzogMlxufTtcbi8qKlxuICogTWlzY1xuICovXG5cbmV4cG9ydCB2YXIgTmV3Q2hhdFNlcnZlckV2ZW50cyA9IHtcbiAgQ29udGFjdENoYW5nZWQ6ICdjb250YWN0OmNoYW5nZWQnLFxuICBEaXNjb25uZWN0OiAnZGlzY29ubmVjdCcsXG4gIEZpbGU6ICdmaWxlJyxcbiAgSWRlbnRpZnlTdWNjZXNzOiAnaWRlbnRpZnk6c3VjY2VzcycsXG4gIElkZW50aWZ5RXJyb3I6ICdpZGVudGlmeTplcnJvcicsXG4gIEpvaW5lZDogJ3Jvb206am9pbmVkJyxcbiAgTGVmdDogJ3Jvb206bGVmdCcsXG4gIE1lc3NhZ2U6ICdtZXNzYWdlOnNlbmQnLFxuICBNZXNzYWdlRGVsZXRlZDogJ21lc3NhZ2U6ZGVsZXRlZCcsXG4gIFJvb21EZXN0cm95ZWQ6ICdyb29tOmNsb3NlZCcsXG4gIFJvb21EZXRhaWxzQ2hhbmdlZDogJ3Jvb20uYXR0cmlidXRlczpjaGFuZ2VkJyxcbiAgVHlwaW5nOiAndHlwaW5nJ1xufTtcbmV4cG9ydCB2YXIgQXZhaWxhYmlsaXR5RGVsYXlzID0ge1xuICBBdmFpbGFibGVQb2xsaW5nRGVsYXk6IDIwICogMTAwMCxcbiAgVW5hdmFpbGFibGVQb2xsaW5nRGVsYXk6IDEwICogNjAgKiAxMDAwLFxuICBJbmFjdGl2ZVBvbGxpbmdEZWxheTogMiAqIDEwMDAsXG4gIExhc3RDaGVja1RocmVzaG9sZDogMTIwICogMTAwMFxufTtcbnZhciBVTkFVVEhPUklaRUQgPSA0MDE7XG52YXIgUFJPWFlfQVVUSEVOVElDQVRJT05fUkVRVUlSRUQgPSA0MDc7XG52YXIgUkVRVUVTVF9UT09fTE9ORyA9IDQxMztcbnZhciBVTlNVUFBPUlRFRF9NRURJQV9UWVBFID0gNDE1O1xuZXhwb3J0IHZhciBVcGxvYWRFcnJvck1lc3NhZ2VzID0gKF9VcGxvYWRFcnJvck1lc3NhZ2VzID0ge1xuICBkZWZhdWx0OiAnRmlsZSBTZW5kIEZhaWxlZCdcbn0sIF9kZWZpbmVQcm9wZXJ0eShfVXBsb2FkRXJyb3JNZXNzYWdlcywgVU5BVVRIT1JJWkVELCAnWW91IGFyZSBub3QgYXV0aG9yaXplZCB0byB1cGxvYWQuJyksIF9kZWZpbmVQcm9wZXJ0eShfVXBsb2FkRXJyb3JNZXNzYWdlcywgUFJPWFlfQVVUSEVOVElDQVRJT05fUkVRVUlSRUQsICdZb3UgYXJlIG5vdCBhdXRob3JpemVkIHRvIHVwbG9hZC4nKSwgX2RlZmluZVByb3BlcnR5KF9VcGxvYWRFcnJvck1lc3NhZ2VzLCBSRVFVRVNUX1RPT19MT05HLCAnVGhpcyBmaWxlIGlzIHRvbyBsYXJnZS4gMTBNQiBMaW1pdC4nKSwgX2RlZmluZVByb3BlcnR5KF9VcGxvYWRFcnJvck1lc3NhZ2VzLCBVTlNVUFBPUlRFRF9NRURJQV9UWVBFLCAnVGhpcyBmaWxlIHR5cGUgaXMgbm90IHN1cHBvcnRlZC4nKSwgX1VwbG9hZEVycm9yTWVzc2FnZXMpO1xuZXhwb3J0IHZhciBGaWxlTWVzc2FnZVJlZ2V4ID0gLyguKilcXCgoaHR0cC4qKVxcKVxccyguKilcXHPigKJcXHMoLiopLztcbmV4cG9ydCB2YXIgRW1vamlSZWdleCA9IC8oW1xccy5dfCZuYnNwO3xeKSg6W2Etel9dezIsfSkoPz1bXFxzLl18Jm5ic3A7fCQpL2dpbTtcbmV4cG9ydCB2YXIgQ29sb25SZWdleCA9IC8oXjp8OiQpL2dpbTtcbmV4cG9ydCB2YXIgQ3VyYXRlZEVtb2ppcyA9ICfwn5GNLPCfkY4s8J+Zgizwn5iELPCfmIIs8J+OiSzinaTvuI8s8J+RjyzinIUs8J+SpSc7IC8vIDJNQlxuXG5leHBvcnQgdmFyIE1heFVuZnVybFNpemUgPSAyICogTWF0aC5wb3coMTAsIDYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW1hZ2ljLW51bWJlcnNcblxuZXhwb3J0IHZhciBTY3JvbGxCdWZmZXJQeCA9IDUwO1xuZXhwb3J0IHZhciBNYXhNZXNzZW5nZXJIZWlnaHQgPSA3MDA7XG5leHBvcnQgdmFyIE1lc3NlbmdlckNocm9tZUhlaWdodE9mZnNldCA9IDkwOyIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBqb2luLCBwaXBlLCB0YWlsIH0gZnJvbSAncmFtZGEnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0IHsgb2JqZWN0VG9RdWVyeVN0cmluZyB9IGZyb20gJ3dpZGdldF9zaGFyZWQvdXJsJztcbmltcG9ydCB7IFVuYXZhaWxhYmxlQmVoYXZpb3JzRW51bSwgV2lkZ2V0UG9zaXRpb25zRW51bSB9IGZyb20gJ21vZGVybl93aWRnZXQvYXBwL2NvbnN0YW50cyc7XG52YXIgUE9QUEVEX09VVF9DSEVDS19JTlRFUlZBTCA9IDQwMDsgLy8gVGhlIGFjdGlvbnMgZGlzcGF0Y2hlZCBoZXJlIGFyZSBoYW5kIGNyYWZ0ZWQgYXMgd2UgY2Fubm90IGltcG9ydCBhbnkgYWN0aW9ucyBmcm9tIHRoZSBzdG9yZVxuLy8gaW4gdGhpcyBmaWxlLiBUaGF0J3MgYmVjYXVzZSB0aGlzIGZpbGUgaXMgaW1wb3J0ZWQgYW5kIHVzZWQgd2F5IGJlZm9yZSB0aGUgc3RvcmUgaXMgc2V0dXBcbi8vIHNvIGlmIGFueSBhY3Rpb25zIGFyZSBpbXBvcnRlZCBoZXJlLCB0aGV5IHdpbGwgYnJlYWsuXG5cbnZhciB1cGRhdGVDb250YWN0UHJvcGVydHkgPSBmdW5jdGlvbiB1cGRhdGVDb250YWN0UHJvcGVydHkoc3RvcmUsIHByb3AsIHZhbHVlKSB7XG4gIHZhciBfc3RvcmUkZ2V0U3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpLFxuICAgICAgY29udGFjdCA9IF9zdG9yZSRnZXRTdGF0ZS5jb250YWN0O1xuXG4gIHN0b3JlLmRpc3BhdGNoKHtcbiAgICB0eXBlOiAnY29udGFjdC9VUERBVEUnLFxuICAgIHBheWxvYWQ6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29udGFjdCksIHt9LCBfZGVmaW5lUHJvcGVydHkoe30sIHByb3AsIHZhbHVlKSlcbiAgfSk7XG59O1xuXG52YXIgdXBkYXRlU2V0dGluZyA9IGZ1bmN0aW9uIHVwZGF0ZVNldHRpbmcoc3RvcmUsIHBheWxvYWQpIHtcbiAgc3RvcmUuZGlzcGF0Y2goe1xuICAgIHR5cGU6ICdzZXR0aW5ncy9TRVRUSU5HX1VQREFURScsXG4gICAgcGF5bG9hZDogcGF5bG9hZFxuICB9KTtcbn07XG5cbnZhciB1cGRhdGVSZXNvdXJjZSA9IGZ1bmN0aW9uIHVwZGF0ZVJlc291cmNlKHN0b3JlLCBwYXlsb2FkKSB7XG4gIHN0b3JlLmRpc3BhdGNoKHtcbiAgICB0eXBlOiAnc2V0dGluZ3MvU1RSSU5HX1JFU09VUkNFX1VQREFURScsXG4gICAgcGF5bG9hZDogcGF5bG9hZFxuICB9KTtcbn07XG5cbnZhciBjaGVja1BvcHBlZE91dEludGVydmFsID0gbnVsbDtcblxudmFyIHBvcG91dENoYXQgPSBmdW5jdGlvbiBwb3BvdXRDaGF0KHN0b3JlKSB7XG4gIGlmICh3aW5kb3cucHVyZWNoYXRQb3BwZWRPdXRXaW5kb3cpIHtcbiAgICB3aW5kb3cucHVyZWNoYXRQb3BwZWRPdXRXaW5kb3cuZm9jdXMoKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoY2hlY2tQb3BwZWRPdXRJbnRlcnZhbCkgY2xlYXJJbnRlcnZhbChjaGVja1BvcHBlZE91dEludGVydmFsKTtcbiAgICBjaGVja1BvcHBlZE91dEludGVydmFsID0gbnVsbDtcbiAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBwYXJhbXMgPSBvYmplY3RUb1F1ZXJ5U3RyaW5nKHtcbiAgICAgIHdpZGdldElkOiBzdGF0ZS5zZXR0aW5ncy5pZCxcbiAgICAgIHVzZXJJZDogc3RhdGUuY29udmVyc2F0aW9uLnVzZXJJZCxcbiAgICAgIGRpc3BsYXlOYW1lOiBzdGF0ZS5jb250YWN0LmZpcnN0TmFtZSxcbiAgICAgIGF1dGhUb2tlbjogc3RhdGUuY29udmVyc2F0aW9uLmF1dGhUb2tlbixcbiAgICAgIHJvb21JZDogc3RhdGUuY29udmVyc2F0aW9uLnJvb21JZCxcbiAgICAgIHJvb21UeXBlOiBzdGF0ZS5jb252ZXJzYXRpb24ucm9vbVR5cGUsXG4gICAgICBjaGF0SWQ6IHN0YXRlLmNvbnZlcnNhdGlvbi5jaGF0SWQsXG4gICAgICBvcmlnaW46IHN0YXRlLnNldHRpbmdzLm9yaWdpbixcbiAgICAgIGNvbnRhY3RJZDogc3RhdGUuY29udGFjdC5pZFxuICAgIH0pO1xuICAgIHZhciB1cmwgPSBcIlwiLmNvbmNhdChjb25maWcuZGFzaGJvYXJkUm9vdFVybCwgXCIvdmlzaXRvcndpZGdldC9jaGF0d2luZG93P1wiKS5jb25jYXQocGFyYW1zKTtcbiAgICB3aW5kb3cucHVyZWNoYXRQb3BwZWRPdXRXaW5kb3cgPSBzdGF0ZS5hcHAuaXNNb2JpbGUgPyB3aW5kb3cub3Blbih1cmwsICdfYmxhbmsnKSA6IHdpbmRvdy5vcGVuKHVybCwgJ3B1cmVjaGF0LXdpbmRvdycsICdtZW51YmFyPW5vLCBsb2NhdGlvbj1ubywgcmVzaXphYmxlPXllcywgc2Nyb2xsYmFycz1ubywgc3RhdHVzPW5vLCB3aWR0aD00ODAsIGhlaWdodD02NDAnKTtcbiAgICBjaGVja1BvcHBlZE91dEludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gIT09IGlzIHJlcXVpcmVkIGZvciBjb21wYXRpYmlsaXR5IHdpdGggT3BlcmEgOihcbiAgICAgIGlmICh3aW5kb3cucHVyZWNoYXRQb3BwZWRPdXRXaW5kb3cuY2xvc2VkICE9PSBmYWxzZSkge1xuICAgICAgICBjbGVhckludGVydmFsKGNoZWNrUG9wcGVkT3V0SW50ZXJ2YWwpO1xuICAgICAgICBjaGVja1BvcHBlZE91dEludGVydmFsID0gbnVsbDtcbiAgICAgICAgd2luZG93LnB1cmVjaGF0UG9wcGVkT3V0V2luZG93ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LCBQT1BQRURfT1VUX0NIRUNLX0lOVEVSVkFMKTtcbiAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAndWkvQ0hBVF9QT1BQRURfT1VUJyxcbiAgICAgIHBheWxvYWQ6IG51bGxcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIG1hcFVuYXZhaWxhYmxlQmVoYXZpb3IgPSBmdW5jdGlvbiBtYXBVbmF2YWlsYWJsZUJlaGF2aW9yKHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgaGlkZTogVW5hdmFpbGFibGVCZWhhdmlvcnNFbnVtLkhpZGVXaWRnZXQsXG4gICAgZW1haWw6IFVuYXZhaWxhYmxlQmVoYXZpb3JzRW51bS5TaG93RW1haWwsXG4gICAgbWVzc2FnZTogVW5hdmFpbGFibGVCZWhhdmlvcnNFbnVtLlNob3dNZXNzYWdlXG4gIH1bdmFsdWVdIHx8IFVuYXZhaWxhYmxlQmVoYXZpb3JzRW51bS5IaWRlV2lkZ2V0O1xufTtcblxudmFyIG1hcFBvc2l0aW9uID0gZnVuY3Rpb24gbWFwUG9zaXRpb24odmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBib3R0b21MZWZ0OiBXaWRnZXRQb3NpdGlvbnNFbnVtLkJvdHRvbUxlZnQsXG4gICAgYm90dG9tUmlnaHQ6IFdpZGdldFBvc2l0aW9uc0VudW0uQm90dG9tUmlnaHQsXG4gICAgdG9wTGVmdDogV2lkZ2V0UG9zaXRpb25zRW51bS5Ub3BMZWZ0LFxuICAgIHRvcFJpZ2h0OiBXaWRnZXRQb3NpdGlvbnNFbnVtLlRvcFJpZ2h0XG4gIH1bdmFsdWVdIHx8IFdpZGdldFBvc2l0aW9uc0VudW0uQm90dG9tUmlnaHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICd2aXNpdG9yLm5hbWUnOiBmdW5jdGlvbiB2aXNpdG9yTmFtZShzdG9yZSwgdmFsdWUpIHtcbiAgICB1cGRhdGVDb250YWN0UHJvcGVydHkoc3RvcmUsICduYW1lJywgdmFsdWUpO1xuICAgIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KCcgJyk7XG4gICAgdXBkYXRlQ29udGFjdFByb3BlcnR5KHN0b3JlLCAnZmlyc3ROYW1lJywgc3BsaXRbMF0pO1xuICAgIHVwZGF0ZUNvbnRhY3RQcm9wZXJ0eShzdG9yZSwgJ2xhc3ROYW1lJywgcGlwZSh0YWlsLCBqb2luKCcgJykpKHNwbGl0KSB8fCAnJyk7XG4gIH0sXG4gICd2aXNpdG9yLmZpcnN0TmFtZSc6IGZ1bmN0aW9uIHZpc2l0b3JGaXJzdE5hbWUoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUNvbnRhY3RQcm9wZXJ0eShzdG9yZSwgJ2ZpcnN0TmFtZScsIHZhbHVlKTtcbiAgfSxcbiAgJ3Zpc2l0b3IubGFzdE5hbWUnOiBmdW5jdGlvbiB2aXNpdG9yTGFzdE5hbWUoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUNvbnRhY3RQcm9wZXJ0eShzdG9yZSwgJ2xhc3ROYW1lJywgdmFsdWUpO1xuICB9LFxuICAndmlzaXRvci5lbWFpbCc6IGZ1bmN0aW9uIHZpc2l0b3JFbWFpbChzdG9yZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlQ29udGFjdFByb3BlcnR5KHN0b3JlLCAnZW1haWwnLCB2YWx1ZSk7XG4gIH0sXG4gICd2aXNpdG9yLmNvbXBhbnknOiBmdW5jdGlvbiB2aXNpdG9yQ29tcGFueShzdG9yZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlQ29udGFjdFByb3BlcnR5KHN0b3JlLCAnY29tcGFueScsIHZhbHVlKTtcbiAgfSxcbiAgJ3Zpc2l0b3IucGhvbmVOdW1iZXInOiBmdW5jdGlvbiB2aXNpdG9yUGhvbmVOdW1iZXIoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZUNvbnRhY3RQcm9wZXJ0eShzdG9yZSwgJ3Bob25lJywgdmFsdWUpO1xuICB9LFxuICAndmlzaXRvci5xdWVzdGlvbic6IGZ1bmN0aW9uIHZpc2l0b3JRdWVzdGlvbihzdG9yZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlQ29udGFjdFByb3BlcnR5KHN0b3JlLCAncXVlc3Rpb24nLCB2YWx1ZSk7XG4gIH0sXG4gICdjaGF0Ym94LnVuYXZhaWxhYmxlQmVoYXZpb3InOiBmdW5jdGlvbiBjaGF0Ym94VW5hdmFpbGFibGVCZWhhdmlvcihzdG9yZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlU2V0dGluZyhzdG9yZSwge1xuICAgICAgcHJvcGVydHk6ICd1bmF2YWlsYWJsZUJlaGF2aW9yJyxcbiAgICAgIHZhbHVlOiBtYXBVbmF2YWlsYWJsZUJlaGF2aW9yKHZhbHVlKVxuICAgIH0pO1xuICB9LFxuICAnY2hhdGJveC5wb3NpdGlvbic6IGZ1bmN0aW9uIGNoYXRib3hQb3NpdGlvbihzdG9yZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlU2V0dGluZyhzdG9yZSwge1xuICAgICAgcHJvcGVydHk6ICdwb3NpdGlvbicsXG4gICAgICB2YWx1ZTogbWFwUG9zaXRpb24odmFsdWUpXG4gICAgfSk7XG4gIH0sXG4gICdjaGF0Ym94LmFza0Zvck5hbWUnOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yTmFtZShzdG9yZSwgdmFsdWUpIHtcbiAgICB1cGRhdGVTZXR0aW5nKHN0b3JlLCB7XG4gICAgICBwcm9wZXJ0eTogJ2Fza0ZvckZpcnN0TmFtZScsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbiAgICB1cGRhdGVTZXR0aW5nKHN0b3JlLCB7XG4gICAgICBwcm9wZXJ0eTogJ2Fza0Zvckxhc3ROYW1lJyxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuICB9LFxuICAnY2hhdGJveC5hc2tGb3JGaXJzdE5hbWUnOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yRmlyc3ROYW1lKHN0b3JlLCB2YWx1ZSkge1xuICAgIHJldHVybiB1cGRhdGVTZXR0aW5nKHN0b3JlLCB7XG4gICAgICBwcm9wZXJ0eTogJ2Fza0ZvckZpcnN0TmFtZScsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yTGFzdE5hbWUnOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yTGFzdE5hbWUoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldHRpbmcoc3RvcmUsIHtcbiAgICAgIHByb3BlcnR5OiAnYXNrRm9yTGFzdE5hbWUnLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gIH0sXG4gICdjaGF0Ym94LmFza0ZvckVtYWlsJzogZnVuY3Rpb24gY2hhdGJveEFza0ZvckVtYWlsKHN0b3JlLCB2YWx1ZSkge1xuICAgIHJldHVybiB1cGRhdGVTZXR0aW5nKHN0b3JlLCB7XG4gICAgICBwcm9wZXJ0eTogJ2Fza0ZvckVtYWlsJyxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuICB9LFxuICAnY2hhdGJveC5hc2tGb3JDb21wYW55JzogZnVuY3Rpb24gY2hhdGJveEFza0ZvckNvbXBhbnkoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldHRpbmcoc3RvcmUsIHtcbiAgICAgIHByb3BlcnR5OiAnYXNrRm9yQ29tcGFueScsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yUGhvbmVOdW1iZXInOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yUGhvbmVOdW1iZXIoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldHRpbmcoc3RvcmUsIHtcbiAgICAgIHByb3BlcnR5OiAnYXNrRm9yUGhvbmVOdW1iZXInLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gIH0sXG4gICdjaGF0Ym94LmVuYWJsZVRyYW5zY3JpcHREb3dubG9hZCc6IGZ1bmN0aW9uIGNoYXRib3hFbmFibGVUcmFuc2NyaXB0RG93bmxvYWQoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldHRpbmcoc3RvcmUsIHtcbiAgICAgIHByb3BlcnR5OiAnZG93bmxvYWRUcmFuc2NyaXB0JyxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuICB9LFxuICAnY2hhdGJveC5hc2tGb3JSYXRpbmcnOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yUmF0aW5nKHN0b3JlLCB2YWx1ZSkge1xuICAgIHJldHVybiB1cGRhdGVTZXR0aW5nKHN0b3JlLCB7XG4gICAgICBwcm9wZXJ0eTogJ2Fza0ZvclJhdGluZycsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcbiAgfSxcbiAgJ2NoYXRib3guZXhwYW5kZWQnOiBmdW5jdGlvbiBjaGF0Ym94RXhwYW5kZWQoc3RvcmUsIHZhbHVlKSB7XG4gICAgdmFyIF9zdG9yZSRnZXRTdGF0ZTIgPSBzdG9yZS5nZXRTdGF0ZSgpLFxuICAgICAgICBzZXR0aW5ncyA9IF9zdG9yZSRnZXRTdGF0ZTIuc2V0dGluZ3M7XG5cbiAgICBpZiAoc2V0dGluZ3MuZm9yY2VQb3BvdXQpIHtcbiAgICAgIHBvcG91dENoYXQoc3RvcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IHZhbHVlID8gJ2FwcC9NRVNTRU5HRVJfRVhQQU5EJyA6ICdhcHAvTUVTU0VOR0VSX0NPTExBUFNFJyxcbiAgICAgICAgcGF5bG9hZDogdmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgJ2NoYXRib3gudmlzaWJsZSc6IGZ1bmN0aW9uIGNoYXRib3hWaXNpYmxlKHN0b3JlLCB2YWx1ZSkge1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnYXBwL1ZJU0lCSUxJVFlfVVBEQVRFJyxcbiAgICAgIHBheWxvYWQ6IHZhbHVlXG4gICAgfSk7XG4gIH0sXG4gICdjaGF0Ym94LmZpcnN0TWVzc2FnZSc6IGZ1bmN0aW9uIGNoYXRib3hGaXJzdE1lc3NhZ2Uoc3RvcmUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVJlc291cmNlKHN0b3JlLCB7XG4gICAgICBwcm9wZXJ0eTogJ2NoYXRfc3RhcnRlZE1lc3NhZ2UnLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSk7XG4gIH1cbn07IiwiaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5MS5qc1wiO1xuaW1wb3J0IGN1cnJ5TiBmcm9tIFwiLi9jdXJyeU4uanNcIjtcbi8qKlxuICogUmV0dXJucyBhIGN1cnJpZWQgZXF1aXZhbGVudCBvZiB0aGUgcHJvdmlkZWQgZnVuY3Rpb24uIFRoZSBjdXJyaWVkIGZ1bmN0aW9uXG4gKiBoYXMgdHdvIHVudXN1YWwgY2FwYWJpbGl0aWVzLiBGaXJzdCwgaXRzIGFyZ3VtZW50cyBuZWVkbid0IGJlIHByb3ZpZGVkIG9uZVxuICogYXQgYSB0aW1lLiBJZiBgZmAgaXMgYSB0ZXJuYXJ5IGZ1bmN0aW9uIGFuZCBgZ2AgaXMgYFIuY3VycnkoZilgLCB0aGVcbiAqIGZvbGxvd2luZyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAgIC0gYGcoMSkoMikoMylgXG4gKiAgIC0gYGcoMSkoMiwgMylgXG4gKiAgIC0gYGcoMSwgMikoMylgXG4gKiAgIC0gYGcoMSwgMiwgMylgXG4gKlxuICogU2Vjb25kbHksIHRoZSBzcGVjaWFsIHBsYWNlaG9sZGVyIHZhbHVlIFtgUi5fX2BdKCNfXykgbWF5IGJlIHVzZWQgdG8gc3BlY2lmeVxuICogXCJnYXBzXCIsIGFsbG93aW5nIHBhcnRpYWwgYXBwbGljYXRpb24gb2YgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyxcbiAqIHJlZ2FyZGxlc3Mgb2YgdGhlaXIgcG9zaXRpb25zLiBJZiBgZ2AgaXMgYXMgYWJvdmUgYW5kIGBfYCBpcyBbYFIuX19gXSgjX18pLFxuICogdGhlIGZvbGxvd2luZyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAgIC0gYGcoMSwgMiwgMylgXG4gKiAgIC0gYGcoXywgMiwgMykoMSlgXG4gKiAgIC0gYGcoXywgXywgMykoMSkoMilgXG4gKiAgIC0gYGcoXywgXywgMykoMSwgMilgXG4gKiAgIC0gYGcoXywgMikoMSkoMylgXG4gKiAgIC0gYGcoXywgMikoMSwgMylgXG4gKiAgIC0gYGcoXywgMikoXywgMykoMSlgXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgKCogLT4gYSkgLT4gKCogLT4gYSlcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIG5ldywgY3VycmllZCBmdW5jdGlvbi5cbiAqIEBzZWUgUi5jdXJyeU4sIFIucGFydGlhbFxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IGFkZEZvdXJOdW1iZXJzID0gKGEsIGIsIGMsIGQpID0+IGEgKyBiICsgYyArIGQ7XG4gKlxuICogICAgICBjb25zdCBjdXJyaWVkQWRkRm91ck51bWJlcnMgPSBSLmN1cnJ5KGFkZEZvdXJOdW1iZXJzKTtcbiAqICAgICAgY29uc3QgZiA9IGN1cnJpZWRBZGRGb3VyTnVtYmVycygxLCAyKTtcbiAqICAgICAgY29uc3QgZyA9IGYoMyk7XG4gKiAgICAgIGcoNCk7IC8vPT4gMTBcbiAqL1xuXG52YXIgY3VycnkgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MShmdW5jdGlvbiBjdXJyeShmbikge1xuICByZXR1cm4gY3VycnlOKGZuLmxlbmd0aCwgZm4pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGN1cnJ5OyIsImltcG9ydCBpbnZva2VyIGZyb20gXCIuL2ludm9rZXIuanNcIjtcbi8qKlxuICogU3BsaXRzIGEgc3RyaW5nIGludG8gYW4gYXJyYXkgb2Ygc3RyaW5ncyBiYXNlZCBvbiB0aGUgZ2l2ZW5cbiAqIHNlcGFyYXRvci5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBzaWcgKFN0cmluZyB8IFJlZ0V4cCkgLT4gU3RyaW5nIC0+IFtTdHJpbmddXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IHNlcCBUaGUgcGF0dGVybi5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBpbnRvIGFuIGFycmF5LlxuICogQHJldHVybiB7QXJyYXl9IFRoZSBhcnJheSBvZiBzdHJpbmdzIGZyb20gYHN0cmAgc2VwYXJhdGVkIGJ5IGBzZXBgLlxuICogQHNlZSBSLmpvaW5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBjb25zdCBwYXRoQ29tcG9uZW50cyA9IFIuc3BsaXQoJy8nKTtcbiAqICAgICAgUi50YWlsKHBhdGhDb21wb25lbnRzKCcvdXNyL2xvY2FsL2Jpbi9ub2RlJykpOyAvLz0+IFsndXNyJywgJ2xvY2FsJywgJ2JpbicsICdub2RlJ11cbiAqXG4gKiAgICAgIFIuc3BsaXQoJy4nLCAnYS5iLmMueHl6LmQnKTsgLy89PiBbJ2EnLCAnYicsICdjJywgJ3h5eicsICdkJ11cbiAqL1xuXG52YXIgc3BsaXQgPVxuLyojX19QVVJFX18qL1xuaW52b2tlcigxLCAnc3BsaXQnKTtcbmV4cG9ydCBkZWZhdWx0IHNwbGl0OyIsImltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbmltcG9ydCBjdXJyeU4gZnJvbSBcIi4vY3VycnlOLmpzXCI7XG4vKipcbiAqIFJldHVybnMgYSBuZXcgZnVuY3Rpb24gbXVjaCBsaWtlIHRoZSBzdXBwbGllZCBvbmUsIGV4Y2VwdCB0aGF0IHRoZSBmaXJzdCB0d29cbiAqIGFyZ3VtZW50cycgb3JkZXIgaXMgcmV2ZXJzZWQuXG4gKlxuICogQGZ1bmNcbiAqIEBtZW1iZXJPZiBSXG4gKiBAc2luY2UgdjAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBzaWcgKChhLCBiLCBjLCAuLi4pIC0+IHopIC0+IChiIC0+IGEgLT4gYyAtPiAuLi4gLT4geilcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBpbnZva2Ugd2l0aCBpdHMgZmlyc3QgdHdvIHBhcmFtZXRlcnMgcmV2ZXJzZWQuXG4gKiBAcmV0dXJuIHsqfSBUaGUgcmVzdWx0IG9mIGludm9raW5nIGBmbmAgd2l0aCBpdHMgZmlyc3QgdHdvIHBhcmFtZXRlcnMnIG9yZGVyIHJldmVyc2VkLlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IG1lcmdlVGhyZWUgPSAoYSwgYiwgYykgPT4gW10uY29uY2F0KGEsIGIsIGMpO1xuICpcbiAqICAgICAgbWVyZ2VUaHJlZSgxLCAyLCAzKTsgLy89PiBbMSwgMiwgM11cbiAqXG4gKiAgICAgIFIuZmxpcChtZXJnZVRocmVlKSgxLCAyLCAzKTsgLy89PiBbMiwgMSwgM11cbiAqIEBzeW1iIFIuZmxpcChmKShhLCBiLCBjKSA9IGYoYiwgYSwgYylcbiAqL1xuXG52YXIgZmxpcCA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIGZsaXAoZm4pIHtcbiAgcmV0dXJuIGN1cnJ5Tihmbi5sZW5ndGgsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuICAgIGFyZ3NbMF0gPSBiO1xuICAgIGFyZ3NbMV0gPSBhO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZmxpcDsiLCIvKipcbiAqIERldGVybWluZSBpZiB0aGUgcGFzc2VkIGFyZ3VtZW50IGlzIGFuIGludGVnZXIuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gblxuICogQGNhdGVnb3J5IFR5cGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24gX2lzSW50ZWdlcihuKSB7XG4gIHJldHVybiBuIDw8IDAgPT09IG47XG59OyIsImltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSBcIi4vaW50ZXJuYWwvX2lzU3RyaW5nLmpzXCI7XG4vKipcbiAqIFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIHRoZSBnaXZlbiBsaXN0IG9yIHN0cmluZy4gSWYgbiBpcyBuZWdhdGl2ZSB0aGVcbiAqIGVsZW1lbnQgYXQgaW5kZXggbGVuZ3RoICsgbiBpcyByZXR1cm5lZC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMaXN0XG4gKiBAc2lnIE51bWJlciAtPiBbYV0gLT4gYSB8IFVuZGVmaW5lZFxuICogQHNpZyBOdW1iZXIgLT4gU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldFxuICogQHBhcmFtIHsqfSBsaXN0XG4gKiBAcmV0dXJuIHsqfVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIGNvbnN0IGxpc3QgPSBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ3F1dXgnXTtcbiAqICAgICAgUi5udGgoMSwgbGlzdCk7IC8vPT4gJ2JhcidcbiAqICAgICAgUi5udGgoLTEsIGxpc3QpOyAvLz0+ICdxdXV4J1xuICogICAgICBSLm50aCgtOTksIGxpc3QpOyAvLz0+IHVuZGVmaW5lZFxuICpcbiAqICAgICAgUi5udGgoMiwgJ2FiYycpOyAvLz0+ICdjJ1xuICogICAgICBSLm50aCgzLCAnYWJjJyk7IC8vPT4gJydcbiAqIEBzeW1iIFIubnRoKC0xLCBbYSwgYiwgY10pID0gY1xuICogQHN5bWIgUi5udGgoMCwgW2EsIGIsIGNdKSA9IGFcbiAqIEBzeW1iIFIubnRoKDEsIFthLCBiLCBjXSkgPSBiXG4gKi9cblxudmFyIG50aCA9XG4vKiNfX1BVUkVfXyovXG5fY3VycnkyKGZ1bmN0aW9uIG50aChvZmZzZXQsIGxpc3QpIHtcbiAgdmFyIGlkeCA9IG9mZnNldCA8IDAgPyBsaXN0Lmxlbmd0aCArIG9mZnNldCA6IG9mZnNldDtcbiAgcmV0dXJuIF9pc1N0cmluZyhsaXN0KSA/IGxpc3QuY2hhckF0KGlkeCkgOiBsaXN0W2lkeF07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbnRoOyIsImltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbmltcG9ydCBfaXNJbnRlZ2VyIGZyb20gXCIuL2ludGVybmFsL19pc0ludGVnZXIuanNcIjtcbmltcG9ydCBudGggZnJvbSBcIi4vbnRoLmpzXCI7XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgdmFsdWVzIGF0IGdpdmVuIHBhdGhzIG9mIGFuIG9iamVjdC5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4yNy4xXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAdHlwZWRlZm4gSWR4ID0gW1N0cmluZyB8IEludF1cbiAqIEBzaWcgW0lkeF0gLT4ge2F9IC0+IFthIHwgVW5kZWZpbmVkXVxuICogQHBhcmFtIHtBcnJheX0gcGF0aHNBcnJheSBUaGUgYXJyYXkgb2YgcGF0aHMgdG8gYmUgZmV0Y2hlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byByZXRyaWV2ZSB0aGUgbmVzdGVkIHByb3BlcnRpZXMgZnJvbS5cbiAqIEByZXR1cm4ge0FycmF5fSBBIGxpc3QgY29uc2lzdGluZyBvZiB2YWx1ZXMgYXQgcGF0aHMgc3BlY2lmaWVkIGJ5IFwicGF0aHNBcnJheVwiLlxuICogQHNlZSBSLnBhdGhcbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnBhdGhzKFtbJ2EnLCAnYiddLCBbJ3AnLCAwLCAncSddXSwge2E6IHtiOiAyfSwgcDogW3txOiAzfV19KTsgLy89PiBbMiwgM11cbiAqICAgICAgUi5wYXRocyhbWydhJywgJ2InXSwgWydwJywgJ3InXV0sIHthOiB7YjogMn0sIHA6IFt7cTogM31dfSk7IC8vPT4gWzIsIHVuZGVmaW5lZF1cbiAqL1xuXG52YXIgcGF0aHMgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MihmdW5jdGlvbiBwYXRocyhwYXRoc0FycmF5LCBvYmopIHtcbiAgcmV0dXJuIHBhdGhzQXJyYXkubWFwKGZ1bmN0aW9uIChwYXRocykge1xuICAgIHZhciB2YWwgPSBvYmo7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIHA7XG5cbiAgICB3aGlsZSAoaWR4IDwgcGF0aHMubGVuZ3RoKSB7XG4gICAgICBpZiAodmFsID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwID0gcGF0aHNbaWR4XTtcbiAgICAgIHZhbCA9IF9pc0ludGVnZXIocCkgPyBudGgocCwgdmFsKSA6IHZhbFtwXTtcbiAgICAgIGlkeCArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGhzOyIsImltcG9ydCBfY3VycnkyIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTIuanNcIjtcbmltcG9ydCBwYXRocyBmcm9tIFwiLi9wYXRocy5qc1wiO1xuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoLlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjIuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHR5cGVkZWZuIElkeCA9IFN0cmluZyB8IEludFxuICogQHNpZyBbSWR4XSAtPiB7YX0gLT4gYSB8IFVuZGVmaW5lZFxuICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byB1c2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcmV0cmlldmUgdGhlIG5lc3RlZCBwcm9wZXJ0eSBmcm9tLlxuICogQHJldHVybiB7Kn0gVGhlIGRhdGEgYXQgYHBhdGhgLlxuICogQHNlZSBSLnByb3AsIFIubnRoXG4gKiBAZXhhbXBsZVxuICpcbiAqICAgICAgUi5wYXRoKFsnYScsICdiJ10sIHthOiB7YjogMn19KTsgLy89PiAyXG4gKiAgICAgIFIucGF0aChbJ2EnLCAnYiddLCB7Yzoge2I6IDJ9fSk7IC8vPT4gdW5kZWZpbmVkXG4gKiAgICAgIFIucGF0aChbJ2EnLCAnYicsIDBdLCB7YToge2I6IFsxLCAyLCAzXX19KTsgLy89PiAxXG4gKiAgICAgIFIucGF0aChbJ2EnLCAnYicsIC0yXSwge2E6IHtiOiBbMSwgMiwgM119fSk7IC8vPT4gMlxuICovXG5cbnZhciBwYXRoID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTIoZnVuY3Rpb24gcGF0aChwYXRoQXIsIG9iaikge1xuICByZXR1cm4gcGF0aHMoW3BhdGhBcl0sIG9iailbMF07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcGF0aDsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBjdXJyeSwgZmxpcCwgcGlwZSwgc3BsaXQsIHBhdGggfSBmcm9tICdyYW1kYSc7XG5pbXBvcnQgeyBVbmF2YWlsYWJsZUJlaGF2aW9yc0VudW0sIFdpZGdldFBvc2l0aW9uc0VudW0gfSBmcm9tICdtb2Rlcm5fd2lkZ2V0L2FwcC9jb25zdGFudHMnO1xuXG52YXIgbWFwVW5hdmFpbGFibGVCZWhhdmlvciA9IGZ1bmN0aW9uIG1hcFVuYXZhaWxhYmxlQmVoYXZpb3IodmFsdWUpIHtcbiAgdmFyIF9VbmF2YWlsYWJsZUJlaGF2aW9ycztcblxuICByZXR1cm4gKF9VbmF2YWlsYWJsZUJlaGF2aW9ycyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX1VuYXZhaWxhYmxlQmVoYXZpb3JzLCBVbmF2YWlsYWJsZUJlaGF2aW9yc0VudW0uSGlkZVdpZGdldCwgJ2hpZGUnKSwgX2RlZmluZVByb3BlcnR5KF9VbmF2YWlsYWJsZUJlaGF2aW9ycywgVW5hdmFpbGFibGVCZWhhdmlvcnNFbnVtLlNob3dFbWFpbCwgJ2VtYWlsJyksIF9kZWZpbmVQcm9wZXJ0eShfVW5hdmFpbGFibGVCZWhhdmlvcnMsIFVuYXZhaWxhYmxlQmVoYXZpb3JzRW51bS5TaG93TWVzc2FnZSwgJ21lc3NhZ2UnKSwgX1VuYXZhaWxhYmxlQmVoYXZpb3JzKVt2YWx1ZV0gfHwgJ2hpZGUnO1xufTtcblxudmFyIG1hcFBvc2l0aW9uID0gZnVuY3Rpb24gbWFwUG9zaXRpb24odmFsdWUpIHtcbiAgdmFyIF9XaWRnZXRQb3NpdGlvbnNFbnVtJDtcblxuICByZXR1cm4gKF9XaWRnZXRQb3NpdGlvbnNFbnVtJCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX1dpZGdldFBvc2l0aW9uc0VudW0kLCBXaWRnZXRQb3NpdGlvbnNFbnVtLkJvdHRvbUxlZnQsICdib3R0b21MZWZ0JyksIF9kZWZpbmVQcm9wZXJ0eShfV2lkZ2V0UG9zaXRpb25zRW51bSQsIFdpZGdldFBvc2l0aW9uc0VudW0uQm90dG9tUmlnaHQsICdib3R0b21SaWdodCcpLCBfZGVmaW5lUHJvcGVydHkoX1dpZGdldFBvc2l0aW9uc0VudW0kLCBXaWRnZXRQb3NpdGlvbnNFbnVtLlRvcExlZnQsICd0b3BMZWZ0JyksIF9kZWZpbmVQcm9wZXJ0eShfV2lkZ2V0UG9zaXRpb25zRW51bSQsIFdpZGdldFBvc2l0aW9uc0VudW0uVG9wUmlnaHQsICd0b3BSaWdodCcpLCBfV2lkZ2V0UG9zaXRpb25zRW51bSQpW3ZhbHVlXSB8fCAnYm90dG9tUmlnaHQnO1xufTtcblxudmFyIGdldEZyb21TdG9yZSA9IGN1cnJ5KGZ1bmN0aW9uIChzdG9yZSwgcHJvcCkge1xuICByZXR1cm4gcGlwZShzcGxpdCgnLicpLCBmbGlwKHBhdGgpKHN0b3JlLmdldFN0YXRlKCkpKShwcm9wKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQge1xuICAnY2hhdGJveC5hdmFpbGFibGUnOiBmdW5jdGlvbiBjaGF0Ym94QXZhaWxhYmxlKHN0b3JlKSB7XG4gICAgcmV0dXJuIGdldEZyb21TdG9yZShzdG9yZSwgJ2F2YWlsYWJpbGl0eS5pc09wZXJhdG9yQXZhaWxhYmxlJyk7XG4gIH0sXG4gICdjaGF0Ym94LnVuYXZhaWxhYmxlQmVoYXZpb3InOiBmdW5jdGlvbiBjaGF0Ym94VW5hdmFpbGFibGVCZWhhdmlvcihzdG9yZSkge1xuICAgIHJldHVybiBwaXBlKGdldEZyb21TdG9yZShzdG9yZSksIG1hcFVuYXZhaWxhYmxlQmVoYXZpb3IpKCdzZXR0aW5ncy51bmF2YWlsYWJsZUJlaGF2aW9yJyk7XG4gIH0sXG4gICdjaGF0Ym94LnBvc2l0aW9uJzogZnVuY3Rpb24gY2hhdGJveFBvc2l0aW9uKHN0b3JlKSB7XG4gICAgcmV0dXJuIHBpcGUoZ2V0RnJvbVN0b3JlKHN0b3JlKSwgbWFwUG9zaXRpb24pKCdzZXR0aW5ncy5wb3NpdGlvbicpO1xuICB9LFxuICAnY2hhdGJveC5hc2tGb3JOYW1lJzogZnVuY3Rpb24gY2hhdGJveEFza0Zvck5hbWUoc3RvcmUpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVN0b3JlKHN0b3JlLCAnc2V0dGluZ3MuYXNrRm9yRmlyc3ROYW1lJykgfHwgZ2V0RnJvbVN0b3JlKHN0b3JlLCAnc2V0dGluZ3MuYXNrRm9yTGFzdE5hbWUnKTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yRmlyc3ROYW1lJzogZnVuY3Rpb24gY2hhdGJveEFza0ZvckZpcnN0TmFtZShzdG9yZSkge1xuICAgIHJldHVybiBnZXRGcm9tU3RvcmUoc3RvcmUsICdzZXR0aW5ncy5hc2tGb3JGaXJzdE5hbWUnKTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yTGFzdE5hbWUnOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yTGFzdE5hbWUoc3RvcmUpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVN0b3JlKHN0b3JlLCAnc2V0dGluZ3MuYXNrRm9yTGFzdE5hbWUnKTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yRW1haWwnOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yRW1haWwoc3RvcmUpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVN0b3JlKHN0b3JlLCAnc2V0dGluZ3MuYXNrRm9yRW1haWwnKTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yQ29tcGFueSc6IGZ1bmN0aW9uIGNoYXRib3hBc2tGb3JDb21wYW55KHN0b3JlKSB7XG4gICAgcmV0dXJuIGdldEZyb21TdG9yZShzdG9yZSwgJ3NldHRpbmdzLmFza0ZvckNvbXBhbnknKTtcbiAgfSxcbiAgJ2NoYXRib3guYXNrRm9yUGhvbmVOdW1iZXInOiBmdW5jdGlvbiBjaGF0Ym94QXNrRm9yUGhvbmVOdW1iZXIoc3RvcmUpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVN0b3JlKHN0b3JlLCAnc2V0dGluZ3MuYXNrRm9yUGhvbmVOdW1iZXInKTtcbiAgfSxcbiAgJ2NoYXRib3guZXhwYW5kZWQnOiBmdW5jdGlvbiBjaGF0Ym94RXhwYW5kZWQoc3RvcmUpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVN0b3JlKHN0b3JlLCAnYXBwLmlzTWVzc2VuZ2VyT3BlbicpO1xuICB9LFxuICAndmlzaXRvci5uYW1lJzogZnVuY3Rpb24gdmlzaXRvck5hbWUoc3RvcmUpIHtcbiAgICB2YXIgbmFtZSA9IGdldEZyb21TdG9yZShzdG9yZSwgJ2NvbnRhY3QubmFtZScpO1xuICAgIHZhciBmaXJzdE5hbWUgPSBnZXRGcm9tU3RvcmUoc3RvcmUsICdjb250YWN0LmZpcnN0TmFtZScpO1xuICAgIHZhciBsYXN0TmFtZSA9IGdldEZyb21TdG9yZShzdG9yZSwgJ2NvbnRhY3QubGFzdE5hbWUnKTtcbiAgICByZXR1cm4gbmFtZSB8fCBcIlwiLmNvbmNhdChmaXJzdE5hbWUgfHwgJycsIFwiIFwiKS5jb25jYXQobGFzdE5hbWUgfHwgJycpLnRyaW0oKTtcbiAgfSxcbiAgJ3Zpc2l0b3IuZmlyc3ROYW1lJzogZnVuY3Rpb24gdmlzaXRvckZpcnN0TmFtZShzdG9yZSkge1xuICAgIHJldHVybiBnZXRGcm9tU3RvcmUoc3RvcmUsICdjb250YWN0LmZpcnN0TmFtZScpO1xuICB9LFxuICAndmlzaXRvci5sYXN0TmFtZSc6IGZ1bmN0aW9uIHZpc2l0b3JMYXN0TmFtZShzdG9yZSkge1xuICAgIHJldHVybiBnZXRGcm9tU3RvcmUoc3RvcmUsICdjb250YWN0Lmxhc3ROYW1lJyk7XG4gIH0sXG4gICd2aXNpdG9yLmVtYWlsJzogZnVuY3Rpb24gdmlzaXRvckVtYWlsKHN0b3JlKSB7XG4gICAgcmV0dXJuIGdldEZyb21TdG9yZShzdG9yZSwgJ2NvbnRhY3QuZW1haWwnKTtcbiAgfSxcbiAgJ3Zpc2l0b3IuY29tcGFueSc6IGZ1bmN0aW9uIHZpc2l0b3JDb21wYW55KHN0b3JlKSB7XG4gICAgcmV0dXJuIGdldEZyb21TdG9yZShzdG9yZSwgJ2NvbnRhY3QuY29tcGFueScpO1xuICB9LFxuICAndmlzaXRvci5waG9uZU51bWJlcic6IGZ1bmN0aW9uIHZpc2l0b3JQaG9uZU51bWJlcihzdG9yZSkge1xuICAgIHJldHVybiBnZXRGcm9tU3RvcmUoc3RvcmUsICdjb250YWN0LnBob25lJyk7XG4gIH0sXG4gICd2aXNpdG9yLnF1ZXN0aW9uJzogZnVuY3Rpb24gdmlzaXRvclF1ZXN0aW9uKHN0b3JlKSB7XG4gICAgcmV0dXJuIGdldEZyb21TdG9yZShzdG9yZSwgJ2NvbnRhY3QucXVlc3Rpb24nKTtcbiAgfVxufTsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSBcInVuZGVmaW5lZFwiICYmIFJlZmxlY3QuZ2V0KSB7IF9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTsgfVxuXG5mdW5jdGlvbiBfc3VwZXJQcm9wQmFzZShvYmplY3QsIHByb3BlcnR5KSB7IHdoaWxlICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7IG9iamVjdCA9IF9nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAob2JqZWN0ID09PSBudWxsKSBicmVhazsgfSByZXR1cm4gb2JqZWN0OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnbW9kZXJuX3dpZGdldC9saWIvZXZlbnRfZW1pdHRlcic7XG5pbXBvcnQgU2V0dGVyTWFwcGluZ3MgZnJvbSAnLi9zZXR0ZXJfbWFwcGluZ3MnO1xuaW1wb3J0IEdldHRlck1hcHBpbmdzIGZyb20gJy4vZ2V0dGVyX21hcHBpbmdzJzsgLy8gSW50ZXJuYWwgZXZlbnRzIGFyZSBoYW5kbGVkIHdpdGhpbiB0aGUgbGF1bmNoZXIgdXNpbmcgdGhlIGBpbnRlcm5hbDpgIHByZWZpeC5cbi8vIFRoaXMgaXQgYXZvaWQgaGF2aW5nIHRvIGFkZCBlYWNoIGV2ZW50L3RyaWdnZXIgdHdpY2UuIFRoaXMgaXMgYmVjYXVzZSB3ZVxuLy8gbGltaXQgdGhlIGV2ZW50cyB0aGF0IHRoZSB1c2VyIGNhbiBhdHRhY2ggdG8sIHNvIHRvIGdldCBhcm91bmQgdGhvc2UgY2hlY2tzXG4vLyBpbnRlcm5hbGx5LCB0aGlzIHByZWZpeCBpcyB1c2VkLlxuXG52YXIgaXNJbnRlcm5hbCA9IGZ1bmN0aW9uIGlzSW50ZXJuYWwobmFtZSkge1xuICByZXR1cm4gbmFtZS5zcGxpdCgnOicpWzBdID09PSAnaW50ZXJuYWwnO1xufTtcblxudmFyIEphdmFTY3JpcHRBcGkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEphdmFTY3JpcHRBcGksIF9FdmVudEVtaXR0ZXIpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoSmF2YVNjcmlwdEFwaSk7XG5cbiAgZnVuY3Rpb24gSmF2YVNjcmlwdEFwaSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSmF2YVNjcmlwdEFwaSk7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpOyAvLyBBdHRhY2ggdG8gdGhlIGBtZXNzYWdlYCBldmVudCBzbyB3ZSBjYW4gdHJpZ2dlciBBUEkgZXZlbnRzIG9mZiBvZiB0aGluZ3NcbiAgICAvLyBjb21pbmcgZnJvbSB0aGUgY2hhdCB3aW5kb3cgaWZyYW1lLlxuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN0b3JlXCIsIG51bGwpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN1cHBvcnRlZEV2ZW50c1wiLCBbJ2NoYXRib3g6cmVhZHknLCAnY2hhdGJveDpleHBhbmQnLCAnY2hhdGJveDpjb2xsYXBzZScsICdjaGF0Ym94LmF2YWlsYWJsZTpjaGFuZ2UnLCAnY2hhdGJveDpwb3BwZWRPdXQnLCAnY2hhdGJveDpyZXN0YXJ0JywgJ2NoYXQ6b3BlcmF0b3JKb2luJywgJ2NoYXQ6b3BlcmF0b3JMZWF2ZScsICdjaGF0OnJhdGUnLCAnY2hhdDplbmQnLCAnY2hhdDpzdGFydCcsICdjaGF0OmNoYW5nZScsICd2aXNpdG9yLm5hbWU6Y2hhbmdlJywgJ3Zpc2l0b3IuZmlyc3ROYW1lOmNoYW5nZScsICd2aXNpdG9yLmxhc3ROYW1lOmNoYW5nZScsICd2aXNpdG9yLmVtYWlsOmNoYW5nZScsICd2aXNpdG9yLnBob25lTnVtYmVyOmNoYW5nZScsICd2aXNpdG9yLmNvbXBhbnk6Y2hhbmdlJywgJ2VtYWlsOnNlbmQnXSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwic3VwcG9ydGVkVHJpZ2dlcnNcIiwgW10pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN1cHBvcnRlZFNldFwiLCBbJ3Zpc2l0b3IubmFtZScsICd2aXNpdG9yLmZpcnN0TmFtZScsICd2aXNpdG9yLmxhc3ROYW1lJywgJ3Zpc2l0b3IuZW1haWwnLCAndmlzaXRvci5waG9uZU51bWJlcicsICd2aXNpdG9yLmNvbXBhbnknLCAndmlzaXRvci5xdWVzdGlvbicsICdjaGF0Ym94LnVuYXZhaWxhYmxlQmVoYXZpb3InLCAnY2hhdGJveC5wb3NpdGlvbicsICdjaGF0Ym94LmFza0Zvck5hbWUnLCAnY2hhdGJveC5hc2tGb3JGaXJzdE5hbWUnLCAnY2hhdGJveC5hc2tGb3JMYXN0TmFtZScsICdjaGF0Ym94LmFza0ZvckVtYWlsJywgJ2NoYXRib3guYXNrRm9yQ29tcGFueScsICdjaGF0Ym94LmFza0ZvclBob25lTnVtYmVyJywgJ2NoYXRib3guZW5hYmxlVHJhbnNjcmlwdERvd25sb2FkJywgJ2NoYXRib3guYXNrRm9yUmF0aW5nJywgJ2NoYXRib3guZXhwYW5kZWQnLCAnY2hhdGJveC52aXNpYmxlJywgJ2NoYXRib3guZmlyc3RNZXNzYWdlJ10pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInN1cHBvcnRlZEdldFwiLCBbJ3Zpc2l0b3IubmFtZScsICd2aXNpdG9yLmZpcnN0TmFtZScsICd2aXNpdG9yLmxhc3ROYW1lJywgJ3Zpc2l0b3IuZW1haWwnLCAndmlzaXRvci5jb21wYW55JywgJ3Zpc2l0b3IucGhvbmVOdW1iZXInLCAndmlzaXRvci5xdWVzdGlvbicsICdjaGF0Ym94LmF2YWlsYWJsZScsICdjaGF0Ym94LnVuYXZhaWxhYmxlQmVoYXZpb3InLCAnY2hhdGJveC5wb3NpdGlvbicsICdjaGF0Ym94LmFza0Zvck5hbWUnLCAnY2hhdGJveC5hc2tGb3JGaXJzdE5hbWUnLCAnY2hhdGJveC5hc2tGb3JMYXN0TmFtZScsICdjaGF0Ym94LmFza0ZvckVtYWlsJywgJ2NoYXRib3guYXNrRm9yQ29tcGFueScsICdjaGF0Ym94LmFza0ZvclBob25lTnVtYmVyJywgJ2NoYXRib3guZXhwYW5kZWQnXSk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoIWUgfHwgIWUuZGF0YSkgcmV0dXJuO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YXIgX0pTT04kcGFyc2UgPSBKU09OLnBhcnNlKGUuZGF0YSksXG4gICAgICAgICAgICBhY3Rpb24gPSBfSlNPTiRwYXJzZS5hY3Rpb24sXG4gICAgICAgICAgICBfSlNPTiRwYXJzZSRwYXlsb2FkID0gX0pTT04kcGFyc2UucGF5bG9hZCxcbiAgICAgICAgICAgIHBheWxvYWQgPSBfSlNPTiRwYXJzZSRwYXlsb2FkID09PSB2b2lkIDAgPyB7fSA6IF9KU09OJHBhcnNlJHBheWxvYWQ7XG5cbiAgICAgICAgaWYgKCFhY3Rpb24pIHJldHVybjtcblxuICAgICAgICBfdGhpcy50cmlnZ2VyKFwiaW50ZXJuYWw6XCIuY29uY2F0KGFjdGlvbiksIHBheWxvYWQpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgLyogRG8gTm90aGluZyAqL1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhKYXZhU2NyaXB0QXBpLCBbe1xuICAgIGtleTogXCJiYXNlRXZlbnRBcmdzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyaWdnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcihldmVudCkge1xuICAgICAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgdmFyIGFsbG93ID0gaXNJbnRlcm5hbChldmVudCkgfHwgdGhpcy5zdXBwb3J0ZWRUcmlnZ2Vycy5pbmRleE9mKGV2ZW50KSA+IC0xO1xuICAgICAgaWYgKCFhbGxvdykgdGhyb3cgbmV3IEVycm9yKFwiPFwiLmNvbmNhdChldmVudCwgXCI+IGlzIG5vdCBhIHZhbGlkIHB1cmVjaGF0IHRyaWdnZXJcIikpO1xuICAgICAgdmFyIGV4dGVybmFsRXZlbnQgPSBldmVudC5yZXBsYWNlKC9pbnRlcm5hbDovZywgJycpO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoSmF2YVNjcmlwdEFwaS5wcm90b3R5cGUpLCBcInRyaWdnZXJcIiwgdGhpcykuY2FsbCh0aGlzLCBleHRlcm5hbEV2ZW50LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRoaXMuYmFzZUV2ZW50QXJncyksIGRhdGEpKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBhbGxvdyA9IGlzSW50ZXJuYWwoZXZlbnQpIHx8IHRoaXMuc3VwcG9ydGVkRXZlbnRzLmluZGV4T2YoZXZlbnQpID4gLTE7XG4gICAgICBpZiAoIWFsbG93KSB0aHJvdyBuZXcgRXJyb3IoXCI8XCIuY29uY2F0KGV2ZW50LCBcIj4gaXMgbm90IGEgdmFsaWQgcHVyZWNoYXQgZXZlbnRcIikpO1xuICAgICAgdmFyIGV4dGVybmFsRXZlbnQgPSBldmVudC5yZXBsYWNlKC9pbnRlcm5hbDovZywgJycpO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoSmF2YVNjcmlwdEFwaS5wcm90b3R5cGUpLCBcIm9uXCIsIHRoaXMpLmNhbGwodGhpcywgZXh0ZXJuYWxFdmVudCwgY2FsbGJhY2spO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIHZhciBhbGxvdyA9IHRoaXMuc3VwcG9ydGVkU2V0LmluZGV4T2YobmFtZSkgPiAtMTtcbiAgICAgIGlmICghYWxsb3cgfHwgIVNldHRlck1hcHBpbmdzW25hbWVdKSB0aHJvdyBuZXcgRXJyb3IoXCI8XCIuY29uY2F0KG5hbWUsIFwiPiBpcyBub3QgYSB2YWxpZCBwdXJlY2hhdCBzZXRcIikpO1xuICAgICAgaWYgKCF0aGlzLnN0b3JlKSB0aHJvdyBuZXcgRXJyb3IoJ1B1cmUgQ2hhdCBKYXZhU2NyaXB0IEFQSSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgcHJvcGVybHknKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFNldHRlck1hcHBpbmdzW25hbWVdKHRoaXMuc3RvcmUsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICAgIHZhciBhbGxvdyA9IHRoaXMuc3VwcG9ydGVkR2V0LmluZGV4T2YobmFtZSkgPiAtMTtcbiAgICAgIGlmICghYWxsb3cgfHwgIUdldHRlck1hcHBpbmdzW25hbWVdKSB0aHJvdyBuZXcgRXJyb3IoXCI8XCIuY29uY2F0KG5hbWUsIFwiPiBpcyBub3QgYSB2YWxpZCBwdXJlY2hhdCBnZXRcIikpO1xuICAgICAgaWYgKCF0aGlzLnN0b3JlKSB0aHJvdyBuZXcgRXJyb3IoJ1B1cmUgQ2hhdCBKYXZhU2NyaXB0IEFQSSBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgcHJvcGVybHknKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEdldHRlck1hcHBpbmdzW25hbWVdKHRoaXMuc3RvcmUpO1xuICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFN0b3JlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0b3JlKHN0b3JlKSB7XG4gICAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEphdmFTY3JpcHRBcGk7XG59KEV2ZW50RW1pdHRlcik7XG5cbmV4cG9ydCB7IEphdmFTY3JpcHRBcGkgYXMgZGVmYXVsdCB9OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IEphdmFTY3JpcHRBcGkgZnJvbSAnLi9qc19hcGknOyAvLyBUaGlzIGNsYXNzIGFjdHMgYXMgYW4gaW50ZXJmYWNlIHRvIHRoZSBhY3R1YWwgSmF2YVNjcmlwdEFwaSBjbGFzcyBzbyB0aGF0XG4vLyB0aGUgdXNlciBkb2Vzbid0IHNlZSB0aGUgZnVsbCBhcnJheSBvZiBmdW5jdGlvbnMgdGhhdCBhcmUgbmVlZGVkIHRvIG1ha2Vcbi8vIHRoZSBKYXZhU2NyaXB0IEFQSSB3b3JrLlxuXG52YXIgUHVibGljQXBpID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHVibGljQXBpKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQdWJsaWNBcGkpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiYXBpXCIsIG51bGwpO1xuXG4gICAgLy8gTWFrZSBzdXJlIGB0aGlzYCBpcyBhbHdheXMgY29ycmVjdCBpbiBtZXRob2RzXG4gICAgdGhpcy5vbiA9IHRoaXMub24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9mZiA9IHRoaXMub2ZmLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zZXQgPSB0aGlzLnNldC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0ID0gdGhpcy5nZXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFwaSA9IG5ldyBKYXZhU2NyaXB0QXBpKCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUHVibGljQXBpLCBbe1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbigpIHtcbiAgICAgIHZhciBfdGhpcyRhcGk7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkYXBpID0gdGhpcy5hcGkpLm9uLmFwcGx5KF90aGlzJGFwaSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib2ZmXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9mZigpIHtcbiAgICAgIHZhciBfdGhpcyRhcGkyO1xuXG4gICAgICByZXR1cm4gKF90aGlzJGFwaTIgPSB0aGlzLmFwaSkub2ZmLmFwcGx5KF90aGlzJGFwaTIsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInRyaWdnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICAgIHZhciBfdGhpcyRhcGkzO1xuXG4gICAgICByZXR1cm4gKF90aGlzJGFwaTMgPSB0aGlzLmFwaSkudHJpZ2dlci5hcHBseShfdGhpcyRhcGkzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KCkge1xuICAgICAgdmFyIF90aGlzJGFwaTQ7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkYXBpNCA9IHRoaXMuYXBpKS5zZXQuYXBwbHkoX3RoaXMkYXBpNCwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfdGhpcyRhcGk1O1xuXG4gICAgICByZXR1cm4gKF90aGlzJGFwaTUgPSB0aGlzLmFwaSkuZ2V0LmFwcGx5KF90aGlzJGFwaTUsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFB1YmxpY0FwaTtcbn0oKTtcblxuZXhwb3J0IHsgUHVibGljQXBpIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2N1cnJ5MSBmcm9tIFwiLi9pbnRlcm5hbC9fY3VycnkxLmpzXCI7XG5pbXBvcnQgX2lzQXJndW1lbnRzIGZyb20gXCIuL2ludGVybmFsL19pc0FyZ3VtZW50cy5qc1wiO1xuaW1wb3J0IF9pc0FycmF5IGZyb20gXCIuL2ludGVybmFsL19pc0FycmF5LmpzXCI7XG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gXCIuL2ludGVybmFsL19pc09iamVjdC5qc1wiO1xuaW1wb3J0IF9pc1N0cmluZyBmcm9tIFwiLi9pbnRlcm5hbC9faXNTdHJpbmcuanNcIjtcbi8qKlxuICogUmV0dXJucyB0aGUgZW1wdHkgdmFsdWUgb2YgaXRzIGFyZ3VtZW50J3MgdHlwZS4gUmFtZGEgZGVmaW5lcyB0aGUgZW1wdHlcbiAqIHZhbHVlIG9mIEFycmF5IChgW11gKSwgT2JqZWN0IChge31gKSwgU3RyaW5nIChgJydgKSwgYW5kIEFyZ3VtZW50cy4gT3RoZXJcbiAqIHR5cGVzIGFyZSBzdXBwb3J0ZWQgaWYgdGhleSBkZWZpbmUgYDxUeXBlPi5lbXB0eWAsXG4gKiBgPFR5cGU+LnByb3RvdHlwZS5lbXB0eWAgb3IgaW1wbGVtZW50IHRoZVxuICogW0ZhbnRhc3lMYW5kIE1vbm9pZCBzcGVjXShodHRwczovL2dpdGh1Yi5jb20vZmFudGFzeWxhbmQvZmFudGFzeS1sYW5kI21vbm9pZCkuXG4gKlxuICogRGlzcGF0Y2hlcyB0byB0aGUgYGVtcHR5YCBtZXRob2Qgb2YgdGhlIGZpcnN0IGFyZ3VtZW50LCBpZiBwcmVzZW50LlxuICpcbiAqIEBmdW5jXG4gKiBAbWVtYmVyT2YgUlxuICogQHNpbmNlIHYwLjMuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAc2lnIGEgLT4gYVxuICogQHBhcmFtIHsqfSB4XG4gKiBAcmV0dXJuIHsqfVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuZW1wdHkoSnVzdCg0MikpOyAgICAgIC8vPT4gTm90aGluZygpXG4gKiAgICAgIFIuZW1wdHkoWzEsIDIsIDNdKTsgICAgIC8vPT4gW11cbiAqICAgICAgUi5lbXB0eSgndW5pY29ybnMnKTsgICAgLy89PiAnJ1xuICogICAgICBSLmVtcHR5KHt4OiAxLCB5OiAyfSk7ICAvLz0+IHt9XG4gKi9cblxudmFyIGVtcHR5ID1cbi8qI19fUFVSRV9fKi9cbl9jdXJyeTEoZnVuY3Rpb24gZW1wdHkoeCkge1xuICByZXR1cm4geCAhPSBudWxsICYmIHR5cGVvZiB4WydmYW50YXN5LWxhbmQvZW1wdHknXSA9PT0gJ2Z1bmN0aW9uJyA/IHhbJ2ZhbnRhc3ktbGFuZC9lbXB0eSddKCkgOiB4ICE9IG51bGwgJiYgeC5jb25zdHJ1Y3RvciAhPSBudWxsICYmIHR5cGVvZiB4LmNvbnN0cnVjdG9yWydmYW50YXN5LWxhbmQvZW1wdHknXSA9PT0gJ2Z1bmN0aW9uJyA/IHguY29uc3RydWN0b3JbJ2ZhbnRhc3ktbGFuZC9lbXB0eSddKCkgOiB4ICE9IG51bGwgJiYgdHlwZW9mIHguZW1wdHkgPT09ICdmdW5jdGlvbicgPyB4LmVtcHR5KCkgOiB4ICE9IG51bGwgJiYgeC5jb25zdHJ1Y3RvciAhPSBudWxsICYmIHR5cGVvZiB4LmNvbnN0cnVjdG9yLmVtcHR5ID09PSAnZnVuY3Rpb24nID8geC5jb25zdHJ1Y3Rvci5lbXB0eSgpIDogX2lzQXJyYXkoeCkgPyBbXSA6IF9pc1N0cmluZyh4KSA/ICcnIDogX2lzT2JqZWN0KHgpID8ge30gOiBfaXNBcmd1bWVudHMoeCkgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cztcbiAgfSgpIDogdm9pZCAwIC8vIGVsc2VcbiAgO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGVtcHR5OyIsImltcG9ydCBfY3VycnkxIGZyb20gXCIuL2ludGVybmFsL19jdXJyeTEuanNcIjtcbmltcG9ydCBlbXB0eSBmcm9tIFwiLi9lbXB0eS5qc1wiO1xuaW1wb3J0IGVxdWFscyBmcm9tIFwiLi9lcXVhbHMuanNcIjtcbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGl0cyB0eXBlJ3MgZW1wdHkgdmFsdWU7IGBmYWxzZWBcbiAqIG90aGVyd2lzZS5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC4xLjBcbiAqIEBjYXRlZ29yeSBMb2dpY1xuICogQHNpZyBhIC0+IEJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0geFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBzZWUgUi5lbXB0eVxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgIFIuaXNFbXB0eShbMSwgMiwgM10pOyAgIC8vPT4gZmFsc2VcbiAqICAgICAgUi5pc0VtcHR5KFtdKTsgICAgICAgICAgLy89PiB0cnVlXG4gKiAgICAgIFIuaXNFbXB0eSgnJyk7ICAgICAgICAgIC8vPT4gdHJ1ZVxuICogICAgICBSLmlzRW1wdHkobnVsbCk7ICAgICAgICAvLz0+IGZhbHNlXG4gKiAgICAgIFIuaXNFbXB0eSh7fSk7ICAgICAgICAgIC8vPT4gdHJ1ZVxuICogICAgICBSLmlzRW1wdHkoe2xlbmd0aDogMH0pOyAvLz0+IGZhbHNlXG4gKi9cblxudmFyIGlzRW1wdHkgPVxuLyojX19QVVJFX18qL1xuX2N1cnJ5MShmdW5jdGlvbiBpc0VtcHR5KHgpIHtcbiAgcmV0dXJuIHggIT0gbnVsbCAmJiBlcXVhbHMoeCwgZW1wdHkoeCkpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzRW1wdHk7IiwiaW1wb3J0IF9jdXJyeTEgZnJvbSBcIi4vaW50ZXJuYWwvX2N1cnJ5MS5qc1wiO1xudmFyIHdzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcgKyAnXFx1MjAyOVxcdUZFRkYnO1xudmFyIHplcm9XaWR0aCA9ICdcXHUyMDBiJztcbnZhciBoYXNQcm90b1RyaW0gPSB0eXBlb2YgU3RyaW5nLnByb3RvdHlwZS50cmltID09PSAnZnVuY3Rpb24nO1xuLyoqXG4gKiBSZW1vdmVzIChzdHJpcHMpIHdoaXRlc3BhY2UgZnJvbSBib3RoIGVuZHMgb2YgdGhlIHN0cmluZy5cbiAqXG4gKiBAZnVuY1xuICogQG1lbWJlck9mIFJcbiAqIEBzaW5jZSB2MC42LjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBzaWcgU3RyaW5nIC0+IFN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFRyaW1tZWQgdmVyc2lvbiBvZiBgc3RyYC5cbiAqIEBleGFtcGxlXG4gKlxuICogICAgICBSLnRyaW0oJyAgIHh5eiAgJyk7IC8vPT4gJ3h5eidcbiAqICAgICAgUi5tYXAoUi50cmltLCBSLnNwbGl0KCcsJywgJ3gsIHksIHonKSk7IC8vPT4gWyd4JywgJ3knLCAneiddXG4gKi9cblxudmFyIHRyaW0gPSAhaGFzUHJvdG9UcmltIHx8XG4vKiNfX1BVUkVfXyovXG53cy50cmltKCkgfHwgIVxuLyojX19QVVJFX18qL1xuemVyb1dpZHRoLnRyaW0oKSA/XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHZhciBiZWdpblJ4ID0gbmV3IFJlZ0V4cCgnXlsnICsgd3MgKyAnXVsnICsgd3MgKyAnXSonKTtcbiAgdmFyIGVuZFJ4ID0gbmV3IFJlZ0V4cCgnWycgKyB3cyArICddWycgKyB3cyArICddKiQnKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGJlZ2luUngsICcnKS5yZXBsYWNlKGVuZFJ4LCAnJyk7XG59KSA6XG4vKiNfX1BVUkVfXyovXG5fY3VycnkxKGZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSgpO1xufSk7XG5leHBvcnQgZGVmYXVsdCB0cmltOyIsImZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuaW1wb3J0ICogYXMgUiBmcm9tICdyYW1kYSc7XG52YXIgRklWRV9SRU1TID0gODA7XG52YXIgQkFTRV9TVFlMRV9JRCA9ICdwdXJlY2hhdC1zdHlsZXNoZWV0JztcblxudmFyIGdldFN0eWxlSWQgPSBmdW5jdGlvbiBnZXRTdHlsZUlkKCkge1xuICB2YXIgc3VmZml4ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAnJztcbiAgcmV0dXJuIHN1ZmZpeC5sZW5ndGggPiAwID8gXCJcIi5jb25jYXQoQkFTRV9TVFlMRV9JRCwgXCJfXCIpLmNvbmNhdChzdWZmaXgpIDogQkFTRV9TVFlMRV9JRDtcbn07XG5cbmV4cG9ydCB2YXIgYWRkU3R5bGVzaGVldCA9IGZ1bmN0aW9uIGFkZFN0eWxlc2hlZXQod2luLCBzdHlsZXMpIHtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICB2YXIgc3R5bGUgPSB3aW4uZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUuaWQgPSBnZXRTdHlsZUlkKG5hbWUpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHN0eWxlcztcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5hcHBlbmRDaGlsZCh3aW4uZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3R5bGVzKSk7XG4gIH1cblxuICB3aW4uZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG59O1xuZXhwb3J0IHZhciBvYmplY3RUb0NsYXNzZXMgPSBmdW5jdGlvbiBvYmplY3RUb0NsYXNzZXMob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldID8gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShwcmV2KSwgW2tleV0pIDogcHJldjtcbiAgfSwgW10pLmpvaW4oJyAnKTtcbn07XG5leHBvcnQgdmFyIGpvaW5DbGFzc2VzID0gUi5waXBlKFIucmVqZWN0KFIuaXNFbXB0eSksIFIuam9pbignICcpLCBSLnRyaW0pO1xuZXhwb3J0IHZhciBwcmVsb2FkSW1nID0gZnVuY3Rpb24gcHJlbG9hZEltZyhpbWdVcmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoIWltZ1VybCkgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICB9O1xuXG4gICAgaW1nLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgfTtcblxuICAgIGltZy5zcmMgPSBpbWdVcmw7XG4gICAgcmV0dXJuIGltZztcbiAgfSk7XG59O1xuZXhwb3J0IHZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgcmV0dXJuIGVsLmNsYXNzTGlzdCA/IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpIDogISFlbC5jbGFzc05hbWUubWF0Y2gobmV3IFJlZ0V4cChcIihcXFxcc3xeKVwiLmNvbmNhdChjbGFzc05hbWUsIFwiKFxcXFxzfCQpXCIpKSk7XG59O1xuZXhwb3J0IHZhciBhZGRDbGFzcyA9IGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkpIHtcbiAgICBlbC5jbGFzc05hbWUgKz0gXCIgXCIuY29uY2F0KGNsYXNzTmFtZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgfVxufTtcbmV4cG9ydCB2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gIH0gZWxzZSBpZiAoIWhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB7XG4gICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIi5jb25jYXQoY2xhc3NOYW1lLCBcIihcXFxcc3wkKVwiKSk7XG4gICAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UocmVnLCAnICcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIH1cbn07IC8vIFRoZXNlIGFkZC9yZW1vdmUgbWV0aG9kcyBhcmUgbmVjZXNzYXJ5IGR1ZSB0byB0aGUgd2F5IHRoZSBpZnJhbWVzIGFyZSBjb25zdHJ1Y3RlZFxuLy8gZm9yIHRoZSB3aWRnZXQsIHRoZSBnbG9iYWwgZXZlbnRzIGRvbid0IGdldCBhdHRhY2hlZCBjb3JyZWN0bHkgdG8gdGhlIGlmcmFtZSAgaXRzZWxmLlxuLy8gU28gdGhpcyBpcyBzb21ld2hhdCBvZiBhIHdvcmsgYXJvdW5kIGluIG9yZGVyIGF0dGFjaCBnbG9iYWwgZXZlbnRzIHRoYXQgaGFwcGVuXG4vLyBldmVyeXdoZXJlLiBNYWtlIHN1cmUgaWYgeW91IHVzZSB0aGUgYGFkZGAsIHVzZSB0aGUgYHJlbW92ZWAgYXMgd2VsbC5cblxuZXhwb3J0IHZhciBhZGRHbG9iYWxFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiBhZGRHbG9iYWxFdmVudEhhbmRsZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIHZhciB3aW4gPSB3aW5kb3cucGFyZW50IHx8IHdpbmRvdztcbiAgdmFyIG1lc3NlbmdlcklmcmFtZSA9IHdpbi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHVyZWNoYXQtbWVzc2VuZ2VyLWZyYW1lJyk7XG4gIHdpbi5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgb3B0aW9ucyk7XG4gIGlmIChtZXNzZW5nZXJJZnJhbWUgJiYgbWVzc2VuZ2VySWZyYW1lLmNvbnRlbnRXaW5kb3cpIG1lc3NlbmdlcklmcmFtZS5jb250ZW50V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbn07XG5leHBvcnQgdmFyIHJlbW92ZUdsb2JhbEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIHJlbW92ZUdsb2JhbEV2ZW50SGFuZGxlcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgdmFyIHdpbiA9IHdpbmRvdy5wYXJlbnQgfHwgd2luZG93O1xuICB2YXIgbWVzc2VuZ2VySWZyYW1lID0gd2luLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wdXJlY2hhdC1tZXNzZW5nZXItZnJhbWUnKTtcbiAgd2luLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgaWYgKG1lc3NlbmdlcklmcmFtZSAmJiBtZXNzZW5nZXJJZnJhbWUuY29udGVudFdpbmRvdykgbWVzc2VuZ2VySWZyYW1lLmNvbnRlbnRXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpO1xufTtcbmV4cG9ydCB2YXIgZ2V0V2luZG93U2l6ZSA9IGZ1bmN0aW9uIGdldFdpbmRvd1NpemUoKSB7XG4gIHZhciB3ID0gMDtcbiAgdmFyIGggPSAwO1xuICB2YXIgd2luID0gd2luZG93LnBhcmVudCB8fCB3aW5kb3c7IC8vIElFXG5cbiAgaWYgKCF3aW4uaW5uZXJXaWR0aCkge1xuICAgIGlmICh3aW4uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoICE9PSAwKSB7XG4gICAgICAvLyBzdHJpY3QgbW9kZVxuICAgICAgdyA9IHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICBoID0gd2luLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHF1aXJrcyBtb2RlXG4gICAgICB3ID0gd2luLmRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7XG4gICAgICBoID0gd2luLmRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyB3M2NcbiAgICB3ID0gd2luLmlubmVyV2lkdGg7XG4gICAgaCA9IHdpbi5pbm5lckhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHcsXG4gICAgaGVpZ2h0OiBoXG4gIH07XG59O1xuZXhwb3J0IHZhciBnZXRBdmFpbGFibGVIb3N0ZWRIZWlnaHQgPSBmdW5jdGlvbiBnZXRBdmFpbGFibGVIb3N0ZWRIZWlnaHQoKSB7XG4gIHZhciBkb2MgPSAod2luZG93LnBhcmVudCB8fCB3aW5kb3cpLmRvY3VtZW50O1xuICB2YXIgdGl0bGUgPSBkb2MucXVlcnlTZWxlY3RvcignLnB1cmVjaGF0LXRpdGxlJykgfHwge307XG4gIHZhciBpbnRybyA9IGRvYy5xdWVyeVNlbGVjdG9yKCcucHVyZWNoYXQtaW50cm8nKSB8fCB7fTtcbiAgdmFyIGhlYWRlckhlaWdodCA9ICh0aXRsZS5vZmZzZXRIZWlnaHQgfHwgMCkgKyAoaW50cm8ub2Zmc2V0SGVpZ2h0IHx8IDApO1xuXG4gIHZhciBfZ2V0V2luZG93U2l6ZSA9IGdldFdpbmRvd1NpemUoKSxcbiAgICAgIHdpbmRvd0hlaWdodCA9IF9nZXRXaW5kb3dTaXplLmhlaWdodDsgLy8gVGhlIDVyZW1zIGlzIHRvIGFjY291bnQgZm9yIG1hcmdpbiB0aGF0J3Mgbm90IGluY2x1ZGVkIGluIHRoZSBoZWlnaHQgY2FsY3VsYXRpb25zXG5cblxuICByZXR1cm4gd2luZG93SGVpZ2h0IC0gaGVhZGVySGVpZ2h0IC0gRklWRV9SRU1TO1xufTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qIGdsb2JhbCBWRVJTSU9OX05VTSAqL1xuaW1wb3J0IHsgaXNOaWwgfSBmcm9tICdyYW1kYSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5pbXBvcnQgeyBxdWVyeVN0cmluZ1RvT2JqZWN0IH0gZnJvbSAnd2lkZ2V0X3NoYXJlZC91cmwnO1xuaW1wb3J0IEphdmFTY3JpcHRBUEkgZnJvbSAnbW9kZXJuX3dpZGdldC9pbml0aWFsaXplci9qc19hcGknO1xuaW1wb3J0IHsgYWRkU3R5bGVzaGVldCB9IGZyb20gJ21vZGVybl93aWRnZXQvbGliL2h0bWwnO1xuaW1wb3J0IHN0eWxlIGZyb20gJ3B1cmVjaGF0X2NvbnRlbnQvbW9kZXJuX3dpZGdldC9iYXNlL3N0eWxlLnN0eWwnO1xuXG52YXIgV2lkZ2V0SW5pdGlhbGl6ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBXaWRnZXRJbml0aWFsaXplcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2lkZ2V0SW5pdGlhbGl6ZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFdpZGdldEluaXRpYWxpemVyLCBbe1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHZhciBpbml0aWFsU2V0dGluZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIGFkZFN0eWxlc2hlZXQod2luZG93LCBzdHlsZS50b1N0cmluZygpKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUphdmFTY3JpcHRBcGkoKTtcbiAgICAgIHRoaXMuY3JlYXRlRnJhbWUoaW5pdGlhbFNldHRpbmdzKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGF1bmNoZXJTY3JpcHRVcmxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChjb25maWcuY2RuVXJsLCBcIi9hc3NldHMvbW9kZXJuX2xhdW5jaGVyLlwiKS5jb25jYXQoVkVSU0lPTl9OVU0sIFwiLmpzXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbml0aWFsaXplSmF2YVNjcmlwdEFwaVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0aWFsaXplSmF2YVNjcmlwdEFwaSgpIHtcbiAgICAgIHZhciBfcmVmID0gd2luZG93LnB1cmVjaGF0QXBpIHx8IHtcbiAgICAgICAgbDogW10sXG4gICAgICAgIHQ6IFtdXG4gICAgICB9LFxuICAgICAgICAgIF9yZWYkbCA9IF9yZWYubCxcbiAgICAgICAgICBpbml0aWFsRXZlbnRzID0gX3JlZiRsID09PSB2b2lkIDAgPyBbXSA6IF9yZWYkbCxcbiAgICAgICAgICBfcmVmJHQgPSBfcmVmLnQsXG4gICAgICAgICAgaW5pdGlhbFRyaWdnZXJzID0gX3JlZiR0ID09PSB2b2lkIDAgPyBbXSA6IF9yZWYkdDtcblxuICAgICAgd2luZG93LnB1cmVjaGF0QXBpID0gbmV3IEphdmFTY3JpcHRBUEkoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcblxuICAgICAgaW5pdGlhbEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gd2luZG93LnB1cmVjaGF0QXBpLm9uLmFwcGx5KHdpbmRvdy5wdXJlY2hhdEFwaSwgZXZlbnQpO1xuICAgICAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG5cbiAgICAgIGluaXRpYWxUcmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cucHVyZWNoYXRBcGkudHJpZ2dlci5hcHBseSh3aW5kb3cucHVyZWNoYXRBcGksIHRyaWdnZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZUZyYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUZyYW1lKHNldHRpbmdzKSB7XG4gICAgICB2YXIgbWV0YVJlZmVycmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwicmVmZXJyZXJcIl0nKTtcbiAgICAgIHZhciBmcmFtZVJlZmVycmVyID0gbWV0YVJlZmVycmVyID8gXCI8bWV0YSBuYW1lPVxcXCJyZWZlcnJlclxcXCIgY29udGVudD1cXFwiXCIuY29uY2F0KG1ldGFSZWZlcnJlci5jb250ZW50LCBcIlxcXCI+XCIpIDogJyc7XG4gICAgICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUuaWQgPSAncHVyZWNoYXQtZnJhbWUnO1xuICAgICAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5yZW5kZXJJbnRvICYmIHNldHRpbmdzLnJlbmRlckludG8gIT09ICdib2R5Jykge1xuICAgICAgICB2YXIgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZXR0aW5ncy5yZW5kZXJJbnRvKTtcblxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50Lm9wZW4oJ3RleHQvaHRtbCcsICdyZXBsYWNlJyk7XG4gICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC53cml0ZShcIlxcbiAgICAgICAgICAgIDwhZG9jdHlwZSBodG1sPlxcbiAgICAgICAgICAgIDxodG1sPlxcbiAgICAgICAgICAgICAgICA8aGVhZD5cIi5jb25jYXQoZnJhbWVSZWZlcnJlciwgXCI8L2hlYWQ+XFxuICAgICAgICAgICAgICAgIDxib2R5PjwvYm9keT5cXG4gICAgICAgICAgICA8L2h0bWw+XFxuICAgICAgICBcIikpO1xuICAgICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuY2xvc2UoKTtcbiAgICAgIHZhciBzZXR0aW5nc1NjcmlwdCA9IHRoaXMuY3JlYXRlU2V0dGluZ3NTY3JpcHRUYWcoc2V0dGluZ3MpO1xuICAgICAgdmFyIGZyYW1lU2NyaXB0ID0gdGhpcy5jcmVhdGVGcmFtZVNjcmlwdFRhZygpO1xuICAgICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzZXR0aW5nc1NjcmlwdCk7XG4gICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGZyYW1lU2NyaXB0KTtcbiAgICAgIGlmICh3aW5kb3cucHVyZWNoYXRBcGkpIGlmcmFtZS5jb250ZW50V2luZG93LnB1cmVjaGF0QXBpID0gd2luZG93LnB1cmVjaGF0QXBpO1xuICAgICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cucHVyZWNoYXRMb2NhbFN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgICAgaWZyYW1lLmNvbnRlbnRXaW5kb3cucHVyZWNoYXRTZXNzaW9uU3RvcmFnZSA9IHdpbmRvdy5zZXNzaW9uU3RvcmFnZTtcbiAgICAgIHZhciBwb3BwZWRPdXRTZXR0aW5ncyA9IHRoaXMuY3JlYXRlUG9wcGVkT3V0U2V0dGluZ3MoKTtcblxuICAgICAgaWYgKHBvcHBlZE91dFNldHRpbmdzKSB7XG4gICAgICAgIGlmIChwb3BwZWRPdXRTZXR0aW5ncy51c2VySWQpIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHVyZWNoYXRfdXNlcklkJywgcG9wcGVkT3V0U2V0dGluZ3MudXNlcklkKTtcbiAgICAgICAgaWYgKHBvcHBlZE91dFNldHRpbmdzLmNoYXRJZCkgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwdXJlY2hhdF9jaGF0SWQnLCBwb3BwZWRPdXRTZXR0aW5ncy5jaGF0SWQpO1xuICAgICAgICBpZiAocG9wcGVkT3V0U2V0dGluZ3MuYXV0aFRva2VuKSB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3B1cmVjaGF0X2F1dGhUb2tlbicsIHBvcHBlZE91dFNldHRpbmdzLmF1dGhUb2tlbik7XG4gICAgICAgIGlmIChwb3BwZWRPdXRTZXR0aW5ncy5yb29tSWQpIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHVyZWNoYXRfcm9vbUlkJywgcG9wcGVkT3V0U2V0dGluZ3Mucm9vbUlkKTtcbiAgICAgICAgaWYgKHBvcHBlZE91dFNldHRpbmdzLnJvb21UeXBlKSB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3B1cmVjaGF0X3Jvb21UeXBlJywgcG9wcGVkT3V0U2V0dGluZ3Mucm9vbVR5cGUpO1xuXG4gICAgICAgIGlmIChwb3BwZWRPdXRTZXR0aW5ncy5jb250YWN0SWQpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2knLCBwb3BwZWRPdXRTZXR0aW5ncy5jb250YWN0SWQpO1xuICAgICAgICAgIHZhciBpc0luQ2hhdCA9ICFpc05pbChwb3BwZWRPdXRTZXR0aW5ncy5jaGF0SWQpICYmIHBvcHBlZE91dFNldHRpbmdzLmNoYXRJZC50b1N0cmluZygpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwdXJlY2hhdF9sZWFkX2NhcHR1cmVfZXhwYW5kZWQnLCAhaXNJbkNoYXQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpZnJhbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVNldHRpbmdzU2NyaXB0VGFnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVNldHRpbmdzU2NyaXB0VGFnKHNldHRpbmdzKSB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgc2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnZGF0YS1jZmFzeW5jJywgZmFsc2UpO1xuICAgICAgc2NyaXB0LnRleHQgPSBcIndpbmRvdy5wdXJlY2hhdFNldHRpbmdzID0gXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHNldHRpbmdzKSwgXCI7XCIpO1xuICAgICAgcmV0dXJuIHNjcmlwdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlRnJhbWVTY3JpcHRUYWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRnJhbWVTY3JpcHRUYWcoKSB7XG4gICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgc2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgnZGF0YS1jZmFzeW5jJywgZmFsc2UpO1xuICAgICAgc2NyaXB0LnNyYyA9IFwiXCIuY29uY2F0KGNvbmZpZy5jZG5VcmwsIFwiL2Fzc2V0cy9tb2Rlcm5fYXBwLlwiKS5jb25jYXQoVkVSU0lPTl9OVU0sIFwiLmpzXCIpO1xuICAgICAgcmV0dXJuIHNjcmlwdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY3JlYXRlUG9wcGVkT3V0U2V0dGluZ3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUG9wcGVkT3V0U2V0dGluZ3MoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gcXVlcnlTdHJpbmdUb09iamVjdCgpO1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5pbmRleE9mKCdwdXJlY2hhdC5jb20nKSA+IC0xID8ge1xuICAgICAgICB1c2VySWQ6IHBhcmFtcy51c2VySWQsXG4gICAgICAgIGF1dGhUb2tlbjogcGFyYW1zLmF1dGhUb2tlbixcbiAgICAgICAgY2hhdElkOiBwYXJhbXMuY2hhdElkLFxuICAgICAgICByb29tSWQ6IHBhcmFtcy5yb29tSWQsXG4gICAgICAgIHJvb21UeXBlOiBwYXJhbXMucm9vbVR5cGUsXG4gICAgICAgIGNvbnRhY3RJZDogcGFyYW1zLmNvbnRhY3RJZFxuICAgICAgfSA6IG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFdpZGdldEluaXRpYWxpemVyO1xufSgpOyAvLyBQdXRzIHRoZSBpbnN0YW5jZSBvbiB0aGUgd2luZG93IHNvIHRoYXQgdGhlIGxvYWRlciBjYW4gYmUgbm90aWZpZWQgd2hlblxuLy8gZXZlcnl0aGluZyBmdWxsIGxvYWRzLlxuXG5cbnZhciBpbml0aWFsaXplciA9IG5ldyBXaWRnZXRJbml0aWFsaXplcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcblxud2luZG93Ll9wY1dpZGdldEluaXRpYWxpemVyID0gaW5pdGlhbGl6ZXI7Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcExBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ2pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///94849\n")},56433:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "#purechat-container a,#purechat-container abbr,#purechat-container address,#purechat-container area,#purechat-container article,#purechat-container aside,#purechat-container audio,#purechat-container b,#purechat-container base,#purechat-container bdi,#purechat-container bdo,#purechat-container blockquote,#purechat-container body,#purechat-container br,#purechat-container button,#purechat-container canvas,#purechat-container caption,#purechat-container cite,#purechat-container code,#purechat-container col,#purechat-container colgroup,#purechat-container command,#purechat-container datalist,#purechat-container dd,#purechat-container del,#purechat-container details,#purechat-container dfn,#purechat-container div,#purechat-container dl,#purechat-container dt,#purechat-container em,#purechat-container embed,#purechat-container fieldset,#purechat-container figcaption,#purechat-container figure,#purechat-container footer,#purechat-container form,#purechat-container h1,#purechat-container h2,#purechat-container h3,#purechat-container h4,#purechat-container h5,#purechat-container h6,#purechat-container head,#purechat-container header,#purechat-container hgroup,#purechat-container hr,#purechat-container i,#purechat-container iframe,#purechat-container img,#purechat-container input,#purechat-container ins,#purechat-container kbd,#purechat-container keygen,#purechat-container label,#purechat-container legend,#purechat-container li,#purechat-container link,#purechat-container map,#purechat-container mark,#purechat-container menu,#purechat-container meta,#purechat-container meter,#purechat-container nav,#purechat-container noscript,#purechat-container object,#purechat-container ol,#purechat-container optgroup,#purechat-container option,#purechat-container output,#purechat-container p,#purechat-container param,#purechat-container pre,#purechat-container progress,#purechat-container q,#purechat-container rp,#purechat-container rt,#purechat-container ruby,#purechat-container s,#purechat-container samp,#purechat-container section,#purechat-container select,#purechat-container small,#purechat-container source,#purechat-container span,#purechat-container strong,#purechat-container sub,#purechat-container summary,#purechat-container sup,#purechat-container table,#purechat-container tbody,#purechat-container td,#purechat-container textarea,#purechat-container tfoot,#purechat-container th,#purechat-container thead,#purechat-container time,#purechat-container title,#purechat-container tr,#purechat-container track,#purechat-container u,#purechat-container ul,#purechat-container var,#purechat-container video,#purechat-container wbr,#purechat-container a:before,#purechat-container abbr:before,#purechat-container address:before,#purechat-container area:before,#purechat-container article:before,#purechat-container aside:before,#purechat-container audio:before,#purechat-container b:before,#purechat-container base:before,#purechat-container bdi:before,#purechat-container bdo:before,#purechat-container blockquote:before,#purechat-container body:before,#purechat-container br:before,#purechat-container button:before,#purechat-container canvas:before,#purechat-container caption:before,#purechat-container cite:before,#purechat-container code:before,#purechat-container col:before,#purechat-container colgroup:before,#purechat-container command:before,#purechat-container datalist:before,#purechat-container dd:before,#purechat-container del:before,#purechat-container details:before,#purechat-container dfn:before,#purechat-container div:before,#purechat-container dl:before,#purechat-container dt:before,#purechat-container em:before,#purechat-container embed:before,#purechat-container fieldset:before,#purechat-container figcaption:before,#purechat-container figure:before,#purechat-container footer:before,#purechat-container form:before,#purechat-container h1:before,#purechat-container h2:before,#purechat-container h3:before,#purechat-container h4:before,#purechat-container h5:before,#purechat-container h6:before,#purechat-container head:before,#purechat-container header:before,#purechat-container hgroup:before,#purechat-container hr:before,#purechat-container i:before,#purechat-container iframe:before,#purechat-container img:before,#purechat-container input:before,#purechat-container ins:before,#purechat-container kbd:before,#purechat-container keygen:before,#purechat-container label:before,#purechat-container legend:before,#purechat-container li:before,#purechat-container link:before,#purechat-container map:before,#purechat-container mark:before,#purechat-container menu:before,#purechat-container meta:before,#purechat-container meter:before,#purechat-container nav:before,#purechat-container noscript:before,#purechat-container object:before,#purechat-container ol:before,#purechat-container optgroup:before,#purechat-container option:before,#purechat-container output:before,#purechat-container p:before,#purechat-container param:before,#purechat-container pre:before,#purechat-container progress:before,#purechat-container q:before,#purechat-container rp:before,#purechat-container rt:before,#purechat-container ruby:before,#purechat-container s:before,#purechat-container samp:before,#purechat-container section:before,#purechat-container select:before,#purechat-container small:before,#purechat-container source:before,#purechat-container span:before,#purechat-container strong:before,#purechat-container sub:before,#purechat-container summary:before,#purechat-container sup:before,#purechat-container table:before,#purechat-container tbody:before,#purechat-container td:before,#purechat-container textarea:before,#purechat-container tfoot:before,#purechat-container th:before,#purechat-container thead:before,#purechat-container time:before,#purechat-container title:before,#purechat-container tr:before,#purechat-container track:before,#purechat-container u:before,#purechat-container ul:before,#purechat-container var:before,#purechat-container video:before,#purechat-container wbr:before,#purechat-container a:after,#purechat-container abbr:after,#purechat-container address:after,#purechat-container area:after,#purechat-container article:after,#purechat-container aside:after,#purechat-container audio:after,#purechat-container b:after,#purechat-container base:after,#purechat-container bdi:after,#purechat-container bdo:after,#purechat-container blockquote:after,#purechat-container body:after,#purechat-container br:after,#purechat-container button:after,#purechat-container canvas:after,#purechat-container caption:after,#purechat-container cite:after,#purechat-container code:after,#purechat-container col:after,#purechat-container colgroup:after,#purechat-container command:after,#purechat-container datalist:after,#purechat-container dd:after,#purechat-container del:after,#purechat-container details:after,#purechat-container dfn:after,#purechat-container div:after,#purechat-container dl:after,#purechat-container dt:after,#purechat-container em:after,#purechat-container embed:after,#purechat-container fieldset:after,#purechat-container figcaption:after,#purechat-container figure:after,#purechat-container footer:after,#purechat-container form:after,#purechat-container h1:after,#purechat-container h2:after,#purechat-container h3:after,#purechat-container h4:after,#purechat-container h5:after,#purechat-container h6:after,#purechat-container head:after,#purechat-container header:after,#purechat-container hgroup:after,#purechat-container hr:after,#purechat-container i:after,#purechat-container iframe:after,#purechat-container img:after,#purechat-container input:after,#purechat-container ins:after,#purechat-container kbd:after,#purechat-container keygen:after,#purechat-container label:after,#purechat-container legend:after,#purechat-container li:after,#purechat-container link:after,#purechat-container map:after,#purechat-container mark:after,#purechat-container menu:after,#purechat-container meta:after,#purechat-container meter:after,#purechat-container nav:after,#purechat-container noscript:after,#purechat-container object:after,#purechat-container ol:after,#purechat-container optgroup:after,#purechat-container option:after,#purechat-container output:after,#purechat-container p:after,#purechat-container param:after,#purechat-container pre:after,#purechat-container progress:after,#purechat-container q:after,#purechat-container rp:after,#purechat-container rt:after,#purechat-container ruby:after,#purechat-container s:after,#purechat-container samp:after,#purechat-container section:after,#purechat-container select:after,#purechat-container small:after,#purechat-container source:after,#purechat-container span:after,#purechat-container strong:after,#purechat-container sub:after,#purechat-container summary:after,#purechat-container sup:after,#purechat-container table:after,#purechat-container tbody:after,#purechat-container td:after,#purechat-container textarea:after,#purechat-container tfoot:after,#purechat-container th:after,#purechat-container thead:after,#purechat-container time:after,#purechat-container title:after,#purechat-container tr:after,#purechat-container track:after,#purechat-container u:after,#purechat-container ul:after,#purechat-container var:after,#purechat-container video:after,#purechat-container wbr:after{alignment-baseline:auto;animation-delay:0s;animation-direction:normal;animation-duration:0s;animation-fill-mode:none;animation-iteration-count:1;animation-name:none;animation-play-state:running;animation-timing-function:ease;background-attachment:scroll;background-blend-mode:normal;background-clip:border-box;background-color:rgba(0,0,0,0);background-image:none;background-origin:padding-box;background-position-x:0%;background-position-y:0%;background-repeat-x:no-repeat;background-repeat-y:no-repeat;border-bottom-color:rgba(0,0,0,0);border-bottom-left-radius:0;border-bottom-right-radius:0;border-bottom-style:none;border-bottom-width:0;border-collapse:separate;border-left-color:rgba(0,0,0,0);border-left-style:none;border-left-width:0;border-right-color:rgba(0,0,0,0);border-right-style:none;border-right-width:0;border-top-color:rgba(0,0,0,0);border-top-left-radius:0;border-top-right-radius:0;border-top-style:none;border-top-width:0;bottom:auto;box-shadow:none;box-sizing:border-box;clear:none;color:$base-font-color;cursor:default;fill:#000;fill-opacity:1;fill-rule:nonzero;filter:none;flex-basis:auto;flex-direction:row;flex-grow:0;flex-shrink:1;flex-wrap:nowrap;float:none;font-family:-apple-system,BlinkMacSystemFont,\\"Segoe UI\\",\\"Roboto\\",\\"Oxygen\\",\\"Ubuntu\\",\\"Cantarell\\",\\"Fira Sans\\",\\"Droid Sans\\",\\"Helvetica Neue\\",sans-serif;font-stretch:normal;font-style:normal;font-variant-caps:normal;font-weight:normal;height:auto;left:auto;letter-spacing:normal;line-height:1.2;margin-bottom:0;margin-left:0;margin-right:0;margin-top:0;max-height:none;max-width:none;min-height:0;min-width:0;opacity:1;outline-color:rgba(0,0,0,0);outline-offset:0;outline-style:none;outline-width:0;overflow-anchor:auto;overflow-wrap:normal;overflow-x:visible;overflow-y:visible;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;position:static;right:auto;table-layout:auto;text-align:start;text-decoration-color:rgba(0,0,0,0);text-decoration-line:none;text-decoration-skip:objects;text-decoration-style:solid;text-indent:0;text-shadow:none;text-transform:none;top:auto;transform:none;-webkit-transition:none;transition-delay:0s;transition-duration:0s;transition-property:all;transition-timing-function:ease;vertical-align:baseline;visibility:visible;white-space:normal;width:auto;word-break:normal;word-spacing:0;word-wrap:normal;z-index:auto;zoom:1}#purechat-container a:before,#purechat-container abbr:before,#purechat-container address:before,#purechat-container area:before,#purechat-container article:before,#purechat-container aside:before,#purechat-container audio:before,#purechat-container b:before,#purechat-container base:before,#purechat-container bdi:before,#purechat-container bdo:before,#purechat-container blockquote:before,#purechat-container body:before,#purechat-container br:before,#purechat-container button:before,#purechat-container canvas:before,#purechat-container caption:before,#purechat-container cite:before,#purechat-container code:before,#purechat-container col:before,#purechat-container colgroup:before,#purechat-container command:before,#purechat-container datalist:before,#purechat-container dd:before,#purechat-container del:before,#purechat-container details:before,#purechat-container dfn:before,#purechat-container div:before,#purechat-container dl:before,#purechat-container dt:before,#purechat-container em:before,#purechat-container embed:before,#purechat-container fieldset:before,#purechat-container figcaption:before,#purechat-container figure:before,#purechat-container footer:before,#purechat-container form:before,#purechat-container h1:before,#purechat-container h2:before,#purechat-container h3:before,#purechat-container h4:before,#purechat-container h5:before,#purechat-container h6:before,#purechat-container head:before,#purechat-container header:before,#purechat-container hgroup:before,#purechat-container hr:before,#purechat-container i:before,#purechat-container iframe:before,#purechat-container img:before,#purechat-container input:before,#purechat-container ins:before,#purechat-container kbd:before,#purechat-container keygen:before,#purechat-container label:before,#purechat-container legend:before,#purechat-container li:before,#purechat-container link:before,#purechat-container map:before,#purechat-container mark:before,#purechat-container menu:before,#purechat-container meta:before,#purechat-container meter:before,#purechat-container nav:before,#purechat-container noscript:before,#purechat-container object:before,#purechat-container ol:before,#purechat-container optgroup:before,#purechat-container option:before,#purechat-container output:before,#purechat-container p:before,#purechat-container param:before,#purechat-container pre:before,#purechat-container progress:before,#purechat-container q:before,#purechat-container rp:before,#purechat-container rt:before,#purechat-container ruby:before,#purechat-container s:before,#purechat-container samp:before,#purechat-container section:before,#purechat-container select:before,#purechat-container small:before,#purechat-container source:before,#purechat-container span:before,#purechat-container strong:before,#purechat-container sub:before,#purechat-container summary:before,#purechat-container sup:before,#purechat-container table:before,#purechat-container tbody:before,#purechat-container td:before,#purechat-container textarea:before,#purechat-container tfoot:before,#purechat-container th:before,#purechat-container thead:before,#purechat-container time:before,#purechat-container title:before,#purechat-container tr:before,#purechat-container track:before,#purechat-container u:before,#purechat-container ul:before,#purechat-container var:before,#purechat-container video:before,#purechat-container wbr:before,#purechat-container a:after,#purechat-container abbr:after,#purechat-container address:after,#purechat-container area:after,#purechat-container article:after,#purechat-container aside:after,#purechat-container audio:after,#purechat-container b:after,#purechat-container base:after,#purechat-container bdi:after,#purechat-container bdo:after,#purechat-container blockquote:after,#purechat-container body:after,#purechat-container br:after,#purechat-container button:after,#purechat-container canvas:after,#purechat-container caption:after,#purechat-container cite:after,#purechat-container code:after,#purechat-container col:after,#purechat-container colgroup:after,#purechat-container command:after,#purechat-container datalist:after,#purechat-container dd:after,#purechat-container del:after,#purechat-container details:after,#purechat-container dfn:after,#purechat-container div:after,#purechat-container dl:after,#purechat-container dt:after,#purechat-container em:after,#purechat-container embed:after,#purechat-container fieldset:after,#purechat-container figcaption:after,#purechat-container figure:after,#purechat-container footer:after,#purechat-container form:after,#purechat-container h1:after,#purechat-container h2:after,#purechat-container h3:after,#purechat-container h4:after,#purechat-container h5:after,#purechat-container h6:after,#purechat-container head:after,#purechat-container header:after,#purechat-container hgroup:after,#purechat-container hr:after,#purechat-container i:after,#purechat-container iframe:after,#purechat-container img:after,#purechat-container input:after,#purechat-container ins:after,#purechat-container kbd:after,#purechat-container keygen:after,#purechat-container label:after,#purechat-container legend:after,#purechat-container li:after,#purechat-container link:after,#purechat-container map:after,#purechat-container mark:after,#purechat-container menu:after,#purechat-container meta:after,#purechat-container meter:after,#purechat-container nav:after,#purechat-container noscript:after,#purechat-container object:after,#purechat-container ol:after,#purechat-container optgroup:after,#purechat-container option:after,#purechat-container output:after,#purechat-container p:after,#purechat-container param:after,#purechat-container pre:after,#purechat-container progress:after,#purechat-container q:after,#purechat-container rp:after,#purechat-container rt:after,#purechat-container ruby:after,#purechat-container s:after,#purechat-container samp:after,#purechat-container section:after,#purechat-container select:after,#purechat-container small:after,#purechat-container source:after,#purechat-container span:after,#purechat-container strong:after,#purechat-container sub:after,#purechat-container summary:after,#purechat-container sup:after,#purechat-container table:after,#purechat-container tbody:after,#purechat-container td:after,#purechat-container textarea:after,#purechat-container tfoot:after,#purechat-container th:after,#purechat-container thead:after,#purechat-container time:after,#purechat-container title:after,#purechat-container tr:after,#purechat-container track:after,#purechat-container u:after,#purechat-container ul:after,#purechat-container var:after,#purechat-container video:after,#purechat-container wbr:after{box-sizing:border-box}#purechat-container ::-webkit-input-placeholder{color:#afaba3}#purechat-container ::-moz-placeholder{color:#afaba3;opacity:1}#purechat-container :-ms-input-placeholder{color:#afaba3}#purechat-container ::-ms-input-placeholder{color:#afaba3}#purechat-container a{cursor:pointer}#purechat-container a,#purechat-container em,#purechat-container span,#purechat-container strong{display:inline}#purechat-container button,#purechat-container img{display:inline-block}#purechat-container .purechat-fade-enter{opacity:0}#purechat-container .purechat-fade-enter.purechat-fade-enter-active{opacity:1;transition:opacity 400ms cubic-bezier(.4,0,.2,1)}#purechat-container .purechat-fade-exit{opacity:1}#purechat-container .purechat-fade-exit.purechat-fade-exit-active{opacity:0;transition:opacity 400ms cubic-bezier(.4,0,.2,1)}#purechat-container .purechat-quick-fade-enter{opacity:0}#purechat-container .purechat-quick-fade-enter.purechat-quick-fade-enter-active{opacity:1;transition:opacity 200ms cubic-bezier(.4,0,.2,1)}#purechat-container .purechat-quick-fade-exit{opacity:1}#purechat-container .purechat-quick-fade-exit.purechat-quick-fade-exit-active{opacity:0;transition:opacity 200ms cubic-bezier(.4,0,.2,1)}@-moz-keyframes purechat-fade-in{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes purechat-fade-in{0%{opacity:0}100%{opacity:1}}@-o-keyframes purechat-fade-in{0%{opacity:0}100%{opacity:1}}@keyframes purechat-fade-in{0%{opacity:0}100%{opacity:1}}@-moz-keyframes purechat-spinner-spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-webkit-keyframes purechat-spinner-spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-o-keyframes purechat-spinner-spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes purechat-spinner-spin{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@-moz-keyframes purechat-spinner-check{0%{height:0;opacity:1;width:0}20%{height:0;opacity:1;width:1.25rem}40%{height:2.5rem;opacity:1;width:1.25rem}100%{height:2.5rem;opacity:1;width:1.25rem}}@-webkit-keyframes purechat-spinner-check{0%{height:0;opacity:1;width:0}20%{height:0;opacity:1;width:1.25rem}40%{height:2.5rem;opacity:1;width:1.25rem}100%{height:2.5rem;opacity:1;width:1.25rem}}@-o-keyframes purechat-spinner-check{0%{height:0;opacity:1;width:0}20%{height:0;opacity:1;width:1.25rem}40%{height:2.5rem;opacity:1;width:1.25rem}100%{height:2.5rem;opacity:1;width:1.25rem}}@keyframes purechat-spinner-check{0%{height:0;opacity:1;width:0}20%{height:0;opacity:1;width:1.25rem}40%{height:2.5rem;opacity:1;width:1.25rem}100%{height:2.5rem;opacity:1;width:1.25rem}}@-moz-keyframes purechat-launcher-appear{0%{opacity:0;transform:translate(0,5px)}80%{opacity:1;transform:translate(0,-2px)}100%{transform:translate(0,0)}}@-webkit-keyframes purechat-launcher-appear{0%{opacity:0;transform:translate(0,5px)}80%{opacity:1;transform:translate(0,-2px)}100%{transform:translate(0,0)}}@-o-keyframes purechat-launcher-appear{0%{opacity:0;transform:translate(0,5px)}80%{opacity:1;transform:translate(0,-2px)}100%{transform:translate(0,0)}}@keyframes purechat-launcher-appear{0%{opacity:0;transform:translate(0,5px)}80%{opacity:1;transform:translate(0,-2px)}100%{transform:translate(0,0)}}@-moz-keyframes purechat-launcher-wrapper-leave{0%{opacity:1;transform:translate(0 0)}100%{opacity:0;transform:translate(0,5px)}}@-webkit-keyframes purechat-launcher-wrapper-leave{0%{opacity:1;transform:translate(0 0)}100%{opacity:0;transform:translate(0,5px)}}@-o-keyframes purechat-launcher-wrapper-leave{0%{opacity:1;transform:translate(0 0)}100%{opacity:0;transform:translate(0,5px)}}@keyframes purechat-launcher-wrapper-leave{0%{opacity:1;transform:translate(0 0)}100%{opacity:0;transform:translate(0,5px)}}@-moz-keyframes purechat-launcher-svg-appear{0%{opacity:0;transform:rotate(24deg) scale(0) translate(1px,-2px)}44%{opacity:1}66%{transform:rotate(0) scale(1.11) translate(1px,-3px)}100%{opacity:1;transform:rotate(0) scale(1) translate(0,0)}}@-webkit-keyframes purechat-launcher-svg-appear{0%{opacity:0;transform:rotate(24deg) scale(0) translate(1px,-2px)}44%{opacity:1}66%{transform:rotate(0) scale(1.11) translate(1px,-3px)}100%{opacity:1;transform:rotate(0) scale(1) translate(0,0)}}@-o-keyframes purechat-launcher-svg-appear{0%{opacity:0;transform:rotate(24deg) scale(0) translate(1px,-2px)}44%{opacity:1}66%{transform:rotate(0) scale(1.11) translate(1px,-3px)}100%{opacity:1;transform:rotate(0) scale(1) translate(0,0)}}@keyframes purechat-launcher-svg-appear{0%{opacity:0;transform:rotate(24deg) scale(0) translate(1px,-2px)}44%{opacity:1}66%{transform:rotate(0) scale(1.11) translate(1px,-3px)}100%{opacity:1;transform:rotate(0) scale(1) translate(0,0)}}@-moz-keyframes purechat-fadeIn{from{opacity:0}to{opacity:1}}@-webkit-keyframes purechat-fadeIn{from{opacity:0}to{opacity:1}}@-o-keyframes purechat-fadeIn{from{opacity:0}to{opacity:1}}@keyframes purechat-fadeIn{from{opacity:0}to{opacity:1}}@-moz-keyframes purechat-slideUpAndLeft{0%{transform:translate(20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@-webkit-keyframes purechat-slideUpAndLeft{0%{transform:translate(20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@-o-keyframes purechat-slideUpAndLeft{0%{transform:translate(20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@keyframes purechat-slideUpAndLeft{0%{transform:translate(20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@-moz-keyframes purechat-slideUpAndRight{0%{transform:translate(-20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@-webkit-keyframes purechat-slideUpAndRight{0%{transform:translate(-20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@-o-keyframes purechat-slideUpAndRight{0%{transform:translate(-20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@keyframes purechat-slideUpAndRight{0%{transform:translate(-20px,20px) scale(0)}80%{transform:translate(0,0) scale(1.02)}95%{transform:scale(.98)}100%{transform:scale(1)}}@-moz-keyframes purechat-tailSlideDown{0%{opacity:0;transform:translateY(-6px)}10%{opacity:1}100%{transform:translateY(0)}}@-webkit-keyframes purechat-tailSlideDown{0%{opacity:0;transform:translateY(-6px)}10%{opacity:1}100%{transform:translateY(0)}}@-o-keyframes purechat-tailSlideDown{0%{opacity:0;transform:translateY(-6px)}10%{opacity:1}100%{transform:translateY(0)}}@keyframes purechat-tailSlideDown{0%{opacity:0;transform:translateY(-6px)}10%{opacity:1}100%{transform:translateY(0)}}@-moz-keyframes purechat-slideUp{0%{opacity:0;transform:translateY(16px)}80%{opacity:1;transform:translateY(-4px)}100%{transform:translateY(0)}}@-webkit-keyframes purechat-slideUp{0%{opacity:0;transform:translateY(16px)}80%{opacity:1;transform:translateY(-4px)}100%{transform:translateY(0)}}@-o-keyframes purechat-slideUp{0%{opacity:0;transform:translateY(16px)}80%{opacity:1;transform:translateY(-4px)}100%{transform:translateY(0)}}@keyframes purechat-slideUp{0%{opacity:0;transform:translateY(16px)}80%{opacity:1;transform:translateY(-4px)}100%{transform:translateY(0)}}@-moz-keyframes purechat-pulsate{from{transform:scale(1);transform-origin:center center;animation-timing-function:ease-out}10%{transform:scale(.91);animation-timing-function:ease-in}17%{transform:scale(.98);animation-timing-function:ease-out}33%{transform:scale(.87);animation-timing-function:ease-in}45%{transform:scale(1);animation-timing-function:ease-out}}@-webkit-keyframes purechat-pulsate{from{transform:scale(1);transform-origin:center center;animation-timing-function:ease-out}10%{transform:scale(.91);animation-timing-function:ease-in}17%{transform:scale(.98);animation-timing-function:ease-out}33%{transform:scale(.87);animation-timing-function:ease-in}45%{transform:scale(1);animation-timing-function:ease-out}}@-o-keyframes purechat-pulsate{from{transform:scale(1);transform-origin:center center;animation-timing-function:ease-out}10%{transform:scale(.91);animation-timing-function:ease-in}17%{transform:scale(.98);animation-timing-function:ease-out}33%{transform:scale(.87);animation-timing-function:ease-in}45%{transform:scale(1);animation-timing-function:ease-out}}@keyframes purechat-pulsate{from{transform:scale(1);transform-origin:center center;animation-timing-function:ease-out}10%{transform:scale(.91);animation-timing-function:ease-in}17%{transform:scale(.98);animation-timing-function:ease-out}33%{transform:scale(.87);animation-timing-function:ease-in}45%{transform:scale(1);animation-timing-function:ease-out}}#purechat-container a{color:#3b404c;cursor:pointer;display:inline;text-decoration:underline}#purechat-container p{color:#3b404c;margin-bottom:.625rem}#purechat-container p img{max-width:100%}#purechat-container img{display:inline-block}#purechat-container input[type=text],#purechat-container input[type=password],#purechat-container input[type=email],#purechat-container input[type=number],#purechat-container input[type=date],#purechat-container input[type=tel],#purechat-container textarea,#purechat-container select,#purechat-container .purechat-input{background:#fff;border-radius:4px;border:solid 1px #b2b2b2;cursor:text;font-size:1rem;line-height:1.375;margin-bottom:.625rem;outline:0;padding:.5rem .625rem .5625rem .625rem;resize:none;transition:border-color 400ms ease;width:100%}#purechat-container input[type=text]:focus,#purechat-container input[type=password]:focus,#purechat-container input[type=email]:focus,#purechat-container input[type=number]:focus,#purechat-container input[type=date]:focus,#purechat-container input[type=tel]:focus,#purechat-container textarea:focus,#purechat-container select:focus,#purechat-container .purechat-input:focus{border-color:#289aa0}#purechat-container input[type=text].purechat-input-invalid,#purechat-container input[type=password].purechat-input-invalid,#purechat-container input[type=email].purechat-input-invalid,#purechat-container input[type=number].purechat-input-invalid,#purechat-container input[type=date].purechat-input-invalid,#purechat-container input[type=tel].purechat-input-invalid,#purechat-container textarea.purechat-input-invalid,#purechat-container select.purechat-input-invalid,#purechat-container .purechat-input.purechat-input-invalid{border-color:#efb867}#purechat-container textarea{min-height:6rem;padding-top:.8rem;word-wrap:break-word}@media screen and (-webkit-min-device-pixel-ratio:0){#purechat-container select,#purechat-container textarea,#purechat-container input{font-size:1rem !important;padding:.4375rem .625rem .5rem .625rem !important}}#purechat-container .purechat-launcher-frame{border:none 0 !important;display:block !important;min-width:auto !important;max-width:auto !important;overflow:hidden !important;position:fixed !important;height:65px;z-index:2000000000}#purechat-container .purechat-launcher-frame.purechat-launcher-frame-bottom-left{bottom:10px;left:15px}#purechat-container .purechat-launcher-frame.purechat-launcher-frame-bottom-right{bottom:10px;right:15px}#purechat-container .purechat-launcher-frame.purechat-launcher-frame-top-left{top:10px;left:15px}#purechat-container .purechat-launcher-frame.purechat-launcher-frame-top-right{top:10px;right:15px}#purechat-container .purechat-launcher-frame.purechat-launcher-frame-mobile{max-width:calc(100% - 48px);}#purechat-container .purechat-launcher-frame.purechat-launcher-frame-mobile.purechat-launcher-frame-mobile-demo{bottom:-7px;right:9px}#purechat-container .purechat-messenger-frame{border:none 0 !important;display:block !important;min-width:auto !important;max-width:auto !important;overflow:hidden !important;position:fixed !important;box-shadow:1px 1px 8px 0 rgba(59,64,76,0.8);border-radius:8px;opacity:1;width:377px;z-index:2000000100}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-hosted{margin:0 auto !important;position:static !important;width:377px !important}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-popped-out{border-radius:0;bottom:0 !important;height:100% !important;left:0 !important;right:0 !important;top:0 !important;width:100% !important}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-bottom-left{bottom:30px;left:24px}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-bottom-right{bottom:30px;right:24px}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-top-left{top:30px;left:24px}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-top-right{top:30px;right:24px}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-mobile{border-radius:0;bottom:0 !important;height:100% !important;left:0 !important;right:0 !important;top:0 !important;width:100% !important}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-enter{opacity:0}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-enter.purechat-messenger-frame-bottom-left,#purechat-container .purechat-messenger-frame.purechat-messenger-frame-enter.purechat-messenger-frame-bottom-right{transform:translateY(20px)}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-enter.purechat-messenger-frame-top-left,#purechat-container .purechat-messenger-frame.purechat-messenger-frame-enter.purechat-messenger-frame-top-right{transform:translateY(-20px)}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-enter.purechat-messenger-frame-enter-active{opacity:1;transform:translateY(0);transition:opacity 100ms cubic-bezier(.4,0,.2,1),transform 100ms cubic-bezier(.4,0,.2,1)}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-exit{opacity:1;transform:translateY(0)}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-exit.purechat-messenger-frame-exit-active{opacity:0;transition:opacity 100ms cubic-bezier(.4,0,.2,1),transform 100ms cubic-bezier(.4,0,.2,1)}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-exit.purechat-messenger-frame-exit-active.purechat-messenger-frame-bottom-left,#purechat-container .purechat-messenger-frame.purechat-messenger-frame-exit.purechat-messenger-frame-exit-active.purechat-messenger-frame-bottom-right{transform:translateY(20px)}#purechat-container .purechat-messenger-frame.purechat-messenger-frame-exit.purechat-messenger-frame-exit-active.purechat-messenger-frame-top-left,#purechat-container .purechat-messenger-frame.purechat-messenger-frame-exit.purechat-messenger-frame-exit-active.purechat-messenger-frame-top-right{transform:translateY(-20px)}#purechat-container .purechat-image-preview-frame{border:none 0 !important;display:block !important;min-width:auto !important;max-width:auto !important;overflow:hidden !important;position:fixed !important;bottom:0;left:0;right:0;top:0;height:100%;width:100%;z-index:2147483647}#purechat-container .purechat-image-preview-frame.purechat-image-preview-frame-enter{opacity:0}#purechat-container .purechat-image-preview-frame.purechat-image-preview-frame-enter.purechat-image-preview-frame-enter-active{opacity:1;transition:opacity 500ms cubic-bezier(.4,0,.2,1)}#purechat-container .purechat-image-preview-frame.purechat-image-preview-frame-exit{opacity:1}#purechat-container .purechat-image-preview-frame.purechat-image-preview-frame-exit.purechat-image-preview-frame-exit-active{opacity:0;transition:opacity 500ms cubic-bezier(.4,0,.2,1)}body.purechat-direct-access #purechat-container{width:100% !important}.purechat-direct-container.purechat-mobile #purechat-container .purechat-messenger-frame.purechat-messenger-frame-hosted{border-radius:0;height:100% !important;width:100% !important}body.purechat-direct-access #purechat-container{width:100% !important}body.purechat-direct-access.purechat-direct-access-mobile #purechat-container{height:100% !important}body.purechat-direct-access.purechat-direct-access-mobile #purechat-container .purechat-messenger-frame.purechat-messenger-frame-hosted{border-radius:0;height:100% !important;width:100% !important}body.purechat-direct-access.purechat-direct-access-mobile #purechat-container .purechat-app,body.purechat-direct-access.purechat-direct-access-mobile #purechat-container .purechat-chatbox{height:100%;width:100%}body.purechat-direct-access.purechat-direct-access-mobile #mobile-container{height:100%;width:100%}", ""]);\n// Exports\n/* harmony default export */ __webpack_exports__["Z"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56433\n')},23645:function(module){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === "string") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, ""]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM2NDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wdXJlY2hhdC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23645\n')},35666:function(module){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35666\n')}},__webpack_module_cache__={};function __webpack_require__(n){var t=__webpack_module_cache__[n];if(void 0!==t)return t.exports;var e=__webpack_module_cache__[n]={id:n,exports:{}};return __webpack_modules__[n](e,e.exports,__webpack_require__),e.exports}__webpack_require__.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=function(n,t){for(var e in t)__webpack_require__.o(t,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},__webpack_require__.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},__webpack_require__(35666);var __webpack_exports__=__webpack_require__(94849)})();